
c:/Users/evanh/OneDrive/Desktop/CTD/InternetOfThings/Lab9/target/3.0.0/argon/Lab9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000042c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d82e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e31c  000d82e4  0001e31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000045c  2003e394  2003e394  0002e394  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d835c  000d835c  0002835c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8384  000d8384  00028384  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001d375a  00000000  00000000  00028388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b2f8  00000000  00000000  001fbae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00037229  00000000  00000000  00216dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002f00  00000000  00000000  0024e003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009a70  00000000  00000000  00250f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fb0e  00000000  00000000  0025a973  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00045e81  00000000  00000000  0029a481  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012da73  00000000  00000000  002e0302  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000084d4  00000000  00000000  0040dd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbd3 	bl	d77dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbdb 	bl	d77f8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e31c 	.word	0x2003e31c
   d404c:	000d82e4 	.word	0x000d82e4
   d4050:	2003e394 	.word	0x2003e394
   d4054:	2003e394 	.word	0x2003e394
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 fec3 	bl	d5dec <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d82b0 	.word	0x000d82b0
   d4080:	000d82d4 	.word	0x000d82d4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bc6c 	b.w	d4960 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe9d 	bl	d4dc8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 be6d 	b.w	d5d70 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bbf1 	b.w	d587c <malloc>

000d409a <_Znaj>:
   d409a:	f001 bbef 	b.w	d587c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bbf5 	b.w	d588c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z14enableButtonsFv>:
  Blynk.syncVirtual(V1, V2);

}

void enableButtonsF(){
  enableButtons = true;
   d40b4:	4b01      	ldr	r3, [pc, #4]	; (d40bc <_Z14enableButtonsFv+0x8>)
   d40b6:	2201      	movs	r2, #1
   d40b8:	701a      	strb	r2, [r3, #0]
}
   d40ba:	4770      	bx	lr
   d40bc:	2003e31c 	.word	0x2003e31c

000d40c0 <_Z15normalizeLightsv>:

void normalizeLights(){
  normalLights = true;
   d40c0:	4b01      	ldr	r3, [pc, #4]	; (d40c8 <_Z15normalizeLightsv+0x8>)
   d40c2:	2201      	movs	r2, #1
   d40c4:	701a      	strb	r2, [r3, #0]
}
   d40c6:	4770      	bx	lr
   d40c8:	2003e324 	.word	0x2003e324

000d40cc <_ZN10BlynkParam3addEPKc.part.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ce:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40d0:	4608      	mov	r0, r1
   d40d2:	9101      	str	r1, [sp, #4]
   d40d4:	f003 fbc6 	bl	d7864 <strlen>
    if (len + l > buff_size)
   d40d8:	6863      	ldr	r3, [r4, #4]
   d40da:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40dc:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40de:	18e8      	adds	r0, r5, r3
   d40e0:	4290      	cmp	r0, r2
   d40e2:	d808      	bhi.n	d40f6 <_ZN10BlynkParam3addEPKc.part.0+0x2a>
    memcpy(buff+len, b, l);
   d40e4:	6820      	ldr	r0, [r4, #0]
   d40e6:	9901      	ldr	r1, [sp, #4]
   d40e8:	462a      	mov	r2, r5
   d40ea:	4418      	add	r0, r3
   d40ec:	f003 fb76 	bl	d77dc <memcpy>
    len += l;
   d40f0:	6860      	ldr	r0, [r4, #4]
   d40f2:	4428      	add	r0, r5
   d40f4:	6060      	str	r0, [r4, #4]
}
   d40f6:	b003      	add	sp, #12
   d40f8:	bd30      	pop	{r4, r5, pc}
	...

000d40fc <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d40fc:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fe:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4100:	4b0a      	ldr	r3, [pc, #40]	; (d412c <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d4102:	6003      	str	r3, [r0, #0]
   d4104:	4605      	mov	r5, r0
   d4106:	b17c      	cbz	r4, d4128 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4108:	6863      	ldr	r3, [r4, #4]
   d410a:	3b01      	subs	r3, #1
   d410c:	6063      	str	r3, [r4, #4]
   d410e:	b95b      	cbnz	r3, d4128 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4110:	6823      	ldr	r3, [r4, #0]
   d4112:	4620      	mov	r0, r4
   d4114:	689b      	ldr	r3, [r3, #8]
   d4116:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4118:	68a3      	ldr	r3, [r4, #8]
   d411a:	3b01      	subs	r3, #1
   d411c:	60a3      	str	r3, [r4, #8]
   d411e:	b91b      	cbnz	r3, d4128 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4120:	6823      	ldr	r3, [r4, #0]
   d4122:	4620      	mov	r0, r4
   d4124:	68db      	ldr	r3, [r3, #12]
   d4126:	4798      	blx	r3
   d4128:	4628      	mov	r0, r5
   d412a:	bd38      	pop	{r3, r4, r5, pc}
   d412c:	000d7ffc 	.word	0x000d7ffc

000d4130 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4130:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4132:	f001 f9bf 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4136:	4b03      	ldr	r3, [pc, #12]	; (d4144 <_ZN10CloudClass7processEv+0x14>)
   d4138:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d413a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d413e:	f001 bb8d 	b.w	d585c <spark_process>
   d4142:	bf00      	nop
   d4144:	2003e7d4 	.word	0x2003e7d4

000d4148 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4148:	6803      	ldr	r3, [r0, #0]
   d414a:	b12b      	cbz	r3, d4158 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d414c:	6842      	ldr	r2, [r0, #4]
   d414e:	4293      	cmp	r3, r2
   d4150:	d202      	bcs.n	d4158 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d4152:	4618      	mov	r0, r3
   d4154:	f003 bb2c 	b.w	d77b0 <atoi>
   d4158:	2000      	movs	r0, #0
   d415a:	4770      	bx	lr

000d415c <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d415c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d415e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4160:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4162:	b145      	cbz	r5, d4176 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4164:	6843      	ldr	r3, [r0, #4]
   d4166:	429d      	cmp	r5, r3
   d4168:	d205      	bcs.n	d4176 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d416a:	4628      	mov	r0, r5
   d416c:	f003 fb7a 	bl	d7864 <strlen>
   d4170:	3001      	adds	r0, #1
   d4172:	4405      	add	r5, r0
   d4174:	6025      	str	r5, [r4, #0]
        }
   d4176:	4620      	mov	r0, r4
   d4178:	bd38      	pop	{r3, r4, r5, pc}
	...

000d417c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d417c:	b538      	push	{r3, r4, r5, lr}
   d417e:	4604      	mov	r4, r0
   d4180:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4182:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4186:	6825      	ldr	r5, [r4, #0]
   d4188:	4a04      	ldr	r2, [pc, #16]	; (d419c <_ZN10BlynkParam3addEi+0x20>)
   d418a:	1a09      	subs	r1, r1, r0
   d418c:	4428      	add	r0, r5
   d418e:	f001 fb85 	bl	d589c <snprintf>
   d4192:	6863      	ldr	r3, [r4, #4]
   d4194:	3001      	adds	r0, #1
   d4196:	4403      	add	r3, r0
   d4198:	6063      	str	r3, [r4, #4]
    }
   d419a:	bd38      	pop	{r3, r4, r5, pc}
   d419c:	000d79b8 	.word	0x000d79b8

000d41a0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d41a0:	b538      	push	{r3, r4, r5, lr}
   d41a2:	4604      	mov	r4, r0
   d41a4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d41a6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d41aa:	6825      	ldr	r5, [r4, #0]
   d41ac:	4a04      	ldr	r2, [pc, #16]	; (d41c0 <_ZN10BlynkParam3addEl+0x20>)
   d41ae:	1a09      	subs	r1, r1, r0
   d41b0:	4428      	add	r0, r5
   d41b2:	f001 fb73 	bl	d589c <snprintf>
   d41b6:	6863      	ldr	r3, [r4, #4]
   d41b8:	3001      	adds	r0, #1
   d41ba:	4403      	add	r3, r0
   d41bc:	6063      	str	r3, [r4, #4]
    }
   d41be:	bd38      	pop	{r3, r4, r5, pc}
   d41c0:	000d79bb 	.word	0x000d79bb

000d41c4 <_Z5lightiii>:
void light(int blue, int green, int red){
   d41c4:	b538      	push	{r3, r4, r5, lr}
   d41c6:	460d      	mov	r5, r1
  digitalWrite(D3, blue);
   d41c8:	b2c1      	uxtb	r1, r0
   d41ca:	2003      	movs	r0, #3
void light(int blue, int green, int red){
   d41cc:	4614      	mov	r4, r2
  digitalWrite(D3, blue);
   d41ce:	f002 fc76 	bl	d6abe <digitalWrite>
  digitalWrite(D5, green);
   d41d2:	b2e9      	uxtb	r1, r5
   d41d4:	2005      	movs	r0, #5
   d41d6:	f002 fc72 	bl	d6abe <digitalWrite>
  digitalWrite(D7, red);
   d41da:	b2e1      	uxtb	r1, r4
   d41dc:	2007      	movs	r0, #7
}
   d41de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(D7, red);
   d41e2:	f002 bc6c 	b.w	d6abe <digitalWrite>
	...

000d41e8 <BlynkWidgetWrite3>:
BLYNK_WRITE(V3){
  light(HIGH, HIGH, HIGH);
   d41e8:	2201      	movs	r2, #1
BLYNK_WRITE(V3){
   d41ea:	b508      	push	{r3, lr}
  light(HIGH, HIGH, HIGH);
   d41ec:	4611      	mov	r1, r2
   d41ee:	4610      	mov	r0, r2
   d41f0:	f7ff ffe8 	bl	d41c4 <_Z5lightiii>
  normalLights = false;
   d41f4:	4b05      	ldr	r3, [pc, #20]	; (d420c <BlynkWidgetWrite3+0x24>)
  timer.setTimeout(1000, normalizeLights);
   d41f6:	4806      	ldr	r0, [pc, #24]	; (d4210 <BlynkWidgetWrite3+0x28>)
  normalLights = false;
   d41f8:	2200      	movs	r2, #0
   d41fa:	701a      	strb	r2, [r3, #0]
   d41fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  timer.setTimeout(1000, normalizeLights);
   d4200:	4a04      	ldr	r2, [pc, #16]	; (d4214 <BlynkWidgetWrite3+0x2c>)
   d4202:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4206:	f001 b86b 	b.w	d52e0 <_ZN10BlynkTimer10setTimeoutEmPFvvE>
   d420a:	bf00      	nop
   d420c:	2003e324 	.word	0x2003e324
   d4210:	2003e400 	.word	0x2003e400
   d4214:	000d40c1 	.word	0x000d40c1

000d4218 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4218:	b508      	push	{r3, lr}
        state = CONNECTING;
   d421a:	2300      	movs	r3, #0
   d421c:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d421e:	6800      	ldr	r0, [r0, #0]
   d4220:	f002 fa34 	bl	d668c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d4224:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d4228:	f001 b8cf 	b.w	d53ca <BlynkNoOpCbk>

000d422c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d422c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d4230:	188f      	adds	r7, r1, r2
   d4232:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d4234:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4236:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d423a:	4606      	mov	r6, r0
   d423c:	4689      	mov	r9, r1
   d423e:	4690      	mov	r8, r2
    if (it >= param.end())
   d4240:	f080 80c2 	bcs.w	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d4244:	a805      	add	r0, sp, #20
   d4246:	880d      	ldrh	r5, [r1, #0]
   d4248:	f7ff ff88 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
   d424c:	6803      	ldr	r3, [r0, #0]
   d424e:	429f      	cmp	r7, r3
   d4250:	f240 80ba 	bls.w	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4254:	9805      	ldr	r0, [sp, #20]
   d4256:	7803      	ldrb	r3, [r0, #0]
   d4258:	2b41      	cmp	r3, #65	; 0x41
   d425a:	d149      	bne.n	d42f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   d425c:	3001      	adds	r0, #1
   d425e:	f003 faa7 	bl	d77b0 <atoi>
   d4262:	2805      	cmp	r0, #5
   d4264:	dd37      	ble.n	d42d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   d4266:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   d4268:	f247 2376 	movw	r3, #29302	; 0x7276
   d426c:	429d      	cmp	r5, r3
   d426e:	f000 80d3 	beq.w	d4418 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   d4272:	d841      	bhi.n	d42f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   d4274:	f247 2361 	movw	r3, #29281	; 0x7261
   d4278:	429d      	cmp	r5, r3
   d427a:	f000 80a8 	beq.w	d43ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   d427e:	f247 2364 	movw	r3, #29284	; 0x7264
   d4282:	429d      	cmp	r5, r3
   d4284:	d06b      	beq.n	d435e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   d4286:	f646 5370 	movw	r3, #28016	; 0x6d70
   d428a:	429d      	cmp	r5, r3
   d428c:	d141      	bne.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d428e:	4d78      	ldr	r5, [pc, #480]	; (d4470 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4290:	4e78      	ldr	r6, [pc, #480]	; (d4474 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   d4292:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d4488 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        while (it < param.end()) {
   d4296:	9805      	ldr	r0, [sp, #20]
   d4298:	4287      	cmp	r7, r0
   d429a:	f240 8095 	bls.w	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d429e:	7803      	ldrb	r3, [r0, #0]
   d42a0:	2b41      	cmp	r3, #65	; 0x41
   d42a2:	d14b      	bne.n	d433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   d42a4:	3001      	adds	r0, #1
   d42a6:	f003 fa83 	bl	d77b0 <atoi>
   d42aa:	2805      	cmp	r0, #5
   d42ac:	dd39      	ble.n	d4322 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   d42ae:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d42b0:	a805      	add	r0, sp, #20
   d42b2:	f7ff ff53 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d42b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   d42ba:	4629      	mov	r1, r5
   d42bc:	4648      	mov	r0, r9
   d42be:	f003 fac7 	bl	d7850 <strcmp>
   d42c2:	4601      	mov	r1, r0
   d42c4:	2800      	cmp	r0, #0
   d42c6:	d13d      	bne.n	d4344 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   d42c8:	4620      	mov	r0, r4
   d42ca:	f002 fbe7 	bl	d6a9c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d42ce:	a805      	add	r0, sp, #20
   d42d0:	f7ff ff44 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d42d4:	e7df      	b.n	d4296 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42d6:	9805      	ldr	r0, [sp, #20]
   d42d8:	3001      	adds	r0, #1
   d42da:	f003 fa69 	bl	d77b0 <atoi>
   d42de:	2800      	cmp	r0, #0
   d42e0:	dbc1      	blt.n	d4266 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   d42e2:	9805      	ldr	r0, [sp, #20]
   d42e4:	3001      	adds	r0, #1
   d42e6:	f003 fa63 	bl	d77b0 <atoi>
   d42ea:	300e      	adds	r0, #14
   d42ec:	b2c4      	uxtb	r4, r0
   d42ee:	e7bb      	b.n	d4268 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   d42f0:	a805      	add	r0, sp, #20
   d42f2:	f7ff ff29 	bl	d4148 <_ZNK10BlynkParam8iterator5asIntEv>
   d42f6:	e7f9      	b.n	d42ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   d42f8:	f247 7364 	movw	r3, #30564	; 0x7764
   d42fc:	429d      	cmp	r5, r3
   d42fe:	d04f      	beq.n	d43a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   d4300:	f247 7376 	movw	r3, #30582	; 0x7776
   d4304:	429d      	cmp	r5, r3
   d4306:	f000 8097 	beq.w	d4438 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   d430a:	f247 7361 	movw	r3, #30561	; 0x7761
   d430e:	429d      	cmp	r5, r3
   d4310:	d06f      	beq.n	d43f2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4312:	2300      	movs	r3, #0
   d4314:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4318:	2202      	movs	r2, #2
   d431a:	9200      	str	r2, [sp, #0]
   d431c:	8b72      	ldrh	r2, [r6, #26]
   d431e:	4619      	mov	r1, r3
   d4320:	e03a      	b.n	d4398 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4322:	9805      	ldr	r0, [sp, #20]
   d4324:	3001      	adds	r0, #1
   d4326:	f003 fa43 	bl	d77b0 <atoi>
   d432a:	2800      	cmp	r0, #0
   d432c:	dbbf      	blt.n	d42ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   d432e:	9805      	ldr	r0, [sp, #20]
   d4330:	3001      	adds	r0, #1
   d4332:	f003 fa3d 	bl	d77b0 <atoi>
   d4336:	300e      	adds	r0, #14
   d4338:	b2c4      	uxtb	r4, r0
   d433a:	e7b9      	b.n	d42b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   d433c:	a805      	add	r0, sp, #20
   d433e:	f7ff ff03 	bl	d4148 <_ZNK10BlynkParam8iterator5asIntEv>
   d4342:	e7f9      	b.n	d4338 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d4344:	4631      	mov	r1, r6
   d4346:	4648      	mov	r0, r9
   d4348:	f003 fa82 	bl	d7850 <strcmp>
   d434c:	b128      	cbz	r0, d435a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   d434e:	4641      	mov	r1, r8
   d4350:	4648      	mov	r0, r9
   d4352:	f003 fa7d 	bl	d7850 <strcmp>
   d4356:	2800      	cmp	r0, #0
   d4358:	d1b9      	bne.n	d42ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   d435a:	2101      	movs	r1, #1
   d435c:	e7b4      	b.n	d42c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d435e:	ab0a      	add	r3, sp, #40	; 0x28
   d4360:	4945      	ldr	r1, [pc, #276]	; (d4478 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   d4362:	9307      	str	r3, [sp, #28]
   d4364:	a807      	add	r0, sp, #28
   d4366:	2310      	movs	r3, #16
   d4368:	2500      	movs	r5, #0
   d436a:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d436e:	f7ff fead 	bl	d40cc <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d4372:	a807      	add	r0, sp, #28
   d4374:	4621      	mov	r1, r4
   d4376:	f7ff ff01 	bl	d417c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d437a:	4620      	mov	r0, r4
   d437c:	f002 fbb8 	bl	d6af0 <digitalRead>
        rsp.add(analogRead(pin));
   d4380:	4601      	mov	r1, r0
   d4382:	a807      	add	r0, sp, #28
   d4384:	f7ff ff0c 	bl	d41a0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d4388:	9b08      	ldr	r3, [sp, #32]
   d438a:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d438e:	3b01      	subs	r3, #1
   d4390:	9300      	str	r3, [sp, #0]
   d4392:	9b07      	ldr	r3, [sp, #28]
   d4394:	462a      	mov	r2, r5
   d4396:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4398:	4630      	mov	r0, r6
   d439a:	f000 fb2d 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d439e:	e013      	b.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   d43a0:	a805      	add	r0, sp, #20
   d43a2:	f7ff fedb 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
   d43a6:	6803      	ldr	r3, [r0, #0]
   d43a8:	429f      	cmp	r7, r3
   d43aa:	d90d      	bls.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d43ac:	b2a4      	uxth	r4, r4
   d43ae:	2101      	movs	r1, #1
   d43b0:	4620      	mov	r0, r4
   d43b2:	f002 fb73 	bl	d6a9c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d43b6:	a805      	add	r0, sp, #20
   d43b8:	f7ff fec6 	bl	d4148 <_ZNK10BlynkParam8iterator5asIntEv>
   d43bc:	1e01      	subs	r1, r0, #0
   d43be:	bf18      	it	ne
   d43c0:	2101      	movne	r1, #1
   d43c2:	4620      	mov	r0, r4
   d43c4:	f002 fb7b 	bl	d6abe <digitalWrite>
    }
}
   d43c8:	b00f      	add	sp, #60	; 0x3c
   d43ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43ce:	ab0a      	add	r3, sp, #40	; 0x28
   d43d0:	9307      	str	r3, [sp, #28]
   d43d2:	a807      	add	r0, sp, #28
   d43d4:	2310      	movs	r3, #16
   d43d6:	4929      	ldr	r1, [pc, #164]	; (d447c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   d43d8:	2500      	movs	r5, #0
   d43da:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43de:	f7ff fe75 	bl	d40cc <_ZN10BlynkParam3addEPKc.part.0>
        rsp.add(pin);
   d43e2:	a807      	add	r0, sp, #28
   d43e4:	4621      	mov	r1, r4
   d43e6:	f7ff fec9 	bl	d417c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d43ea:	4620      	mov	r0, r4
   d43ec:	f002 fb93 	bl	d6b16 <analogRead>
   d43f0:	e7c6      	b.n	d4380 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   d43f2:	a805      	add	r0, sp, #20
   d43f4:	f7ff feb2 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
   d43f8:	6803      	ldr	r3, [r0, #0]
   d43fa:	429f      	cmp	r7, r3
   d43fc:	d9e4      	bls.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d43fe:	b2a4      	uxth	r4, r4
   d4400:	2101      	movs	r1, #1
   d4402:	4620      	mov	r0, r4
   d4404:	f002 fb4a 	bl	d6a9c <pinMode>
        analogWrite(pin, it.asInt());
   d4408:	a805      	add	r0, sp, #20
   d440a:	f7ff fe9d 	bl	d4148 <_ZNK10BlynkParam8iterator5asIntEv>
   d440e:	4601      	mov	r1, r0
   d4410:	4620      	mov	r0, r4
   d4412:	f002 fb97 	bl	d6b44 <_Z11analogWritetm>
    } break;
   d4416:	e7d7      	b.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4418:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d441a:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d441e:	f000 ffd5 	bl	d53cc <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d4422:	4603      	mov	r3, r0
            handler(req);
   d4424:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d4426:	b123      	cbz	r3, d4432 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   d4428:	4a15      	ldr	r2, [pc, #84]	; (d4480 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   d442a:	4293      	cmp	r3, r2
   d442c:	d001      	beq.n	d4432 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   d442e:	4798      	blx	r3
   d4430:	e7ca      	b.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   d4432:	f000 ffc8 	bl	d53c6 <BlynkWidgetRead>
        }
    }
   d4436:	e7c7      	b.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   d4438:	a805      	add	r0, sp, #20
   d443a:	f7ff fe8f 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d443e:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d4440:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d4444:	eba3 0109 	sub.w	r1, r3, r9
   d4448:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d444c:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d444e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   d4452:	910c      	str	r1, [sp, #48]	; 0x30
   d4454:	f000 ffc4 	bl	d53e0 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d4458:	4603      	mov	r3, r0
            handler(req, param);
   d445a:	a90a      	add	r1, sp, #40	; 0x28
   d445c:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d445e:	b123      	cbz	r3, d446a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   d4460:	4a08      	ldr	r2, [pc, #32]	; (d4484 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   d4462:	4293      	cmp	r3, r2
   d4464:	d001      	beq.n	d446a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   d4466:	4798      	blx	r3
   d4468:	e7ae      	b.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   d446a:	f000 ffad 	bl	d53c8 <BlynkWidgetWrite>
    } break;
   d446e:	e7ab      	b.n	d43c8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   d4470:	000d79bf 	.word	0x000d79bf
   d4474:	000d79c2 	.word	0x000d79c2
   d4478:	000d79ca 	.word	0x000d79ca
   d447c:	000d79cd 	.word	0x000d79cd
   d4480:	000d53c7 	.word	0x000d53c7
   d4484:	000d53c9 	.word	0x000d53c9
   d4488:	000d79c6 	.word	0x000d79c6

000d448c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d448c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4490:	b08c      	sub	sp, #48	; 0x30
   d4492:	af04      	add	r7, sp, #16
   d4494:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4496:	2205      	movs	r2, #5
   d4498:	6800      	ldr	r0, [r0, #0]
   d449a:	1d39      	adds	r1, r7, #4
   d449c:	f001 fc04 	bl	d5ca8 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d44a0:	b3b8      	cbz	r0, d4512 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d44a2:	2805      	cmp	r0, #5
   d44a4:	d004      	beq.n	d44b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d44a6:	2000      	movs	r0, #0
}
   d44a8:	3720      	adds	r7, #32
   d44aa:	46bd      	mov	sp, r7
   d44ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d44b0:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d44b4:	0a13      	lsrs	r3, r2, #8
   d44b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d44ba:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d44be:	f8a7 3005 	strh.w	r3, [r7, #5]
   d44c2:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d44c4:	0a13      	lsrs	r3, r2, #8
   d44c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44ca:	fa1f f883 	uxth.w	r8, r3
   d44ce:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d44d2:	2900      	cmp	r1, #0
   d44d4:	d0e7      	beq.n	d44a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d44d6:	793b      	ldrb	r3, [r7, #4]
   d44d8:	bb23      	cbnz	r3, d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d44da:	f000 ff72 	bl	d53c2 <_Z11BlynkMillisv>
   d44de:	4602      	mov	r2, r0
   d44e0:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d44e2:	7f60      	ldrb	r0, [r4, #29]
   d44e4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d44e8:	b9c0      	cbnz	r0, d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d44ea:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d44ee:	2901      	cmp	r1, #1
   d44f0:	d114      	bne.n	d451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d44f2:	2b09      	cmp	r3, #9
   d44f4:	d00f      	beq.n	d4516 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d44f6:	2bc8      	cmp	r3, #200	; 0xc8
   d44f8:	d001      	beq.n	d44fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d44fa:	2b04      	cmp	r3, #4
   d44fc:	d1d4      	bne.n	d44a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d44fe:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d4500:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d4502:	4620      	mov	r0, r4
                state = CONNECTED;
   d4504:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d4506:	f000 fb25 	bl	d4b54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d450a:	f7ff fe11 	bl	d4130 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d450e:	f000 ff5c 	bl	d53ca <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d4512:	2001      	movs	r0, #1
   d4514:	e7c8      	b.n	d44a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d4516:	2303      	movs	r3, #3
   d4518:	7763      	strb	r3, [r4, #29]
                break;
   d451a:	e7c5      	b.n	d44a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d451c:	1f58      	subs	r0, r3, #5
   d451e:	bf18      	it	ne
   d4520:	2001      	movne	r0, #1
   d4522:	e7c1      	b.n	d44a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d4524:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d4528:	d903      	bls.n	d4532 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d452a:	4620      	mov	r0, r4
   d452c:	f7ff fe74 	bl	d4218 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4530:	e7ef      	b.n	d4512 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d4532:	f108 0308 	add.w	r3, r8, #8
   d4536:	f023 0307 	bic.w	r3, r3, #7
   d453a:	466e      	mov	r6, sp
   d453c:	ebad 0d03 	sub.w	sp, sp, r3
   d4540:	ad04      	add	r5, sp, #16
   d4542:	6820      	ldr	r0, [r4, #0]
   d4544:	4642      	mov	r2, r8
   d4546:	4629      	mov	r1, r5
   d4548:	f001 fbae 	bl	d5ca8 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d454c:	4580      	cmp	r8, r0
   d454e:	f04f 0000 	mov.w	r0, #0
   d4552:	d17f      	bne.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d4554:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4558:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d455a:	f000 ff32 	bl	d53c2 <_Z11BlynkMillisv>
    switch (hdr.type)
   d455e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d4560:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d4562:	2b14      	cmp	r3, #20
   d4564:	f000 80a6 	beq.w	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4568:	d848      	bhi.n	d45fc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d456a:	2b0f      	cmp	r3, #15
   d456c:	f000 80a2 	beq.w	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d4570:	d807      	bhi.n	d4582 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d4572:	2b02      	cmp	r3, #2
   d4574:	d048      	beq.n	d4608 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d4576:	2b06      	cmp	r3, #6
   d4578:	d051      	beq.n	d461e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d457a:	4620      	mov	r0, r4
   d457c:	f7ff fe4c 	bl	d4218 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d4580:	e058      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d4582:	2b11      	cmp	r3, #17
   d4584:	d1f9      	bne.n	d457a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d4586:	2300      	movs	r3, #0
   d4588:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d458a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d458e:	442b      	add	r3, r5
        if (it >= param.end())
   d4590:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d4592:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d4596:	d24d      	bcs.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d4598:	f107 000c 	add.w	r0, r7, #12
   d459c:	f8d5 8000 	ldr.w	r8, [r5]
   d45a0:	f7ff fddc 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d45a4:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d45a6:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d45aa:	1b5d      	subs	r5, r3, r5
   d45ac:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d45ae:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d45b2:	687b      	ldr	r3, [r7, #4]
   d45b4:	61fd      	str	r5, [r7, #28]
   d45b6:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d45ba:	8363      	strh	r3, [r4, #26]
   d45bc:	4b64      	ldr	r3, [pc, #400]	; (d4750 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d45be:	4598      	cmp	r8, r3
   d45c0:	f000 80bf 	beq.w	d4742 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d45c4:	f200 808c 	bhi.w	d46e0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d45c8:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d45cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d45d0:	4413      	add	r3, r2
   d45d2:	4598      	cmp	r8, r3
   d45d4:	f000 809d 	beq.w	d4712 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d45d8:	d879      	bhi.n	d46ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d45da:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d45de:	3b06      	subs	r3, #6
   d45e0:	4598      	cmp	r8, r3
   d45e2:	f000 809c 	beq.w	d471e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d45e6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d45ea:	3303      	adds	r3, #3
   d45ec:	4598      	cmp	r8, r3
   d45ee:	d16b      	bne.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d45f0:	f107 0114 	add.w	r1, r7, #20
   d45f4:	4638      	mov	r0, r7
   d45f6:	f000 fee7 	bl	d53c8 <BlynkWidgetWrite>
   d45fa:	e065      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d45fc:	2b29      	cmp	r3, #41	; 0x29
   d45fe:	d01b      	beq.n	d4638 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d4600:	2b37      	cmp	r3, #55	; 0x37
   d4602:	d017      	beq.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4604:	2b1d      	cmp	r3, #29
   d4606:	d1b8      	bne.n	d457a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4608:	7f63      	ldrb	r3, [r4, #29]
   d460a:	b943      	cbnz	r3, d461e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d460c:	2301      	movs	r3, #1
   d460e:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d4610:	4620      	mov	r0, r4
   d4612:	f000 fa9f 	bl	d4b54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4616:	f7ff fd8b 	bl	d4130 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d461a:	f000 fed6 	bl	d53ca <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d461e:	2300      	movs	r3, #0
   d4620:	21c8      	movs	r1, #200	; 0xc8
   d4622:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4626:	9100      	str	r1, [sp, #0]
   d4628:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d462c:	4619      	mov	r1, r3
   d462e:	4620      	mov	r0, r4
   d4630:	f000 f9e2 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d4634:	2001      	movs	r0, #1
   d4636:	e00d      	b.n	d4654 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d4638:	68a3      	ldr	r3, [r4, #8]
   d463a:	b91b      	cbnz	r3, d4644 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d463c:	2040      	movs	r0, #64	; 0x40
   d463e:	f001 f91d 	bl	d587c <malloc>
   d4642:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d4644:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d4648:	44a8      	add	r8, r5
        if (it >= param.end())
   d464a:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d464c:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d4650:	d302      	bcc.n	d4658 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d4652:	2000      	movs	r0, #0
   d4654:	46b5      	mov	sp, r6
   d4656:	e727      	b.n	d44a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d4658:	4629      	mov	r1, r5
   d465a:	2240      	movs	r2, #64	; 0x40
   d465c:	68a0      	ldr	r0, [r4, #8]
   d465e:	f003 f909 	bl	d7874 <strncpy>
        redir_serv[63] = '\0';
   d4662:	68a3      	ldr	r3, [r4, #8]
   d4664:	2500      	movs	r5, #0
   d4666:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d466a:	f107 0014 	add.w	r0, r7, #20
   d466e:	f7ff fd75 	bl	d415c <_ZN10BlynkParam8iteratorppEv>
   d4672:	6803      	ldr	r3, [r0, #0]
   d4674:	4543      	cmp	r3, r8
   d4676:	d21b      	bcs.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4678:	6978      	ldr	r0, [r7, #20]
   d467a:	b120      	cbz	r0, d4686 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d467c:	69bb      	ldr	r3, [r7, #24]
   d467e:	4298      	cmp	r0, r3
   d4680:	d214      	bcs.n	d46ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d4682:	f003 f899 	bl	d77b8 <atol>
            redir_port = it.asLong();
   d4686:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4688:	6820      	ldr	r0, [r4, #0]
   d468a:	f001 ffff 	bl	d668c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d468e:	6823      	ldr	r3, [r4, #0]
   d4690:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d4692:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4694:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4696:	2300      	movs	r3, #0
   d4698:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d469a:	f000 fe92 	bl	d53c2 <_Z11BlynkMillisv>
   d469e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d46a2:	3808      	subs	r0, #8
   d46a4:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d46a8:	6160      	str	r0, [r4, #20]
   d46aa:	e7c3      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d46ac:	4628      	mov	r0, r5
   d46ae:	e7ea      	b.n	d4686 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d46b0:	2550      	movs	r5, #80	; 0x50
   d46b2:	e7e9      	b.n	d4688 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d46b4:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d46b6:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d46ba:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d46be:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d46c0:	4629      	mov	r1, r5
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff fdb2 	bl	d422c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d46c8:	2300      	movs	r3, #0
   d46ca:	8363      	strh	r3, [r4, #26]
   d46cc:	e7b2      	b.n	d4634 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d46ce:	4b21      	ldr	r3, [pc, #132]	; (d4754 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d46d0:	4598      	cmp	r8, r3
   d46d2:	d1f9      	bne.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d46d4:	f107 0114 	add.w	r1, r7, #20
   d46d8:	4638      	mov	r0, r7
   d46da:	f000 fe75 	bl	d53c8 <BlynkWidgetWrite>
   d46de:	e7f3      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d46e0:	4b1d      	ldr	r3, [pc, #116]	; (d4758 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d46e2:	4598      	cmp	r8, r3
   d46e4:	d021      	beq.n	d472a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d46e6:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d46ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d46ee:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d46f2:	4598      	cmp	r8, r3
   d46f4:	d01f      	beq.n	d4736 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d46f6:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d46fa:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d46fe:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d4702:	4598      	cmp	r8, r3
   d4704:	d1e0      	bne.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4706:	f107 0114 	add.w	r1, r7, #20
   d470a:	4638      	mov	r0, r7
   d470c:	f000 fe5c 	bl	d53c8 <BlynkWidgetWrite>
   d4710:	e7da      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d4712:	f107 0114 	add.w	r1, r7, #20
   d4716:	4638      	mov	r0, r7
   d4718:	f000 fe56 	bl	d53c8 <BlynkWidgetWrite>
   d471c:	e7d4      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d471e:	f107 0114 	add.w	r1, r7, #20
   d4722:	4638      	mov	r0, r7
   d4724:	f000 fe50 	bl	d53c8 <BlynkWidgetWrite>
   d4728:	e7ce      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d472a:	f107 0114 	add.w	r1, r7, #20
   d472e:	4638      	mov	r0, r7
   d4730:	f000 fe4a 	bl	d53c8 <BlynkWidgetWrite>
   d4734:	e7c8      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d4736:	f107 0114 	add.w	r1, r7, #20
   d473a:	4638      	mov	r0, r7
   d473c:	f000 fe44 	bl	d53c8 <BlynkWidgetWrite>
   d4740:	e7c2      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d4742:	f107 0114 	add.w	r1, r7, #20
   d4746:	4638      	mov	r0, r7
   d4748:	f000 fe3e 	bl	d53c8 <BlynkWidgetWrite>
   d474c:	e7bc      	b.n	d46c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d474e:	bf00      	nop
   d4750:	00736676 	.word	0x00736676
   d4754:	00676264 	.word	0x00676264
   d4758:	6e6f6361 	.word	0x6e6f6361

000d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4760:	4604      	mov	r4, r0
   d4762:	b08c      	sub	sp, #48	; 0x30
   d4764:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d4766:	f7ff fce3 	bl	d4130 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d476a:	7f63      	ldrb	r3, [r4, #29]
   d476c:	2b02      	cmp	r3, #2
   d476e:	f000 80a8 	beq.w	d48c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d4772:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d4774:	8b62      	ldrh	r2, [r4, #26]
   d4776:	3301      	adds	r3, #1
   d4778:	b2db      	uxtb	r3, r3
   d477a:	7723      	strb	r3, [r4, #28]
   d477c:	b10a      	cbz	r2, d4782 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d477e:	2501      	movs	r5, #1
   d4780:	e016      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d4782:	2b02      	cmp	r3, #2
   d4784:	d8fb      	bhi.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4786:	6820      	ldr	r0, [r4, #0]
   d4788:	f001 fd9e 	bl	d62c8 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d478c:	b1b8      	cbz	r0, d47be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d478e:	b925      	cbnz	r5, d479a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d4790:	6820      	ldr	r0, [r4, #0]
   d4792:	f001 ff21 	bl	d65d8 <_ZN9TCPClient9availableEv>
   d4796:	2800      	cmp	r0, #0
   d4798:	dd11      	ble.n	d47be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d479a:	4620      	mov	r0, r4
   d479c:	f7ff fe76 	bl	d448c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d47a0:	4605      	mov	r5, r0
   d47a2:	2800      	cmp	r0, #0
   d47a4:	d1f4      	bne.n	d4790 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d47a6:	6820      	ldr	r0, [r4, #0]
   d47a8:	f001 ff70 	bl	d668c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d47ac:	f000 fe0d 	bl	d53ca <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d47b0:	7f23      	ldrb	r3, [r4, #28]
   d47b2:	3b01      	subs	r3, #1
   d47b4:	7723      	strb	r3, [r4, #28]
}
   d47b6:	4628      	mov	r0, r5
   d47b8:	b00c      	add	sp, #48	; 0x30
   d47ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d47be:	f000 fe00 	bl	d53c2 <_Z11BlynkMillisv>
   d47c2:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d47c4:	6820      	ldr	r0, [r4, #0]
   d47c6:	f001 fd7f 	bl	d62c8 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d47ca:	7f67      	ldrb	r7, [r4, #29]
   d47cc:	2f01      	cmp	r7, #1
   d47ce:	4605      	mov	r5, r0
   d47d0:	d129      	bne.n	d4826 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d47d2:	b920      	cbnz	r0, d47de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d47d4:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d47d6:	4620      	mov	r0, r4
   d47d8:	f7ff fd1e 	bl	d4218 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47dc:	e7e8      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d47de:	68e3      	ldr	r3, [r4, #12]
   d47e0:	f24f 6218 	movw	r2, #63000	; 0xf618
   d47e4:	1af3      	subs	r3, r6, r3
   d47e6:	4293      	cmp	r3, r2
   d47e8:	d904      	bls.n	d47f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d47ea:	4620      	mov	r0, r4
   d47ec:	f7ff fd14 	bl	d4218 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d47f0:	2500      	movs	r5, #0
   d47f2:	e7dd      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d47f4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d47f8:	4293      	cmp	r3, r2
   d47fa:	d803      	bhi.n	d4804 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d47fc:	6923      	ldr	r3, [r4, #16]
   d47fe:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4800:	4293      	cmp	r3, r2
   d4802:	d9bc      	bls.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4804:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4806:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d480a:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d480c:	4293      	cmp	r3, r2
   d480e:	d9b6      	bls.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d4810:	2300      	movs	r3, #0
   d4812:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4816:	9300      	str	r3, [sp, #0]
   d4818:	461a      	mov	r2, r3
   d481a:	2106      	movs	r1, #6
   d481c:	4620      	mov	r0, r4
   d481e:	f000 f8eb 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d4822:	6166      	str	r6, [r4, #20]
   d4824:	e7ab      	b.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d4826:	2f00      	cmp	r7, #0
   d4828:	d1a9      	bne.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d482a:	6962      	ldr	r2, [r4, #20]
   d482c:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d482e:	b140      	cbz	r0, d4842 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d4830:	f241 7370 	movw	r3, #6000	; 0x1770
   d4834:	429a      	cmp	r2, r3
   d4836:	d9a2      	bls.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d4838:	6820      	ldr	r0, [r4, #0]
   d483a:	f001 ff27 	bl	d668c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d483e:	7767      	strb	r7, [r4, #29]
   d4840:	e7d6      	b.n	d47f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d4842:	f241 3388 	movw	r3, #5000	; 0x1388
   d4846:	429a      	cmp	r2, r3
   d4848:	d999      	bls.n	d477e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d484a:	6820      	ldr	r0, [r4, #0]
   d484c:	f001 ff1e 	bl	d668c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d4850:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d4854:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d4858:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d485c:	f1be 0f00 	cmp.w	lr, #0
   d4860:	d00b      	beq.n	d487a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d4862:	462b      	mov	r3, r5
   d4864:	4642      	mov	r2, r8
   d4866:	4671      	mov	r1, lr
   d4868:	4660      	mov	r0, ip
   d486a:	f001 ff6d 	bl	d6748 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d486e:	1e43      	subs	r3, r0, #1
   d4870:	425d      	negs	r5, r3
   d4872:	415d      	adcs	r5, r3
   d4874:	b98d      	cbnz	r5, d489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d4876:	6166      	str	r6, [r4, #20]
                return false;
   d4878:	e79a      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d487a:	4b13      	ldr	r3, [pc, #76]	; (d48c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d487c:	9306      	str	r3, [sp, #24]
   d487e:	f10c 0720 	add.w	r7, ip, #32
   d4882:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4884:	ad07      	add	r5, sp, #28
   d4886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4888:	683b      	ldr	r3, [r7, #0]
   d488a:	702b      	strb	r3, [r5, #0]
   d488c:	4642      	mov	r2, r8
   d488e:	4673      	mov	r3, lr
   d4890:	a906      	add	r1, sp, #24
   d4892:	4660      	mov	r0, ip
   d4894:	f001 fe25 	bl	d64e2 <_ZN9TCPClient7connectE9IPAddresstm>
   d4898:	e7e9      	b.n	d486e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d489a:	6863      	ldr	r3, [r4, #4]
   d489c:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d489e:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48a0:	4618      	mov	r0, r3
            msgIdOut = 1;
   d48a2:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d48a4:	f002 ffde 	bl	d7864 <strlen>
   d48a8:	2200      	movs	r2, #0
   d48aa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d48ae:	9b05      	ldr	r3, [sp, #20]
   d48b0:	9000      	str	r0, [sp, #0]
   d48b2:	4632      	mov	r2, r6
   d48b4:	211d      	movs	r1, #29
   d48b6:	4620      	mov	r0, r4
   d48b8:	f000 f89e 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d48bc:	6923      	ldr	r3, [r4, #16]
   d48be:	6163      	str	r3, [r4, #20]
            return true;
   d48c0:	e776      	b.n	d47b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d48c2:	2500      	movs	r5, #0
   d48c4:	e777      	b.n	d47b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d48c6:	bf00      	nop
   d48c8:	000d7f2c 	.word	0x000d7f2c

000d48cc <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d48cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d48d0:	4615      	mov	r5, r2
   d48d2:	b08c      	sub	sp, #48	; 0x30
   d48d4:	4604      	mov	r4, r0
   d48d6:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d48d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d48dc:	460f      	mov	r7, r1
   d48de:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d48e0:	f000 fd6d 	bl	d53be <_Z10BlynkDelaym>
   d48e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d48e6:	ae01      	add	r6, sp, #4
   d48e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d48ea:	682b      	ldr	r3, [r5, #0]
   d48ec:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d48ee:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d48f0:	f000 fd67 	bl	d53c2 <_Z11BlynkMillisv>
   d48f4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d48f8:	3808      	subs	r0, #8
   d48fa:	af01      	add	r7, sp, #4
   d48fc:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4900:	6160      	str	r0, [r4, #20]
   d4902:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4904:	ae07      	add	r6, sp, #28
   d4906:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4908:	683b      	ldr	r3, [r7, #0]
   d490a:	7033      	strb	r3, [r6, #0]
   d490c:	af07      	add	r7, sp, #28
   d490e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d4910:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d4912:	f04f 0c00 	mov.w	ip, #0
   d4916:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d491a:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d491e:	3520      	adds	r5, #32
   d4920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4922:	6833      	ldr	r3, [r6, #0]
   d4924:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d4926:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d4928:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d492c:	6820      	ldr	r0, [r4, #0]
   d492e:	f001 fead 	bl	d668c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d4932:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d4934:	f000 fd45 	bl	d53c2 <_Z11BlynkMillisv>
   d4938:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d493a:	7f63      	ldrb	r3, [r4, #29]
   d493c:	2b01      	cmp	r3, #1
   d493e:	d00c      	beq.n	d495a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d4940:	f000 fd3f 	bl	d53c2 <_Z11BlynkMillisv>
   d4944:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d4946:	42b8      	cmp	r0, r7
   d4948:	d804      	bhi.n	d4954 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d494a:	2100      	movs	r1, #0
   d494c:	4620      	mov	r0, r4
   d494e:	f7ff ff05 	bl	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d4952:	e7f2      	b.n	d493a <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d4954:	7f63      	ldrb	r3, [r4, #29]
   d4956:	2b01      	cmp	r3, #1
   d4958:	d1e8      	bne.n	d492c <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d495a:	b00c      	add	sp, #48	; 0x30
   d495c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4960 <setup>:
void setup() {
   d4960:	b510      	push	{r4, lr}
   d4962:	b088      	sub	sp, #32
  Blynk.begin("gs0c3Zq-ovbkpwP1G7paOHK_PHfRjNUs", IPAddress(167, 172, 234, 162), 9090);
   d4964:	23a2      	movs	r3, #162	; 0xa2
   d4966:	9300      	str	r3, [sp, #0]
   d4968:	22ac      	movs	r2, #172	; 0xac
   d496a:	23ea      	movs	r3, #234	; 0xea
   d496c:	21a7      	movs	r1, #167	; 0xa7
   d496e:	a802      	add	r0, sp, #8
   d4970:	f001 faec 	bl	d5f4c <_ZN9IPAddressC1Ehhhh>
   d4974:	f242 3382 	movw	r3, #9090	; 0x2382
   d4978:	aa02      	add	r2, sp, #8
   d497a:	491a      	ldr	r1, [pc, #104]	; (d49e4 <setup+0x84>)
   d497c:	481a      	ldr	r0, [pc, #104]	; (d49e8 <setup+0x88>)
  proximitySensor.begin();
   d497e:	4c1b      	ldr	r4, [pc, #108]	; (d49ec <setup+0x8c>)
  Blynk.begin("gs0c3Zq-ovbkpwP1G7paOHK_PHfRjNUs", IPAddress(167, 172, 234, 162), 9090);
   d4980:	f7ff ffa4 	bl	d48cc <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  pinMode(A1, INPUT); //button
   d4984:	2100      	movs	r1, #0
   d4986:	2012      	movs	r0, #18
   d4988:	f002 f888 	bl	d6a9c <pinMode>
  pinMode(A5, INPUT); //potentiometer
   d498c:	2100      	movs	r1, #0
   d498e:	200e      	movs	r0, #14
   d4990:	f002 f884 	bl	d6a9c <pinMode>
  pinMode(A4, INPUT); //TMP
   d4994:	2100      	movs	r1, #0
   d4996:	200f      	movs	r0, #15
   d4998:	f002 f880 	bl	d6a9c <pinMode>
  pinMode(D3, OUTPUT); //blue
   d499c:	2101      	movs	r1, #1
   d499e:	2003      	movs	r0, #3
   d49a0:	f002 f87c 	bl	d6a9c <pinMode>
  pinMode(D5, OUTPUT); //green
   d49a4:	2101      	movs	r1, #1
   d49a6:	2005      	movs	r0, #5
   d49a8:	f002 f878 	bl	d6a9c <pinMode>
  pinMode(D7, OUTPUT); //red
   d49ac:	2101      	movs	r1, #1
   d49ae:	2007      	movs	r0, #7
   d49b0:	f002 f874 	bl	d6a9c <pinMode>
  Serial.begin(9600);
   d49b4:	f001 fb42 	bl	d603c <_Z16_fetch_usbserialv>
   d49b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49bc:	f001 fb32 	bl	d6024 <_ZN9USBSerial5beginEl>
  proximitySensor.begin();
   d49c0:	f002 f8fe 	bl	d6bc0 <_Z19__fetch_global_Wirev>
   d49c4:	4601      	mov	r1, r0
   d49c6:	4620      	mov	r0, r4
   d49c8:	f000 fbfd 	bl	d51c6 <_ZN8VCNL40405beginER7TwoWire>
  proximitySensor.powerOnAmbient();
   d49cc:	4620      	mov	r0, r4
   d49ce:	f000 fb8d 	bl	d50ec <_ZN8VCNL404014powerOnAmbientEv>
  timer.setInterval(1000, tempDisplay);
   d49d2:	4a07      	ldr	r2, [pc, #28]	; (d49f0 <setup+0x90>)
   d49d4:	4807      	ldr	r0, [pc, #28]	; (d49f4 <setup+0x94>)
   d49d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d49da:	f000 fc78 	bl	d52ce <_ZN10BlynkTimer11setIntervalEmPFvvE>
}
   d49de:	b008      	add	sp, #32
   d49e0:	bd10      	pop	{r4, pc}
   d49e2:	bf00      	nop
   d49e4:	000d79d0 	.word	0x000d79d0
   d49e8:	2003e398 	.word	0x2003e398
   d49ec:	2003e3fc 	.word	0x2003e3fc
   d49f0:	000d4cd1 	.word	0x000d4cd1
   d49f4:	2003e400 	.word	0x2003e400

000d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d49f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49fc:	b083      	sub	sp, #12
   d49fe:	af00      	add	r7, sp, #0
   d4a00:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4a02:	6800      	ldr	r0, [r0, #0]
   d4a04:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4a06:	4688      	mov	r8, r1
   d4a08:	4616      	mov	r6, r2
   d4a0a:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4a0c:	46eb      	mov	fp, sp
   d4a0e:	f001 fc5b 	bl	d62c8 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4a12:	2800      	cmp	r0, #0
   d4a14:	d07f      	beq.n	d4b16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a16:	f1b8 0f1d 	cmp.w	r8, #29
   d4a1a:	d804      	bhi.n	d4a26 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4a1c:	4b4c      	ldr	r3, [pc, #304]	; (d4b50 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4a1e:	fa23 f308 	lsr.w	r3, r3, r8
   d4a22:	07db      	lsls	r3, r3, #31
   d4a24:	d402      	bmi.n	d4a2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4a26:	7f63      	ldrb	r3, [r4, #29]
   d4a28:	2b01      	cmp	r3, #1
   d4a2a:	d174      	bne.n	d4b16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4a2c:	b946      	cbnz	r6, d4a40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4a2e:	8b66      	ldrh	r6, [r4, #26]
   d4a30:	b936      	cbnz	r6, d4a40 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4a32:	8b23      	ldrh	r3, [r4, #24]
   d4a34:	3301      	adds	r3, #1
   d4a36:	b29b      	uxth	r3, r3
   d4a38:	2b00      	cmp	r3, #0
   d4a3a:	d071      	beq.n	d4b20 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4a3c:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4a3e:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4a40:	f1a8 030c 	sub.w	r3, r8, #12
   d4a44:	2b08      	cmp	r3, #8
   d4a46:	d816      	bhi.n	d4a76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a48:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4a4c:	4293      	cmp	r3, r2
   d4a4e:	bf38      	it	cc
   d4a50:	4613      	movcc	r3, r2
   d4a52:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4a56:	f000 fcb4 	bl	d53c2 <_Z11BlynkMillisv>
   d4a5a:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4a5e:	2800      	cmp	r0, #0
   d4a60:	db60      	blt.n	d4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4a62:	2100      	movs	r1, #0
   d4a64:	4620      	mov	r0, r4
   d4a66:	f7ff fe79 	bl	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4a6a:	f000 fcaa 	bl	d53c2 <_Z11BlynkMillisv>
   d4a6e:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4a72:	2800      	cmp	r0, #0
   d4a74:	daf5      	bge.n	d4a62 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a76:	f1b9 0f00 	cmp.w	r9, #0
   d4a7a:	d05a      	beq.n	d4b32 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4a7c:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4a80:	2a00      	cmp	r2, #0
   d4a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4a84:	bf08      	it	eq
   d4a86:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4a88:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4a8c:	f10a 0307 	add.w	r3, sl, #7
   d4a90:	f023 0307 	bic.w	r3, r3, #7
   d4a94:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4a9a:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4a9e:	18ea      	adds	r2, r5, r3
   d4aa0:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4aa4:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4aa6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4aaa:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4aae:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4ab2:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4ab6:	f1b9 0f00 	cmp.w	r9, #0
   d4aba:	d03c      	beq.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4abc:	2d00      	cmp	r5, #0
   d4abe:	d03a      	beq.n	d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4ac0:	462a      	mov	r2, r5
   d4ac2:	4649      	mov	r1, r9
   d4ac4:	f10d 0005 	add.w	r0, sp, #5
   d4ac8:	f002 fe88 	bl	d77dc <memcpy>
        pos += length;
   d4acc:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4ad0:	b13b      	cbz	r3, d4ae2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4ad4:	b12b      	cbz	r3, d4ae2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4ad6:	461a      	mov	r2, r3
   d4ad8:	687b      	ldr	r3, [r7, #4]
   d4ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4adc:	4418      	add	r0, r3
   d4ade:	f002 fe7d 	bl	d77dc <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4ae2:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4ae4:	4555      	cmp	r5, sl
   d4ae6:	d22a      	bcs.n	d4b3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4ae8:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4aec:	687b      	ldr	r3, [r7, #4]
   d4aee:	6820      	ldr	r0, [r4, #0]
   d4af0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4af4:	bf28      	it	cs
   d4af6:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4afa:	1959      	adds	r1, r3, r5
   d4afc:	f001 fbce 	bl	d629c <_ZN9TCPClient5writeEPKhj>
   d4b00:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4b02:	2000      	movs	r0, #0
   d4b04:	f000 fc5b 	bl	d53be <_Z10BlynkDelaym>
        if (w == 0) {
   d4b08:	b9be      	cbnz	r6, d4b3a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4b0a:	6820      	ldr	r0, [r4, #0]
   d4b0c:	f001 fdbe 	bl	d668c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4b10:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4b12:	f000 fc5a 	bl	d53ca <BlynkNoOpCbk>
}
   d4b16:	370c      	adds	r7, #12
   d4b18:	46dd      	mov	sp, fp
   d4b1a:	46bd      	mov	sp, r7
   d4b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4b20:	2301      	movs	r3, #1
   d4b22:	e78b      	b.n	d4a3c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4b24:	7f21      	ldrb	r1, [r4, #28]
   d4b26:	2900      	cmp	r1, #0
   d4b28:	d1a5      	bne.n	d4a76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4b2a:	4620      	mov	r0, r4
   d4b2c:	f7ff fe16 	bl	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b30:	e7a1      	b.n	d4a76 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b32:	2305      	movs	r3, #5
   d4b34:	e7a3      	b.n	d4a7e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4b36:	2005      	movs	r0, #5
   d4b38:	e7c9      	b.n	d4ace <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4b3a:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4b3c:	e7d2      	b.n	d4ae4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4b3e:	d003      	beq.n	d4b48 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4b40:	4620      	mov	r0, r4
   d4b42:	f7ff fb69 	bl	d4218 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4b46:	e7e6      	b.n	d4b16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4b48:	f000 fc3b 	bl	d53c2 <_Z11BlynkMillisv>
   d4b4c:	6120      	str	r0, [r4, #16]
   d4b4e:	e7e2      	b.n	d4b16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4b50:	20000045 	.word	0x20000045

000d4b54 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4b54:	b500      	push	{lr}
   d4b56:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4b58:	ab04      	add	r3, sp, #16
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	2349      	movs	r3, #73	; 0x49
   d4b60:	9300      	str	r3, [sp, #0]
   d4b62:	9202      	str	r2, [sp, #8]
   d4b64:	4b03      	ldr	r3, [pc, #12]	; (d4b74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4b66:	2111      	movs	r1, #17
   d4b68:	f7ff ff46 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4b6c:	b015      	add	sp, #84	; 0x54
   d4b6e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b72:	bf00      	nop
   d4b74:	000d7a65 	.word	0x000d7a65

000d4b78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA42_cEEvRKT_>:
    }

    // Please use Blynk.logEvent("event", "Description")
    template<typename T>
    BLYNK_DEPRECATED
    void notify(const T& msg) {
   d4b78:	b530      	push	{r4, r5, lr}
   d4b7a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4b7e:	ab08      	add	r3, sp, #32
   d4b80:	2400      	movs	r4, #0
   d4b82:	4605      	mov	r5, r0
   d4b84:	9305      	str	r3, [sp, #20]
   d4b86:	a805      	add	r0, sp, #20
   d4b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4b8c:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4b90:	f7ff fa9c 	bl	d40cc <_ZN10BlynkParam3addEPKc.part.0>
        logEvent("notify", msg);
#else
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(msg);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_NOTIFY, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4b94:	9b06      	ldr	r3, [sp, #24]
   d4b96:	3b01      	subs	r3, #1
   d4b98:	9300      	str	r3, [sp, #0]
   d4b9a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4b9e:	9b05      	ldr	r3, [sp, #20]
   d4ba0:	4622      	mov	r2, r4
   d4ba2:	210e      	movs	r1, #14
   d4ba4:	4628      	mov	r0, r5
   d4ba6:	f7ff ff27 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
#endif
    }
   d4baa:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4bae:	bd30      	pop	{r4, r5, pc}

000d4bb0 <_Z12compareLightjj>:
void compareLight(unsigned int oneL, unsigned int twoL){
   d4bb0:	b508      	push	{r3, lr}
  if (oneL <= firstBound && twoL > firstBound){
   d4bb2:	4b0f      	ldr	r3, [pc, #60]	; (d4bf0 <_Z12compareLightjj+0x40>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	4283      	cmp	r3, r0
   d4bb8:	d306      	bcc.n	d4bc8 <_Z12compareLightjj+0x18>
   d4bba:	428b      	cmp	r3, r1
   d4bbc:	d204      	bcs.n	d4bc8 <_Z12compareLightjj+0x18>
    Blynk.notify("The light level has passed the set points");
   d4bbe:	490d      	ldr	r1, [pc, #52]	; (d4bf4 <_Z12compareLightjj+0x44>)
   d4bc0:	480d      	ldr	r0, [pc, #52]	; (d4bf8 <_Z12compareLightjj+0x48>)
   d4bc2:	f7ff ffd9 	bl	d4b78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA42_cEEvRKT_>
}
   d4bc6:	bd08      	pop	{r3, pc}
  else if(oneL <= secondBound && twoL > secondBound){
   d4bc8:	4a0c      	ldr	r2, [pc, #48]	; (d4bfc <_Z12compareLightjj+0x4c>)
   d4bca:	6812      	ldr	r2, [r2, #0]
   d4bcc:	4282      	cmp	r2, r0
   d4bce:	d30a      	bcc.n	d4be6 <_Z12compareLightjj+0x36>
   d4bd0:	428a      	cmp	r2, r1
   d4bd2:	d3f4      	bcc.n	d4bbe <_Z12compareLightjj+0xe>
  else if(oneL >= firstBound && twoL < firstBound){
   d4bd4:	4283      	cmp	r3, r0
   d4bd6:	d801      	bhi.n	d4bdc <_Z12compareLightjj+0x2c>
   d4bd8:	428b      	cmp	r3, r1
   d4bda:	d8f0      	bhi.n	d4bbe <_Z12compareLightjj+0xe>
  else if (oneL >= secondBound && twoL < secondBound){
   d4bdc:	4282      	cmp	r2, r0
   d4bde:	d8f2      	bhi.n	d4bc6 <_Z12compareLightjj+0x16>
   d4be0:	428a      	cmp	r2, r1
   d4be2:	d9f0      	bls.n	d4bc6 <_Z12compareLightjj+0x16>
   d4be4:	e7eb      	b.n	d4bbe <_Z12compareLightjj+0xe>
  else if(oneL >= firstBound && twoL < firstBound){
   d4be6:	4283      	cmp	r3, r0
   d4be8:	d8fa      	bhi.n	d4be0 <_Z12compareLightjj+0x30>
   d4bea:	428b      	cmp	r3, r1
   d4bec:	d8e7      	bhi.n	d4bbe <_Z12compareLightjj+0xe>
   d4bee:	e7f7      	b.n	d4be0 <_Z12compareLightjj+0x30>
   d4bf0:	2003e320 	.word	0x2003e320
   d4bf4:	000d79f1 	.word	0x000d79f1
   d4bf8:	2003e398 	.word	0x2003e398
   d4bfc:	2003e328 	.word	0x2003e328

000d4c00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4c00:	b570      	push	{r4, r5, r6, lr}
   d4c02:	ed2d 8b02 	vpush	{d8}
   d4c06:	eeb0 8a40 	vmov.f32	s16, s0
   d4c0a:	eef0 8a60 	vmov.f32	s17, s1
   d4c0e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4c12:	ab08      	add	r3, sp, #32
   d4c14:	2400      	movs	r4, #0
   d4c16:	4605      	mov	r5, r0
   d4c18:	460e      	mov	r6, r1
   d4c1a:	9305      	str	r3, [sp, #20]
   d4c1c:	a805      	add	r0, sp, #20
   d4c1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4c22:	4913      	ldr	r1, [pc, #76]	; (d4c70 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   d4c24:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4c28:	f7ff fa50 	bl	d40cc <_ZN10BlynkParam3addEPKc.part.0>
        cmd.add(pin);
   d4c2c:	4631      	mov	r1, r6
   d4c2e:	a805      	add	r0, sp, #20
   d4c30:	f7ff faa4 	bl	d417c <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   d4c34:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   d4c38:	9805      	ldr	r0, [sp, #20]
   d4c3a:	4a0e      	ldr	r2, [pc, #56]	; (d4c74 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   d4c3c:	1ac9      	subs	r1, r1, r3
   d4c3e:	ed8d 8b00 	vstr	d8, [sp]
   d4c42:	4418      	add	r0, r3
   d4c44:	f000 fe2a 	bl	d589c <snprintf>
   d4c48:	1c43      	adds	r3, r0, #1
   d4c4a:	9806      	ldr	r0, [sp, #24]
   d4c4c:	4403      	add	r3, r0
   d4c4e:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4c50:	3b01      	subs	r3, #1
   d4c52:	9300      	str	r3, [sp, #0]
   d4c54:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c58:	9b05      	ldr	r3, [sp, #20]
   d4c5a:	4622      	mov	r2, r4
   d4c5c:	2114      	movs	r1, #20
   d4c5e:	4628      	mov	r0, r5
   d4c60:	f7ff feca 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4c64:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   d4c68:	ecbd 8b02 	vpop	{d8}
   d4c6c:	bd70      	pop	{r4, r5, r6, pc}
   d4c6e:	bf00      	nop
   d4c70:	000d7a1b 	.word	0x000d7a1b
   d4c74:	000d7a1e 	.word	0x000d7a1e

000d4c78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiiEEEvDpT_>:
    void syncVirtual(Args... pins) {
   d4c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4c7a:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4c7e:	ab08      	add	r3, sp, #32
   d4c80:	2400      	movs	r4, #0
   d4c82:	4605      	mov	r5, r0
   d4c84:	460f      	mov	r7, r1
   d4c86:	9305      	str	r3, [sp, #20]
   d4c88:	a805      	add	r0, sp, #20
   d4c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4c8e:	490e      	ldr	r1, [pc, #56]	; (d4cc8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiiEEEvDpT_+0x50>)
   d4c90:	4616      	mov	r6, r2
   d4c92:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4c96:	f7ff fa19 	bl	d40cc <_ZN10BlynkParam3addEPKc.part.0>
        add(head);
   d4c9a:	4639      	mov	r1, r7
   d4c9c:	a805      	add	r0, sp, #20
   d4c9e:	f7ff fa6d 	bl	d417c <_ZN10BlynkParam3addEi>
        add(last);
   d4ca2:	4631      	mov	r1, r6
   d4ca4:	a805      	add	r0, sp, #20
   d4ca6:	f7ff fa69 	bl	d417c <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE_SYNC, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4caa:	9b06      	ldr	r3, [sp, #24]
   d4cac:	3b01      	subs	r3, #1
   d4cae:	9300      	str	r3, [sp, #0]
   d4cb0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4cb4:	9b05      	ldr	r3, [sp, #20]
   d4cb6:	4622      	mov	r2, r4
   d4cb8:	2110      	movs	r1, #16
   d4cba:	4628      	mov	r0, r5
   d4cbc:	f7ff fe9c 	bl	d49f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4cc0:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4cc6:	bf00      	nop
   d4cc8:	000d7a24 	.word	0x000d7a24
   d4ccc:	00000000 	.word	0x00000000

000d4cd0 <_Z11tempDisplayv>:
void tempDisplay(){
   d4cd0:	b510      	push	{r4, lr}
  uint64_t reading = analogRead(A4);
   d4cd2:	200f      	movs	r0, #15
void tempDisplay(){
   d4cd4:	ed2d 8b04 	vpush	{d8-d9}
  uint64_t reading = analogRead(A4);
   d4cd8:	f001 ff1d 	bl	d6b16 <analogRead>
  double voltage = (reading * 3.3) / 4095.0;
   d4cdc:	17c1      	asrs	r1, r0, #31
   d4cde:	f002 fa39 	bl	d7154 <__aeabi_ul2d>
   d4ce2:	a335      	add	r3, pc, #212	; (adr r3, d4db8 <_Z11tempDisplayv+0xe8>)
   d4ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ce8:	f002 fa6a 	bl	d71c0 <__aeabi_dmul>
   d4cec:	a334      	add	r3, pc, #208	; (adr r3, d4dc0 <_Z11tempDisplayv+0xf0>)
   d4cee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cf2:	f002 fb8f 	bl	d7414 <__aeabi_ddiv>
  double temperature = (voltage - 0.5) * 100;
   d4cf6:	4b28      	ldr	r3, [pc, #160]	; (d4d98 <_Z11tempDisplayv+0xc8>)
   d4cf8:	2200      	movs	r2, #0
   d4cfa:	f002 f8a9 	bl	d6e50 <__aeabi_dsub>
   d4cfe:	4b27      	ldr	r3, [pc, #156]	; (d4d9c <_Z11tempDisplayv+0xcc>)
   d4d00:	2200      	movs	r2, #0
   d4d02:	f002 fa5d 	bl	d71c0 <__aeabi_dmul>
   d4d06:	ec41 0b18 	vmov	d8, r0, r1
  Serial.print(temperature);
   d4d0a:	f001 f997 	bl	d603c <_Z16_fetch_usbserialv>
   d4d0e:	eeb0 0a48 	vmov.f32	s0, s16
   d4d12:	eef0 0a68 	vmov.f32	s1, s17
   d4d16:	2102      	movs	r1, #2
   d4d18:	f000 ffae 	bl	d5c78 <_ZN5Print5printEdi>
  Serial.print(" C // ");
   d4d1c:	f001 f98e 	bl	d603c <_Z16_fetch_usbserialv>
   d4d20:	491f      	ldr	r1, [pc, #124]	; (d4da0 <_Z11tempDisplayv+0xd0>)
   d4d22:	f000 fea5 	bl	d5a70 <_ZN5Print5printEPKc>
  Serial.print((temperature * 9/5) + 32);
   d4d26:	f001 f989 	bl	d603c <_Z16_fetch_usbserialv>
   d4d2a:	4b1e      	ldr	r3, [pc, #120]	; (d4da4 <_Z11tempDisplayv+0xd4>)
   d4d2c:	4604      	mov	r4, r0
   d4d2e:	2200      	movs	r2, #0
   d4d30:	ec51 0b18 	vmov	r0, r1, d8
   d4d34:	f002 fa44 	bl	d71c0 <__aeabi_dmul>
   d4d38:	4b1b      	ldr	r3, [pc, #108]	; (d4da8 <_Z11tempDisplayv+0xd8>)
   d4d3a:	2200      	movs	r2, #0
   d4d3c:	f002 fb6a 	bl	d7414 <__aeabi_ddiv>
   d4d40:	4b1a      	ldr	r3, [pc, #104]	; (d4dac <_Z11tempDisplayv+0xdc>)
   d4d42:	2200      	movs	r2, #0
   d4d44:	f002 f886 	bl	d6e54 <__adddf3>
   d4d48:	ec41 0b19 	vmov	d9, r0, r1
   d4d4c:	2102      	movs	r1, #2
   d4d4e:	eeb0 0a49 	vmov.f32	s0, s18
   d4d52:	eef0 0a69 	vmov.f32	s1, s19
   d4d56:	4620      	mov	r0, r4
   d4d58:	f000 ff8e 	bl	d5c78 <_ZN5Print5printEdi>
  Serial.println(" F ");
   d4d5c:	f001 f96e 	bl	d603c <_Z16_fetch_usbserialv>
   d4d60:	4913      	ldr	r1, [pc, #76]	; (d4db0 <_Z11tempDisplayv+0xe0>)
   d4d62:	f000 fe98 	bl	d5a96 <_ZN5Print7printlnEPKc>
  Blynk.virtualWrite(V1, temperature);
   d4d66:	eeb0 0a48 	vmov.f32	s0, s16
   d4d6a:	eef0 0a68 	vmov.f32	s1, s17
   d4d6e:	4811      	ldr	r0, [pc, #68]	; (d4db4 <_Z11tempDisplayv+0xe4>)
   d4d70:	2101      	movs	r1, #1
   d4d72:	f7ff ff45 	bl	d4c00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  Blynk.virtualWrite(V2, (temperature * 9/5) + 32);
   d4d76:	eeb0 0a49 	vmov.f32	s0, s18
   d4d7a:	eef0 0a69 	vmov.f32	s1, s19
   d4d7e:	480d      	ldr	r0, [pc, #52]	; (d4db4 <_Z11tempDisplayv+0xe4>)
   d4d80:	2102      	movs	r1, #2
   d4d82:	f7ff ff3d 	bl	d4c00 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  Blynk.syncVirtual(V1, V2);
   d4d86:	480b      	ldr	r0, [pc, #44]	; (d4db4 <_Z11tempDisplayv+0xe4>)
   d4d88:	2202      	movs	r2, #2
   d4d8a:	2101      	movs	r1, #1
   d4d8c:	f7ff ff74 	bl	d4c78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE11syncVirtualIJiiEEEvDpT_>
}
   d4d90:	ecbd 8b04 	vpop	{d8-d9}
   d4d94:	bd10      	pop	{r4, pc}
   d4d96:	bf00      	nop
   d4d98:	3fe00000 	.word	0x3fe00000
   d4d9c:	40590000 	.word	0x40590000
   d4da0:	000d7a27 	.word	0x000d7a27
   d4da4:	40220000 	.word	0x40220000
   d4da8:	40140000 	.word	0x40140000
   d4dac:	40400000 	.word	0x40400000
   d4db0:	000d7a2e 	.word	0x000d7a2e
   d4db4:	2003e398 	.word	0x2003e398
   d4db8:	66666666 	.word	0x66666666
   d4dbc:	400a6666 	.word	0x400a6666
   d4dc0:	00000000 	.word	0x00000000
   d4dc4:	40affe00 	.word	0x40affe00

000d4dc8 <loop>:
void loop() {
   d4dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Blynk.run();
   d4dcc:	2100      	movs	r1, #0
   d4dce:	4844      	ldr	r0, [pc, #272]	; (d4ee0 <loop+0x118>)
   d4dd0:	4e44      	ldr	r6, [pc, #272]	; (d4ee4 <loop+0x11c>)
   d4dd2:	f7ff fcc3 	bl	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
  timer.run();
   d4dd6:	4844      	ldr	r0, [pc, #272]	; (d4ee8 <loop+0x120>)
   d4dd8:	f000 faa6 	bl	d5328 <_ZN10BlynkTimer3runEv>
  unsigned int lightVal = proximitySensor.getAmbient();
   d4ddc:	4843      	ldr	r0, [pc, #268]	; (d4eec <loop+0x124>)
   d4dde:	f000 f909 	bl	d4ff4 <_ZN8VCNL404010getAmbientEv>
   d4de2:	4604      	mov	r4, r0
  if (digitalRead(A1) == HIGH && enableButtons){
   d4de4:	2012      	movs	r0, #18
   d4de6:	f001 fe83 	bl	d6af0 <digitalRead>
   d4dea:	2801      	cmp	r0, #1
   d4dec:	d129      	bne.n	d4e42 <loop+0x7a>
   d4dee:	4b40      	ldr	r3, [pc, #256]	; (d4ef0 <loop+0x128>)
   d4df0:	781a      	ldrb	r2, [r3, #0]
   d4df2:	4698      	mov	r8, r3
   d4df4:	b32a      	cbz	r2, d4e42 <loop+0x7a>
    if (firstBound == -1){
   d4df6:	6833      	ldr	r3, [r6, #0]
   d4df8:	3301      	adds	r3, #1
   d4dfa:	d144      	bne.n	d4e86 <loop+0xbe>
      firstBound = analogRead(A5);
   d4dfc:	200e      	movs	r0, #14
   d4dfe:	f001 fe8a 	bl	d6b16 <analogRead>
   d4e02:	6030      	str	r0, [r6, #0]
      Serial.print("First point set to: ");
   d4e04:	f001 f91a 	bl	d603c <_Z16_fetch_usbserialv>
   d4e08:	493a      	ldr	r1, [pc, #232]	; (d4ef4 <loop+0x12c>)
   d4e0a:	f000 fe31 	bl	d5a70 <_ZN5Print5printEPKc>
      Serial.println(firstBound);
   d4e0e:	f001 f915 	bl	d603c <_Z16_fetch_usbserialv>
   d4e12:	6835      	ldr	r5, [r6, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4e14:	2d00      	cmp	r5, #0
   d4e16:	4607      	mov	r7, r0
   d4e18:	da33      	bge.n	d4e82 <loop+0xba>
            t = print('-');
   d4e1a:	212d      	movs	r1, #45	; 0x2d
   d4e1c:	f000 fe2c 	bl	d5a78 <_ZN5Print5printEc>
            val = -n;
   d4e20:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e22:	220a      	movs	r2, #10
   d4e24:	4638      	mov	r0, r7
   d4e26:	f000 fe40 	bl	d5aaa <_ZN5Print11printNumberEmh>
        n += println();
   d4e2a:	4638      	mov	r0, r7
   d4e2c:	f000 fe27 	bl	d5a7e <_ZN5Print7printlnEv>
      enableButtons = false;
   d4e30:	2300      	movs	r3, #0
      timer.setTimeout(500, enableButtonsF);
   d4e32:	4a31      	ldr	r2, [pc, #196]	; (d4ef8 <loop+0x130>)
   d4e34:	482c      	ldr	r0, [pc, #176]	; (d4ee8 <loop+0x120>)
      enableButtons = false;
   d4e36:	f888 3000 	strb.w	r3, [r8]
      timer.setTimeout(500, enableButtonsF);
   d4e3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   d4e3e:	f000 fa4f 	bl	d52e0 <_ZN10BlynkTimer10setTimeoutEmPFvvE>
  if (normalLights){
   d4e42:	4b2e      	ldr	r3, [pc, #184]	; (d4efc <loop+0x134>)
   d4e44:	781b      	ldrb	r3, [r3, #0]
   d4e46:	b13b      	cbz	r3, d4e58 <loop+0x90>
    if (lightVal < firstBound && normalLights){
   d4e48:	6833      	ldr	r3, [r6, #0]
   d4e4a:	42a3      	cmp	r3, r4
   d4e4c:	d93c      	bls.n	d4ec8 <loop+0x100>
      light(HIGH, LOW, LOW);
   d4e4e:	2200      	movs	r2, #0
   d4e50:	4611      	mov	r1, r2
   d4e52:	2001      	movs	r0, #1
      light(LOW, LOW, HIGH );
   d4e54:	f7ff f9b6 	bl	d41c4 <_Z5lightiii>
  if (lightVal == firstBound || lightVal == secondBound){
   d4e58:	6833      	ldr	r3, [r6, #0]
   d4e5a:	42a3      	cmp	r3, r4
   d4e5c:	d003      	beq.n	d4e66 <loop+0x9e>
   d4e5e:	4b28      	ldr	r3, [pc, #160]	; (d4f00 <loop+0x138>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	42a3      	cmp	r3, r4
   d4e64:	d103      	bne.n	d4e6e <loop+0xa6>
    Blynk.notify("The light level has passed the set points");
   d4e66:	4927      	ldr	r1, [pc, #156]	; (d4f04 <loop+0x13c>)
   d4e68:	481d      	ldr	r0, [pc, #116]	; (d4ee0 <loop+0x118>)
   d4e6a:	f7ff fe85 	bl	d4b78 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE6notifyIA42_cEEvRKT_>
  lightLevelTwo = lightLevelOne;
   d4e6e:	4b26      	ldr	r3, [pc, #152]	; (d4f08 <loop+0x140>)
   d4e70:	4a26      	ldr	r2, [pc, #152]	; (d4f0c <loop+0x144>)
   d4e72:	6819      	ldr	r1, [r3, #0]
   d4e74:	6011      	str	r1, [r2, #0]
  lightLevelOne = lightVal;
   d4e76:	601c      	str	r4, [r3, #0]
  compareLight(lightLevelOne, lightLevelTwo); 
   d4e78:	4620      	mov	r0, r4
}
   d4e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  compareLight(lightLevelOne, lightLevelTwo); 
   d4e7e:	f7ff be97 	b.w	d4bb0 <_Z12compareLightjj>
            val = n;
   d4e82:	4629      	mov	r1, r5
   d4e84:	e7cd      	b.n	d4e22 <loop+0x5a>
    else if (secondBound == -1){
   d4e86:	4d1e      	ldr	r5, [pc, #120]	; (d4f00 <loop+0x138>)
   d4e88:	682b      	ldr	r3, [r5, #0]
   d4e8a:	3301      	adds	r3, #1
   d4e8c:	d1d9      	bne.n	d4e42 <loop+0x7a>
      secondBound = analogRead(A5);
   d4e8e:	200e      	movs	r0, #14
   d4e90:	f001 fe41 	bl	d6b16 <analogRead>
   d4e94:	6028      	str	r0, [r5, #0]
      Serial.print("Second point set to: ");
   d4e96:	f001 f8d1 	bl	d603c <_Z16_fetch_usbserialv>
   d4e9a:	491d      	ldr	r1, [pc, #116]	; (d4f10 <loop+0x148>)
   d4e9c:	f000 fde8 	bl	d5a70 <_ZN5Print5printEPKc>
      Serial.println(secondBound);
   d4ea0:	f001 f8cc 	bl	d603c <_Z16_fetch_usbserialv>
   d4ea4:	682d      	ldr	r5, [r5, #0]
        if (n < 0 && base == 10) {
   d4ea6:	2d00      	cmp	r5, #0
   d4ea8:	4607      	mov	r7, r0
   d4eaa:	da0b      	bge.n	d4ec4 <loop+0xfc>
            t = print('-');
   d4eac:	212d      	movs	r1, #45	; 0x2d
   d4eae:	f000 fde3 	bl	d5a78 <_ZN5Print5printEc>
            val = -n;
   d4eb2:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   d4eb4:	220a      	movs	r2, #10
   d4eb6:	4638      	mov	r0, r7
   d4eb8:	f000 fdf7 	bl	d5aaa <_ZN5Print11printNumberEmh>
        n += println();
   d4ebc:	4638      	mov	r0, r7
   d4ebe:	f000 fdde 	bl	d5a7e <_ZN5Print7printlnEv>
        return n;
   d4ec2:	e7be      	b.n	d4e42 <loop+0x7a>
            val = n;
   d4ec4:	4629      	mov	r1, r5
   d4ec6:	e7f5      	b.n	d4eb4 <loop+0xec>
    else if(lightVal < secondBound && normalLights){
   d4ec8:	4b0d      	ldr	r3, [pc, #52]	; (d4f00 <loop+0x138>)
   d4eca:	681b      	ldr	r3, [r3, #0]
   d4ecc:	42a3      	cmp	r3, r4
      light(LOW, HIGH, LOW);
   d4ece:	bf89      	itett	hi
   d4ed0:	2200      	movhi	r2, #0
      light(LOW, LOW, HIGH );
   d4ed2:	2100      	movls	r1, #0
      light(LOW, HIGH, LOW);
   d4ed4:	2101      	movhi	r1, #1
   d4ed6:	4610      	movhi	r0, r2
      light(LOW, LOW, HIGH );
   d4ed8:	bf9c      	itt	ls
   d4eda:	2201      	movls	r2, #1
   d4edc:	4608      	movls	r0, r1
   d4ede:	e7b9      	b.n	d4e54 <loop+0x8c>
   d4ee0:	2003e398 	.word	0x2003e398
   d4ee4:	2003e320 	.word	0x2003e320
   d4ee8:	2003e400 	.word	0x2003e400
   d4eec:	2003e3fc 	.word	0x2003e3fc
   d4ef0:	2003e31c 	.word	0x2003e31c
   d4ef4:	000d7a32 	.word	0x000d7a32
   d4ef8:	000d40b5 	.word	0x000d40b5
   d4efc:	2003e324 	.word	0x2003e324
   d4f00:	2003e328 	.word	0x2003e328
   d4f04:	000d79f1 	.word	0x000d79f1
   d4f08:	2003e3f4 	.word	0x2003e3f4
   d4f0c:	2003e3f8 	.word	0x2003e3f8
   d4f10:	000d7a47 	.word	0x000d7a47

000d4f14 <_GLOBAL__sub_I_Blynk>:
   d4f14:	b538      	push	{r3, r4, r5, lr}
        : domain(NULL), port(0)
   d4f16:	4d12      	ldr	r5, [pc, #72]	; (d4f60 <_GLOBAL__sub_I_Blynk+0x4c>)
SYSTEM_THREAD(ENABLED);
   d4f18:	2100      	movs	r1, #0
   d4f1a:	2001      	movs	r0, #1
   d4f1c:	f000 fc22 	bl	d5764 <system_thread_set_state>
   d4f20:	4628      	mov	r0, r5
   d4f22:	f001 fbfd 	bl	d6720 <_ZN9TCPClientC1Ev>
   d4f26:	f105 001c 	add.w	r0, r5, #28
   d4f2a:	f000 ffcb 	bl	d5ec4 <_ZN9IPAddressC1Ev>
   d4f2e:	2400      	movs	r4, #0
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4f30:	4a0c      	ldr	r2, [pc, #48]	; (d4f64 <_GLOBAL__sub_I_Blynk+0x50>)
   d4f32:	490d      	ldr	r1, [pc, #52]	; (d4f68 <_GLOBAL__sub_I_Blynk+0x54>)
   d4f34:	636c      	str	r4, [r5, #52]	; 0x34
   d4f36:	4628      	mov	r0, r5
   d4f38:	872c      	strh	r4, [r5, #56]	; 0x38
   d4f3a:	f001 fe69 	bl	d6c10 <__aeabi_atexit>
        , state(CONNECTING)
   d4f3e:	4b0b      	ldr	r3, [pc, #44]	; (d4f6c <_GLOBAL__sub_I_Blynk+0x58>)
VCNL4040 proximitySensor;
   d4f40:	480b      	ldr	r0, [pc, #44]	; (d4f70 <_GLOBAL__sub_I_Blynk+0x5c>)
   d4f42:	619c      	str	r4, [r3, #24]
   d4f44:	e9c3 5400 	strd	r5, r4, [r3]
   d4f48:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4f4c:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4f50:	839c      	strh	r4, [r3, #28]
   d4f52:	f000 f815 	bl	d4f80 <_ZN8VCNL4040C1Ev>
   d4f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
BlynkTimer timer;
   d4f5a:	4806      	ldr	r0, [pc, #24]	; (d4f74 <_GLOBAL__sub_I_Blynk+0x60>)
   d4f5c:	f000 b95e 	b.w	d521c <_ZN10BlynkTimerC1Ev>
   d4f60:	2003e3b8 	.word	0x2003e3b8
   d4f64:	2003e394 	.word	0x2003e394
   d4f68:	000d40fd 	.word	0x000d40fd
   d4f6c:	2003e398 	.word	0x2003e398
   d4f70:	2003e3fc 	.word	0x2003e3fc
   d4f74:	2003e400 	.word	0x2003e400

000d4f78 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4f78:	6803      	ldr	r3, [r0, #0]
   d4f7a:	b2c9      	uxtb	r1, r1
   d4f7c:	689b      	ldr	r3, [r3, #8]
   d4f7e:	4718      	bx	r3

000d4f80 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   d4f80:	4770      	bx	lr

000d4f82 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   d4f82:	b510      	push	{r4, lr}
   d4f84:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   d4f86:	2160      	movs	r1, #96	; 0x60
   d4f88:	6800      	ldr	r0, [r0, #0]
   d4f8a:	f001 f96f 	bl	d626c <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   d4f8e:	6820      	ldr	r0, [r4, #0]
   d4f90:	f001 f974 	bl	d627c <_ZN7TwoWire15endTransmissionEv>
}
   d4f94:	fab0 f080 	clz	r0, r0
   d4f98:	0940      	lsrs	r0, r0, #5
   d4f9a:	bd10      	pop	{r4, pc}

000d4f9c <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   d4f9c:	b538      	push	{r3, r4, r5, lr}
   d4f9e:	4605      	mov	r5, r0
   d4fa0:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4fa2:	6800      	ldr	r0, [r0, #0]
   d4fa4:	2160      	movs	r1, #96	; 0x60
   d4fa6:	f001 f961 	bl	d626c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4faa:	6828      	ldr	r0, [r5, #0]
   d4fac:	6803      	ldr	r3, [r0, #0]
   d4fae:	4621      	mov	r1, r4
   d4fb0:	689b      	ldr	r3, [r3, #8]
   d4fb2:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d4fb4:	6828      	ldr	r0, [r5, #0]
   d4fb6:	2100      	movs	r1, #0
   d4fb8:	f001 f95c 	bl	d6274 <_ZN7TwoWire15endTransmissionEh>
   d4fbc:	b108      	cbz	r0, d4fc2 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   d4fbe:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   d4fc0:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   d4fc2:	6828      	ldr	r0, [r5, #0]
   d4fc4:	2202      	movs	r2, #2
   d4fc6:	2160      	movs	r1, #96	; 0x60
   d4fc8:	f001 f94d 	bl	d6266 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4fcc:	6828      	ldr	r0, [r5, #0]
   d4fce:	6803      	ldr	r3, [r0, #0]
   d4fd0:	691b      	ldr	r3, [r3, #16]
   d4fd2:	4798      	blx	r3
   d4fd4:	2800      	cmp	r0, #0
   d4fd6:	d0f2      	beq.n	d4fbe <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   d4fd8:	6828      	ldr	r0, [r5, #0]
   d4fda:	6803      	ldr	r3, [r0, #0]
   d4fdc:	695b      	ldr	r3, [r3, #20]
   d4fde:	4798      	blx	r3
   d4fe0:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   d4fe2:	6828      	ldr	r0, [r5, #0]
   d4fe4:	6803      	ldr	r3, [r0, #0]
   d4fe6:	695b      	ldr	r3, [r3, #20]
   d4fe8:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d4fea:	b2e4      	uxtb	r4, r4
   d4fec:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d4ff0:	b280      	uxth	r0, r0
   d4ff2:	e7e5      	b.n	d4fc0 <_ZN8VCNL404011readCommandEh+0x24>

000d4ff4 <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   d4ff4:	2109      	movs	r1, #9
   d4ff6:	f7ff bfd1 	b.w	d4f9c <_ZN8VCNL404011readCommandEh>

000d4ffa <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   d4ffa:	210c      	movs	r1, #12
   d4ffc:	f7ff bfce 	b.w	d4f9c <_ZN8VCNL404011readCommandEh>

000d5000 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   d5000:	b570      	push	{r4, r5, r6, lr}
   d5002:	4604      	mov	r4, r0
   d5004:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d5006:	6800      	ldr	r0, [r0, #0]
   d5008:	2160      	movs	r1, #96	; 0x60
{
   d500a:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d500c:	f001 f92e 	bl	d626c <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d5010:	6820      	ldr	r0, [r4, #0]
   d5012:	6803      	ldr	r3, [r0, #0]
   d5014:	4631      	mov	r1, r6
   d5016:	689b      	ldr	r3, [r3, #8]
   d5018:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   d501a:	b2e9      	uxtb	r1, r5
   d501c:	6820      	ldr	r0, [r4, #0]
   d501e:	f7ff ffab 	bl	d4f78 <_ZN7TwoWire5writeEi>
  _i2cPort->write(value >> 8); //MSB
   d5022:	0a29      	lsrs	r1, r5, #8
   d5024:	6820      	ldr	r0, [r4, #0]
   d5026:	f7ff ffa7 	bl	d4f78 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d502a:	6820      	ldr	r0, [r4, #0]
   d502c:	f001 f926 	bl	d627c <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   d5030:	fab0 f080 	clz	r0, r0
   d5034:	0940      	lsrs	r0, r0, #5
   d5036:	bd70      	pop	{r4, r5, r6, pc}

000d5038 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   d5038:	b570      	push	{r4, r5, r6, lr}
   d503a:	4604      	mov	r4, r0
   d503c:	460d      	mov	r5, r1
   d503e:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d5040:	f7ff ffac 	bl	d4f9c <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   d5044:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   d5048:	ea40 0206 	orr.w	r2, r0, r6
   d504c:	4629      	mov	r1, r5
   d504e:	4620      	mov	r0, r4
}
   d5050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5054:	f7ff bfd4 	b.w	d5000 <_ZN8VCNL404012writeCommandEht>

000d5058 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   d5058:	b570      	push	{r4, r5, r6, lr}
   d505a:	4604      	mov	r4, r0
   d505c:	460d      	mov	r5, r1
   d505e:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d5060:	f7ff ff9c 	bl	d4f9c <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   d5064:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   d5066:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   d506a:	4629      	mov	r1, r5
   d506c:	4620      	mov	r0, r4
}
   d506e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d5072:	f7ff bfc5 	b.w	d5000 <_ZN8VCNL404012writeCommandEht>

000d5076 <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   d5076:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   d5078:	f7ff ff90 	bl	d4f9c <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   d507c:	f3c0 2007 	ubfx	r0, r0, #8, #8
   d5080:	bd08      	pop	{r3, pc}

000d5082 <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   d5082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5086:	4604      	mov	r4, r0
   d5088:	f89d 7018 	ldrb.w	r7, [sp, #24]
   d508c:	460d      	mov	r5, r1
   d508e:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   d5090:	4616      	mov	r6, r2
   d5092:	b16a      	cbz	r2, d50b0 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   d5094:	f7ff ff82 	bl	d4f9c <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   d5098:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   d509a:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   d509e:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d50a2:	4629      	mov	r1, r5
   d50a4:	4620      	mov	r0, r4
   d50a6:	b136      	cbz	r6, d50b6 <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   d50a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d50ac:	f7ff bfc4 	b.w	d5038 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   d50b0:	f7ff ffe1 	bl	d5076 <_ZN8VCNL404016readCommandUpperEh>
   d50b4:	e7f1      	b.n	d509a <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   d50b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   d50ba:	f7ff bfcd 	b.w	d5058 <_ZN8VCNL404017writeCommandUpperEhh>

000d50be <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d50be:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   d50c2:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d50c4:	d20e      	bcs.n	d50e4 <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d50c6:	299f      	cmp	r1, #159	; 0x9f
   d50c8:	d80e      	bhi.n	d50e8 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
   d50ca:	294f      	cmp	r1, #79	; 0x4f
  else dutyValue = VCNL4040_PS_DUTY_40;
   d50cc:	bf8c      	ite	hi
   d50ce:	2340      	movhi	r3, #64	; 0x40
   d50d0:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   d50d2:	9300      	str	r3, [sp, #0]
   d50d4:	2201      	movs	r2, #1
   d50d6:	233f      	movs	r3, #63	; 0x3f
   d50d8:	2103      	movs	r1, #3
   d50da:	f7ff ffd2 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d50de:	b003      	add	sp, #12
   d50e0:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d50e4:	23c0      	movs	r3, #192	; 0xc0
   d50e6:	e7f4      	b.n	d50d2 <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d50e8:	2380      	movs	r3, #128	; 0x80
   d50ea:	e7f2      	b.n	d50d2 <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000d50ec <_ZN8VCNL404014powerOnAmbientEv>:
{
   d50ec:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   d50ee:	2100      	movs	r1, #0
   d50f0:	9100      	str	r1, [sp, #0]
   d50f2:	23fe      	movs	r3, #254	; 0xfe
   d50f4:	2201      	movs	r2, #1
   d50f6:	f7ff ffc4 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d50fa:	b003      	add	sp, #12
   d50fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d5100 <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5100:	2907      	cmp	r1, #7
{
   d5102:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5104:	d80f      	bhi.n	d5126 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d5106:	2903      	cmp	r1, #3
   d5108:	d80f      	bhi.n	d512a <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d510a:	d010      	beq.n	d512e <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
   d510c:	2902      	cmp	r1, #2
  else timeValue = VCNL4040_PS_IT_1T;
   d510e:	bf0c      	ite	eq
   d5110:	2304      	moveq	r3, #4
   d5112:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   d5114:	9300      	str	r3, [sp, #0]
   d5116:	2201      	movs	r2, #1
   d5118:	23f1      	movs	r3, #241	; 0xf1
   d511a:	2103      	movs	r1, #3
   d511c:	f7ff ffb1 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5120:	b003      	add	sp, #12
   d5122:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d5126:	230e      	movs	r3, #14
   d5128:	e7f4      	b.n	d5114 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d512a:	230c      	movs	r3, #12
   d512c:	e7f2      	b.n	d5114 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d512e:	2308      	movs	r3, #8
   d5130:	e7f0      	b.n	d5114 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000d5132 <_ZN8VCNL404016powerOnProximityEv>:
{
   d5132:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   d5134:	2300      	movs	r3, #0
   d5136:	9300      	str	r3, [sp, #0]
   d5138:	2201      	movs	r2, #1
   d513a:	23fe      	movs	r3, #254	; 0xfe
   d513c:	2103      	movs	r1, #3
   d513e:	f7ff ffa0 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5142:	b003      	add	sp, #12
   d5144:	f85d fb04 	ldr.w	pc, [sp], #4

000d5148 <_ZN8VCNL404017setProxResolutionEh>:
{
   d5148:	b507      	push	{r0, r1, r2, lr}
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
   d514a:	290f      	cmp	r1, #15
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   d514c:	bf8c      	ite	hi
   d514e:	2308      	movhi	r3, #8
   d5150:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   d5152:	9300      	str	r3, [sp, #0]
   d5154:	2200      	movs	r2, #0
   d5156:	23f7      	movs	r3, #247	; 0xf7
   d5158:	2103      	movs	r1, #3
   d515a:	f7ff ff92 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d515e:	b003      	add	sp, #12
   d5160:	f85d fb04 	ldr.w	pc, [sp], #4

000d5164 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   d5164:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   d5166:	2302      	movs	r3, #2
   d5168:	9300      	str	r3, [sp, #0]
   d516a:	2201      	movs	r2, #1
   d516c:	23ef      	movs	r3, #239	; 0xef
   d516e:	2104      	movs	r1, #4
   d5170:	f7ff ff87 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d5174:	b003      	add	sp, #12
   d5176:	f85d fb04 	ldr.w	pc, [sp], #4

000d517a <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d517a:	29c7      	cmp	r1, #199	; 0xc7
{
   d517c:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d517e:	d816      	bhi.n	d51ae <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d5180:	29b3      	cmp	r1, #179	; 0xb3
   d5182:	d816      	bhi.n	d51b2 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d5184:	299f      	cmp	r1, #159	; 0x9f
   d5186:	d816      	bhi.n	d51b6 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d5188:	298b      	cmp	r1, #139	; 0x8b
   d518a:	d816      	bhi.n	d51ba <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d518c:	2977      	cmp	r1, #119	; 0x77
   d518e:	d816      	bhi.n	d51be <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d5190:	2963      	cmp	r1, #99	; 0x63
   d5192:	d816      	bhi.n	d51c2 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d5194:	294a      	cmp	r1, #74	; 0x4a
   d5196:	bf94      	ite	ls
   d5198:	2100      	movls	r1, #0
   d519a:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   d519c:	9100      	str	r1, [sp, #0]
   d519e:	23f8      	movs	r3, #248	; 0xf8
   d51a0:	2200      	movs	r2, #0
   d51a2:	2104      	movs	r1, #4
   d51a4:	f7ff ff6d 	bl	d5082 <_ZN8VCNL40407bitMaskEhbhh>
}
   d51a8:	b003      	add	sp, #12
   d51aa:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d51ae:	2107      	movs	r1, #7
   d51b0:	e7f4      	b.n	d519c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d51b2:	2106      	movs	r1, #6
   d51b4:	e7f2      	b.n	d519c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d51b6:	2105      	movs	r1, #5
   d51b8:	e7f0      	b.n	d519c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d51ba:	2104      	movs	r1, #4
   d51bc:	e7ee      	b.n	d519c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d51be:	2103      	movs	r1, #3
   d51c0:	e7ec      	b.n	d519c <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d51c2:	2102      	movs	r1, #2
   d51c4:	e7ea      	b.n	d519c <_ZN8VCNL404013setLEDCurrentEh+0x22>

000d51c6 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   d51c6:	b538      	push	{r3, r4, r5, lr}
   d51c8:	4604      	mov	r4, r0
   d51ca:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d51cc:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d51ce:	f001 f81b 	bl	d6208 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   d51d2:	4620      	mov	r0, r4
   d51d4:	f7ff fed5 	bl	d4f82 <_ZN8VCNL404011isConnectedEv>
   d51d8:	4605      	mov	r5, r0
   d51da:	b910      	cbnz	r0, d51e2 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   d51dc:	2500      	movs	r5, #0
}
   d51de:	4628      	mov	r0, r5
   d51e0:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   d51e2:	4620      	mov	r0, r4
   d51e4:	f7ff ff09 	bl	d4ffa <_ZN8VCNL40405getIDEv>
   d51e8:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   d51ec:	d1f6      	bne.n	d51dc <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   d51ee:	4620      	mov	r0, r4
   d51f0:	21c8      	movs	r1, #200	; 0xc8
   d51f2:	f7ff ffc2 	bl	d517a <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   d51f6:	4620      	mov	r0, r4
   d51f8:	2128      	movs	r1, #40	; 0x28
   d51fa:	f7ff ff60 	bl	d50be <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   d51fe:	4620      	mov	r0, r4
   d5200:	2108      	movs	r1, #8
   d5202:	f7ff ff7d 	bl	d5100 <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   d5206:	2110      	movs	r1, #16
   d5208:	4620      	mov	r0, r4
   d520a:	f7ff ff9d 	bl	d5148 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   d520e:	4620      	mov	r0, r4
   d5210:	f7ff ffa8 	bl	d5164 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   d5214:	4620      	mov	r0, r4
   d5216:	f7ff ff8c 	bl	d5132 <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   d521a:	e7e0      	b.n	d51de <_ZN8VCNL40405beginER7TwoWire+0x18>

000d521c <_ZN10BlynkTimerC1Ev>:
//static inline unsigned long elapsed() { return micros(); }
static inline unsigned long elapsed() { return BlynkMillis(); }


SimpleTimer::SimpleTimer()
    : numTimers (-1)
   d521c:	f04f 33ff 	mov.w	r3, #4294967295
   d5220:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
{
}
   d5224:	4770      	bx	lr

000d5226 <_ZN10BlynkTimer4initEv>:

void SimpleTimer::init() {
   d5226:	b570      	push	{r4, r5, r6, lr}
   d5228:	4604      	mov	r4, r0
static inline unsigned long elapsed() { return BlynkMillis(); }
   d522a:	f000 f8ca 	bl	d53c2 <_Z11BlynkMillisv>
   d522e:	2500      	movs	r5, #0
   d5230:	4606      	mov	r6, r0
    unsigned long current_millis = elapsed();

    for (int i = 0; i < MAX_TIMERS; i++) {
        memset(&timer[i], 0, sizeof (timer_t));
   d5232:	1960      	adds	r0, r4, r5
   d5234:	2224      	movs	r2, #36	; 0x24
   d5236:	2100      	movs	r1, #0
   d5238:	f002 fade 	bl	d77f8 <memset>
        timer[i].prev_millis = current_millis;
   d523c:	5166      	str	r6, [r4, r5]
    for (int i = 0; i < MAX_TIMERS; i++) {
   d523e:	3524      	adds	r5, #36	; 0x24
   d5240:	f5b5 7f10 	cmp.w	r5, #576	; 0x240
   d5244:	d1f5      	bne.n	d5232 <_ZN10BlynkTimer4initEv+0xc>
    }

    numTimers = 0;
   d5246:	2300      	movs	r3, #0
   d5248:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
}
   d524c:	bd70      	pop	{r4, r5, r6, pc}

000d524e <_ZN10BlynkTimer17findFirstFreeSlotEv>:

// find the first available slot
// return -1 if none found
int SimpleTimer::findFirstFreeSlot() {
    // all slots are used
    if (numTimers >= MAX_TIMERS) {
   d524e:	f8d0 2240 	ldr.w	r2, [r0, #576]	; 0x240
   d5252:	2a0f      	cmp	r2, #15
int SimpleTimer::findFirstFreeSlot() {
   d5254:	4603      	mov	r3, r0
    if (numTimers >= MAX_TIMERS) {
   d5256:	dc09      	bgt.n	d526c <_ZN10BlynkTimer17findFirstFreeSlotEv+0x1e>
        return -1;
    }

    // return the first slot with no callback (i.e. free)
    for (int i = 0; i < MAX_TIMERS; i++) {
   d5258:	2000      	movs	r0, #0
        if (timer[i].callback == NULL) {
   d525a:	3304      	adds	r3, #4
   d525c:	2224      	movs	r2, #36	; 0x24
   d525e:	fb02 f100 	mul.w	r1, r2, r0
   d5262:	5859      	ldr	r1, [r3, r1]
   d5264:	b121      	cbz	r1, d5270 <_ZN10BlynkTimer17findFirstFreeSlotEv+0x22>
    for (int i = 0; i < MAX_TIMERS; i++) {
   d5266:	3001      	adds	r0, #1
   d5268:	2810      	cmp	r0, #16
   d526a:	d1f8      	bne.n	d525e <_ZN10BlynkTimer17findFirstFreeSlotEv+0x10>
        return -1;
   d526c:	f04f 30ff 	mov.w	r0, #4294967295
        }
    }

    // no free slots found
    return -1;
}
   d5270:	4770      	bx	lr

000d5272 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>:


int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d5272:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5276:	4698      	mov	r8, r3
    int freeTimer;

    if (numTimers < 0) {
   d5278:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d527c:	2b00      	cmp	r3, #0
int SimpleTimer::setupTimer(unsigned long d, void* f, void* p, bool h, unsigned n) {
   d527e:	4604      	mov	r4, r0
   d5280:	4689      	mov	r9, r1
   d5282:	4617      	mov	r7, r2
    if (numTimers < 0) {
   d5284:	da01      	bge.n	d528a <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x18>
        init();
   d5286:	f7ff ffce 	bl	d5226 <_ZN10BlynkTimer4initEv>
    }

    freeTimer = findFirstFreeSlot();
   d528a:	4620      	mov	r0, r4
   d528c:	f7ff ffdf 	bl	d524e <_ZN10BlynkTimer17findFirstFreeSlotEv>
    if (freeTimer < 0) {
   d5290:	1e05      	subs	r5, r0, #0
   d5292:	db19      	blt.n	d52c8 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x56>
        return -1;
    }

    if (f == NULL) {
   d5294:	b1c7      	cbz	r7, d52c8 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x56>
        return -1;
    }

    timer[freeTimer].delay = d;
   d5296:	2624      	movs	r6, #36	; 0x24
   d5298:	436e      	muls	r6, r5
   d529a:	19a0      	adds	r0, r4, r6
    timer[freeTimer].callback = f;
    timer[freeTimer].param = p;
    timer[freeTimer].hasParam = h;
   d529c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   d52a0:	7303      	strb	r3, [r0, #12]
    timer[freeTimer].maxNumRuns = n;
   d52a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d52a4:	6143      	str	r3, [r0, #20]
    timer[freeTimer].enabled = true;
   d52a6:	2301      	movs	r3, #1
   d52a8:	7703      	strb	r3, [r0, #28]
    timer[freeTimer].param = p;
   d52aa:	e9c0 7801 	strd	r7, r8, [r0, #4]
    timer[freeTimer].delay = d;
   d52ae:	f8c0 9010 	str.w	r9, [r0, #16]
static inline unsigned long elapsed() { return BlynkMillis(); }
   d52b2:	f000 f886 	bl	d53c2 <_Z11BlynkMillisv>
    timer[freeTimer].prev_millis = elapsed();
   d52b6:	51a0      	str	r0, [r4, r6]

    numTimers++;
   d52b8:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d52bc:	3301      	adds	r3, #1
   d52be:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240

    return freeTimer;
}
   d52c2:	4628      	mov	r0, r5
   d52c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d52c8:	f04f 35ff 	mov.w	r5, #4294967295
   d52cc:	e7f9      	b.n	d52c2 <_ZN10BlynkTimer10setupTimerEmPvS0_bj+0x50>

000d52ce <_ZN10BlynkTimer11setIntervalEmPFvvE>:

int SimpleTimer::setTimer(unsigned long d, timer_callback_p f, void* p, unsigned n) {
  return setupTimer(d, (void *)f, p, true, n);
}

int SimpleTimer::setInterval(unsigned long d, timer_callback f) {
   d52ce:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_FOREVER);
   d52d0:	2300      	movs	r3, #0
   d52d2:	e9cd 3300 	strd	r3, r3, [sp]
   d52d6:	f7ff ffcc 	bl	d5272 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d52da:	b003      	add	sp, #12
   d52dc:	f85d fb04 	ldr.w	pc, [sp], #4

000d52e0 <_ZN10BlynkTimer10setTimeoutEmPFvvE>:

int SimpleTimer::setInterval(unsigned long d, timer_callback_p f, void* p) {
  return setupTimer(d, (void *)f, p, true, RUN_FOREVER);
}

int SimpleTimer::setTimeout(unsigned long d, timer_callback f) {
   d52e0:	b507      	push	{r0, r1, r2, lr}
    return setupTimer(d, (void *)f, NULL, false, RUN_ONCE);
   d52e2:	2300      	movs	r3, #0
   d52e4:	f04f 0c01 	mov.w	ip, #1
   d52e8:	e9cd 3c00 	strd	r3, ip, [sp]
   d52ec:	f7ff ffc1 	bl	d5272 <_ZN10BlynkTimer10setupTimerEmPvS0_bj>
}
   d52f0:	b003      	add	sp, #12
   d52f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d52f6 <_ZN10BlynkTimer11deleteTimerEj>:
    // false return for non-used numTimer, no callback
    return false;
}

void SimpleTimer::deleteTimer(unsigned timerId) {
    if (timerId >= MAX_TIMERS) {
   d52f6:	290f      	cmp	r1, #15
void SimpleTimer::deleteTimer(unsigned timerId) {
   d52f8:	b538      	push	{r3, r4, r5, lr}
   d52fa:	4604      	mov	r4, r0
    if (timerId >= MAX_TIMERS) {
   d52fc:	d813      	bhi.n	d5326 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // nothing to delete if no timers are in use
    if (numTimers == 0) {
   d52fe:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
   d5302:	b183      	cbz	r3, d5326 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        return;
    }

    // don't decrease the number of timers if the
    // specified slot is already empty
    if (timer[timerId].callback != NULL) {
   d5304:	2224      	movs	r2, #36	; 0x24
   d5306:	fb02 f501 	mul.w	r5, r2, r1
   d530a:	4428      	add	r0, r5
   d530c:	6843      	ldr	r3, [r0, #4]
   d530e:	b153      	cbz	r3, d5326 <_ZN10BlynkTimer11deleteTimerEj+0x30>
        memset(&timer[timerId], 0, sizeof (timer_t));
   d5310:	2100      	movs	r1, #0
   d5312:	f002 fa71 	bl	d77f8 <memset>
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5316:	f000 f854 	bl	d53c2 <_Z11BlynkMillisv>
        timer[timerId].prev_millis = elapsed();
   d531a:	5160      	str	r0, [r4, r5]

        // update number of timers
        numTimers--;
   d531c:	f8d4 3240 	ldr.w	r3, [r4, #576]	; 0x240
   d5320:	3b01      	subs	r3, #1
   d5322:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
    }
}
   d5326:	bd38      	pop	{r3, r4, r5, pc}

000d5328 <_ZN10BlynkTimer3runEv>:
void SimpleTimer::run() {
   d5328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d532c:	4605      	mov	r5, r0
   d532e:	462c      	mov	r4, r5
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5330:	f000 f847 	bl	d53c2 <_Z11BlynkMillisv>
    for (i = 0; i < MAX_TIMERS; i++) {
   d5334:	f505 7610 	add.w	r6, r5, #576	; 0x240
static inline unsigned long elapsed() { return BlynkMillis(); }
   d5338:	462b      	mov	r3, r5
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d533a:	2700      	movs	r7, #0
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d533c:	2101      	movs	r1, #1
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d533e:	f04f 0c02 	mov.w	ip, #2
        if (timer[i].callback != NULL) {
   d5342:	685a      	ldr	r2, [r3, #4]
        timer[i].toBeCalled = DEFCALL_DONTRUN;
   d5344:	621f      	str	r7, [r3, #32]
        if (timer[i].callback != NULL) {
   d5346:	b1a2      	cbz	r2, d5372 <_ZN10BlynkTimer3runEv+0x4a>
            if ((current_millis - timer[i].prev_millis) >= timer[i].delay) {
   d5348:	f8d3 8000 	ldr.w	r8, [r3]
   d534c:	f8d3 e010 	ldr.w	lr, [r3, #16]
   d5350:	eba0 0208 	sub.w	r2, r0, r8
   d5354:	4572      	cmp	r2, lr
   d5356:	d30c      	bcc.n	d5372 <_ZN10BlynkTimer3runEv+0x4a>
                unsigned long skipTimes = (current_millis - timer[i].prev_millis) / timer[i].delay;
   d5358:	fbb2 f2fe 	udiv	r2, r2, lr
                timer[i].prev_millis += timer[i].delay * skipTimes;
   d535c:	fb0e 8202 	mla	r2, lr, r2, r8
   d5360:	601a      	str	r2, [r3, #0]
                if (timer[i].enabled) {
   d5362:	7f1a      	ldrb	r2, [r3, #28]
   d5364:	b12a      	cbz	r2, d5372 <_ZN10BlynkTimer3runEv+0x4a>
                    if (timer[i].maxNumRuns == RUN_FOREVER) {
   d5366:	f8d3 e014 	ldr.w	lr, [r3, #20]
   d536a:	f1be 0f00 	cmp.w	lr, #0
   d536e:	d119      	bne.n	d53a4 <_ZN10BlynkTimer3runEv+0x7c>
                        timer[i].toBeCalled = DEFCALL_RUNONLY;
   d5370:	6219      	str	r1, [r3, #32]
    for (i = 0; i < MAX_TIMERS; i++) {
   d5372:	3324      	adds	r3, #36	; 0x24
   d5374:	42b3      	cmp	r3, r6
   d5376:	d1e4      	bne.n	d5342 <_ZN10BlynkTimer3runEv+0x1a>
    for (i = 0; i < MAX_TIMERS; i++) {
   d5378:	2600      	movs	r6, #0
        if (timer[i].toBeCalled == DEFCALL_DONTRUN)
   d537a:	6a23      	ldr	r3, [r4, #32]
   d537c:	b15b      	cbz	r3, d5396 <_ZN10BlynkTimer3runEv+0x6e>
        if (timer[i].hasParam)
   d537e:	7b22      	ldrb	r2, [r4, #12]
   d5380:	6863      	ldr	r3, [r4, #4]
   d5382:	b1d2      	cbz	r2, d53ba <_ZN10BlynkTimer3runEv+0x92>
            (*(timer_callback_p)timer[i].callback)(timer[i].param);
   d5384:	68a0      	ldr	r0, [r4, #8]
   d5386:	4798      	blx	r3
        if (timer[i].toBeCalled == DEFCALL_RUNANDDEL)
   d5388:	6a23      	ldr	r3, [r4, #32]
   d538a:	2b02      	cmp	r3, #2
   d538c:	d103      	bne.n	d5396 <_ZN10BlynkTimer3runEv+0x6e>
            deleteTimer(i);
   d538e:	4631      	mov	r1, r6
   d5390:	4628      	mov	r0, r5
   d5392:	f7ff ffb0 	bl	d52f6 <_ZN10BlynkTimer11deleteTimerEj>
    for (i = 0; i < MAX_TIMERS; i++) {
   d5396:	3601      	adds	r6, #1
   d5398:	2e10      	cmp	r6, #16
   d539a:	f104 0424 	add.w	r4, r4, #36	; 0x24
   d539e:	d1ec      	bne.n	d537a <_ZN10BlynkTimer3runEv+0x52>
}
   d53a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    else if (timer[i].numRuns < timer[i].maxNumRuns) {
   d53a4:	699a      	ldr	r2, [r3, #24]
   d53a6:	4596      	cmp	lr, r2
   d53a8:	d9e3      	bls.n	d5372 <_ZN10BlynkTimer3runEv+0x4a>
                        timer[i].numRuns++;
   d53aa:	3201      	adds	r2, #1
                        if (timer[i].numRuns >= timer[i].maxNumRuns) {
   d53ac:	4596      	cmp	lr, r2
                        timer[i].numRuns++;
   d53ae:	619a      	str	r2, [r3, #24]
                            timer[i].toBeCalled = DEFCALL_RUNANDDEL;
   d53b0:	bf8c      	ite	hi
   d53b2:	460a      	movhi	r2, r1
   d53b4:	4662      	movls	r2, ip
   d53b6:	621a      	str	r2, [r3, #32]
   d53b8:	e7db      	b.n	d5372 <_ZN10BlynkTimer3runEv+0x4a>
            (*(timer_callback)timer[i].callback)();
   d53ba:	4798      	blx	r3
   d53bc:	e7e4      	b.n	d5388 <_ZN10BlynkTimer3runEv+0x60>

000d53be <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d53be:	f000 bc9d 	b.w	d5cfc <delay>

000d53c2 <_Z11BlynkMillisv>:

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d53c2:	f000 b877 	b.w	d54b4 <HAL_Timer_Get_Milli_Seconds>

000d53c6 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d53c6:	4770      	bx	lr

000d53c8 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d53c8:	4770      	bx	lr

000d53ca <BlynkNoOpCbk>:
{}
   d53ca:	4770      	bx	lr

000d53cc <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d53cc:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d53ce:	bf5a      	itte	pl
   d53d0:	4b02      	ldrpl	r3, [pc, #8]	; (d53dc <GetReadHandler+0x10>)
   d53d2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d53d6:	2000      	movmi	r0, #0
#endif
}
   d53d8:	4770      	bx	lr
   d53da:	bf00      	nop
   d53dc:	000d7ab0 	.word	0x000d7ab0

000d53e0 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d53e0:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d53e2:	bf5a      	itte	pl
   d53e4:	4b02      	ldrpl	r3, [pc, #8]	; (d53f0 <GetWriteHandler+0x10>)
   d53e6:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d53ea:	2000      	movmi	r0, #0
#endif
}
   d53ec:	4770      	bx	lr
   d53ee:	bf00      	nop
   d53f0:	000d7cb0 	.word	0x000d7cb0

000d53f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <netdb_freeaddrinfo+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	689b      	ldr	r3, [r3, #8]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030268 	.word	0x00030268

000d5404 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <netdb_getaddrinfo+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	68db      	ldr	r3, [r3, #12]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030268 	.word	0x00030268

000d5414 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <HAL_Validate_Pin_Function+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	685b      	ldr	r3, [r3, #4]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	0003022c 	.word	0x0003022c

000d5424 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <HAL_Pin_Mode+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	689b      	ldr	r3, [r3, #8]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	0003022c 	.word	0x0003022c

000d5434 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <HAL_Get_Pin_Mode+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	68db      	ldr	r3, [r3, #12]
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	0003022c 	.word	0x0003022c

000d5444 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <HAL_GPIO_Write+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	691b      	ldr	r3, [r3, #16]
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	0003022c 	.word	0x0003022c

000d5454 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <HAL_GPIO_Read+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	695b      	ldr	r3, [r3, #20]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	0003022c 	.word	0x0003022c

000d5464 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <HAL_DAC_Write+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	0003022c 	.word	0x0003022c

000d5474 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <hal_adc_read+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	0003022c 	.word	0x0003022c

000d5484 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <hal_pwm_write_ext+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	0003022c 	.word	0x0003022c

000d5494 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <if_index_to_name+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	695b      	ldr	r3, [r3, #20]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003026c 	.word	0x0003026c

000d54a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_RNG_GetRandomNumber+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	685b      	ldr	r3, [r3, #4]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030218 	.word	0x00030218

000d54b4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	695b      	ldr	r3, [r3, #20]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030218 	.word	0x00030218

000d54c4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <os_mutex_recursive_create+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030248 	.word	0x00030248

000d54d4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <os_mutex_recursive_destroy+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030248 	.word	0x00030248

000d54e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <inet_inet_ntop+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	695b      	ldr	r3, [r3, #20]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030264 	.word	0x00030264

000d54f4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <inet_htonl+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	6a1b      	ldr	r3, [r3, #32]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030264 	.word	0x00030264

000d5504 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <inet_htons+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030264 	.word	0x00030264

000d5514 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <hal_usart_init+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	681b      	ldr	r3, [r3, #0]
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	0003023c 	.word	0x0003023c

000d5524 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <hal_usart_write+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	68db      	ldr	r3, [r3, #12]
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	0003023c 	.word	0x0003023c

000d5534 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b02      	ldr	r3, [pc, #8]	; (d5540 <hal_usart_available+0xc>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	691b      	ldr	r3, [r3, #16]
   d553c:	9301      	str	r3, [sp, #4]
   d553e:	bd08      	pop	{r3, pc}
   d5540:	0003023c 	.word	0x0003023c

000d5544 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5544:	b508      	push	{r3, lr}
   d5546:	4b02      	ldr	r3, [pc, #8]	; (d5550 <hal_usart_read+0xc>)
   d5548:	681b      	ldr	r3, [r3, #0]
   d554a:	695b      	ldr	r3, [r3, #20]
   d554c:	9301      	str	r3, [sp, #4]
   d554e:	bd08      	pop	{r3, pc}
   d5550:	0003023c 	.word	0x0003023c

000d5554 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5554:	b508      	push	{r3, lr}
   d5556:	4b02      	ldr	r3, [pc, #8]	; (d5560 <hal_usart_peek+0xc>)
   d5558:	681b      	ldr	r3, [r3, #0]
   d555a:	699b      	ldr	r3, [r3, #24]
   d555c:	9301      	str	r3, [sp, #4]
   d555e:	bd08      	pop	{r3, pc}
   d5560:	0003023c 	.word	0x0003023c

000d5564 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5564:	b508      	push	{r3, lr}
   d5566:	4b02      	ldr	r3, [pc, #8]	; (d5570 <hal_usart_flush+0xc>)
   d5568:	681b      	ldr	r3, [r3, #0]
   d556a:	69db      	ldr	r3, [r3, #28]
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	bd08      	pop	{r3, pc}
   d5570:	0003023c 	.word	0x0003023c

000d5574 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5574:	b508      	push	{r3, lr}
   d5576:	4b02      	ldr	r3, [pc, #8]	; (d5580 <hal_usart_is_enabled+0xc>)
   d5578:	681b      	ldr	r3, [r3, #0]
   d557a:	6a1b      	ldr	r3, [r3, #32]
   d557c:	9301      	str	r3, [sp, #4]
   d557e:	bd08      	pop	{r3, pc}
   d5580:	0003023c 	.word	0x0003023c

000d5584 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b02      	ldr	r3, [pc, #8]	; (d5590 <hal_usart_available_data_for_write+0xc>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d558c:	9301      	str	r3, [sp, #4]
   d558e:	bd08      	pop	{r3, pc}
   d5590:	0003023c 	.word	0x0003023c

000d5594 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5594:	b508      	push	{r3, lr}
   d5596:	4b02      	ldr	r3, [pc, #8]	; (d55a0 <hal_i2c_begin+0xc>)
   d5598:	681b      	ldr	r3, [r3, #0]
   d559a:	68db      	ldr	r3, [r3, #12]
   d559c:	9301      	str	r3, [sp, #4]
   d559e:	bd08      	pop	{r3, pc}
   d55a0:	00030228 	.word	0x00030228

000d55a4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d55a4:	b508      	push	{r3, lr}
   d55a6:	4b02      	ldr	r3, [pc, #8]	; (d55b0 <hal_i2c_begin_transmission+0xc>)
   d55a8:	681b      	ldr	r3, [r3, #0]
   d55aa:	699b      	ldr	r3, [r3, #24]
   d55ac:	9301      	str	r3, [sp, #4]
   d55ae:	bd08      	pop	{r3, pc}
   d55b0:	00030228 	.word	0x00030228

000d55b4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d55b4:	b508      	push	{r3, lr}
   d55b6:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <hal_i2c_end_transmission+0xc>)
   d55b8:	681b      	ldr	r3, [r3, #0]
   d55ba:	69db      	ldr	r3, [r3, #28]
   d55bc:	9301      	str	r3, [sp, #4]
   d55be:	bd08      	pop	{r3, pc}
   d55c0:	00030228 	.word	0x00030228

000d55c4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d55c4:	b508      	push	{r3, lr}
   d55c6:	4b02      	ldr	r3, [pc, #8]	; (d55d0 <hal_i2c_write+0xc>)
   d55c8:	681b      	ldr	r3, [r3, #0]
   d55ca:	6a1b      	ldr	r3, [r3, #32]
   d55cc:	9301      	str	r3, [sp, #4]
   d55ce:	bd08      	pop	{r3, pc}
   d55d0:	00030228 	.word	0x00030228

000d55d4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d55d4:	b508      	push	{r3, lr}
   d55d6:	4b02      	ldr	r3, [pc, #8]	; (d55e0 <hal_i2c_available+0xc>)
   d55d8:	681b      	ldr	r3, [r3, #0]
   d55da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d55dc:	9301      	str	r3, [sp, #4]
   d55de:	bd08      	pop	{r3, pc}
   d55e0:	00030228 	.word	0x00030228

000d55e4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d55e4:	b508      	push	{r3, lr}
   d55e6:	4b02      	ldr	r3, [pc, #8]	; (d55f0 <hal_i2c_read+0xc>)
   d55e8:	681b      	ldr	r3, [r3, #0]
   d55ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55ec:	9301      	str	r3, [sp, #4]
   d55ee:	bd08      	pop	{r3, pc}
   d55f0:	00030228 	.word	0x00030228

000d55f4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d55f4:	b508      	push	{r3, lr}
   d55f6:	4b02      	ldr	r3, [pc, #8]	; (d5600 <hal_i2c_peek+0xc>)
   d55f8:	681b      	ldr	r3, [r3, #0]
   d55fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55fc:	9301      	str	r3, [sp, #4]
   d55fe:	bd08      	pop	{r3, pc}
   d5600:	00030228 	.word	0x00030228

000d5604 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5604:	b508      	push	{r3, lr}
   d5606:	4b02      	ldr	r3, [pc, #8]	; (d5610 <hal_i2c_flush+0xc>)
   d5608:	681b      	ldr	r3, [r3, #0]
   d560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d560c:	9301      	str	r3, [sp, #4]
   d560e:	bd08      	pop	{r3, pc}
   d5610:	00030228 	.word	0x00030228

000d5614 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5614:	b508      	push	{r3, lr}
   d5616:	4b02      	ldr	r3, [pc, #8]	; (d5620 <hal_i2c_is_enabled+0xc>)
   d5618:	681b      	ldr	r3, [r3, #0]
   d561a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d561c:	9301      	str	r3, [sp, #4]
   d561e:	bd08      	pop	{r3, pc}
   d5620:	00030228 	.word	0x00030228

000d5624 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b02      	ldr	r3, [pc, #8]	; (d5630 <hal_i2c_init+0xc>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d562c:	9301      	str	r3, [sp, #4]
   d562e:	bd08      	pop	{r3, pc}
   d5630:	00030228 	.word	0x00030228

000d5634 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5634:	b508      	push	{r3, lr}
   d5636:	4b02      	ldr	r3, [pc, #8]	; (d5640 <hal_i2c_request_ex+0xc>)
   d5638:	681b      	ldr	r3, [r3, #0]
   d563a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d563c:	9301      	str	r3, [sp, #4]
   d563e:	bd08      	pop	{r3, pc}
   d5640:	00030228 	.word	0x00030228

000d5644 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5644:	b508      	push	{r3, lr}
   d5646:	4b02      	ldr	r3, [pc, #8]	; (d5650 <sock_setsockopt+0xc>)
   d5648:	681b      	ldr	r3, [r3, #0]
   d564a:	699b      	ldr	r3, [r3, #24]
   d564c:	9301      	str	r3, [sp, #4]
   d564e:	bd08      	pop	{r3, pc}
   d5650:	00030238 	.word	0x00030238

000d5654 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5654:	b508      	push	{r3, lr}
   d5656:	4b02      	ldr	r3, [pc, #8]	; (d5660 <sock_close+0xc>)
   d5658:	681b      	ldr	r3, [r3, #0]
   d565a:	69db      	ldr	r3, [r3, #28]
   d565c:	9301      	str	r3, [sp, #4]
   d565e:	bd08      	pop	{r3, pc}
   d5660:	00030238 	.word	0x00030238

000d5664 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5664:	b508      	push	{r3, lr}
   d5666:	4b02      	ldr	r3, [pc, #8]	; (d5670 <sock_connect+0xc>)
   d5668:	681b      	ldr	r3, [r3, #0]
   d566a:	6a1b      	ldr	r3, [r3, #32]
   d566c:	9301      	str	r3, [sp, #4]
   d566e:	bd08      	pop	{r3, pc}
   d5670:	00030238 	.word	0x00030238

000d5674 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b02      	ldr	r3, [pc, #8]	; (d5680 <sock_recv+0xc>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d567c:	9301      	str	r3, [sp, #4]
   d567e:	bd08      	pop	{r3, pc}
   d5680:	00030238 	.word	0x00030238

000d5684 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5684:	b508      	push	{r3, lr}
   d5686:	4b02      	ldr	r3, [pc, #8]	; (d5690 <sock_send+0xc>)
   d5688:	681b      	ldr	r3, [r3, #0]
   d568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d568c:	9301      	str	r3, [sp, #4]
   d568e:	bd08      	pop	{r3, pc}
   d5690:	00030238 	.word	0x00030238

000d5694 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5694:	b508      	push	{r3, lr}
   d5696:	4b02      	ldr	r3, [pc, #8]	; (d56a0 <sock_socket+0xc>)
   d5698:	681b      	ldr	r3, [r3, #0]
   d569a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d569c:	9301      	str	r3, [sp, #4]
   d569e:	bd08      	pop	{r3, pc}
   d56a0:	00030238 	.word	0x00030238

000d56a4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d56a4:	b508      	push	{r3, lr}
   d56a6:	4b02      	ldr	r3, [pc, #8]	; (d56b0 <hal_spi_init+0xc>)
   d56a8:	681b      	ldr	r3, [r3, #0]
   d56aa:	69db      	ldr	r3, [r3, #28]
   d56ac:	9301      	str	r3, [sp, #4]
   d56ae:	bd08      	pop	{r3, pc}
   d56b0:	00030230 	.word	0x00030230

000d56b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d56b4:	b508      	push	{r3, lr}
   d56b6:	4b02      	ldr	r3, [pc, #8]	; (d56c0 <hal_spi_is_enabled+0xc>)
   d56b8:	681b      	ldr	r3, [r3, #0]
   d56ba:	6a1b      	ldr	r3, [r3, #32]
   d56bc:	9301      	str	r3, [sp, #4]
   d56be:	bd08      	pop	{r3, pc}
   d56c0:	00030230 	.word	0x00030230

000d56c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d56c4:	b508      	push	{r3, lr}
   d56c6:	4b02      	ldr	r3, [pc, #8]	; (d56d0 <HAL_USB_USART_Init+0xc>)
   d56c8:	681b      	ldr	r3, [r3, #0]
   d56ca:	681b      	ldr	r3, [r3, #0]
   d56cc:	9301      	str	r3, [sp, #4]
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	0003024c 	.word	0x0003024c

000d56d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d56d4:	b508      	push	{r3, lr}
   d56d6:	4b02      	ldr	r3, [pc, #8]	; (d56e0 <HAL_USB_USART_Begin+0xc>)
   d56d8:	681b      	ldr	r3, [r3, #0]
   d56da:	685b      	ldr	r3, [r3, #4]
   d56dc:	9301      	str	r3, [sp, #4]
   d56de:	bd08      	pop	{r3, pc}
   d56e0:	0003024c 	.word	0x0003024c

000d56e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <HAL_USB_USART_Available_Data+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	691b      	ldr	r3, [r3, #16]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	0003024c 	.word	0x0003024c

000d56f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	695b      	ldr	r3, [r3, #20]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	0003024c 	.word	0x0003024c

000d5704 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <HAL_USB_USART_Receive_Data+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	699b      	ldr	r3, [r3, #24]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	0003024c 	.word	0x0003024c

000d5714 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <HAL_USB_USART_Send_Data+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	69db      	ldr	r3, [r3, #28]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	0003024c 	.word	0x0003024c

000d5724 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <HAL_USB_USART_Flush_Data+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	6a1b      	ldr	r3, [r3, #32]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	0003024c 	.word	0x0003024c

000d5734 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <log_message+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030260 	.word	0x00030260

000d5744 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <set_system_mode+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	685b      	ldr	r3, [r3, #4]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030220 	.word	0x00030220

000d5754 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <system_delay_ms+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	695b      	ldr	r3, [r3, #20]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030220 	.word	0x00030220

000d5764 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <system_thread_set_state+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030220 	.word	0x00030220

000d5774 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b03      	ldr	r3, [pc, #12]	; (d5784 <system_ctrl_set_app_request_handler+0x10>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d577e:	9301      	str	r3, [sp, #4]
   d5780:	bd08      	pop	{r3, pc}
   d5782:	0000      	.short	0x0000
   d5784:	00030220 	.word	0x00030220

000d5788 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b03      	ldr	r3, [pc, #12]	; (d5798 <system_ctrl_set_result+0x10>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5792:	9301      	str	r3, [sp, #4]
   d5794:	bd08      	pop	{r3, pc}
   d5796:	0000      	.short	0x0000
   d5798:	00030220 	.word	0x00030220

000d579c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <network_connect+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	685b      	ldr	r3, [r3, #4]
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	00030240 	.word	0x00030240

000d57ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <network_connecting+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	689b      	ldr	r3, [r3, #8]
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	00030240 	.word	0x00030240

000d57bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <network_disconnect+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	68db      	ldr	r3, [r3, #12]
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	00030240 	.word	0x00030240

000d57cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <network_ready+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	691b      	ldr	r3, [r3, #16]
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	00030240 	.word	0x00030240

000d57dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <network_on+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	695b      	ldr	r3, [r3, #20]
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	00030240 	.word	0x00030240

000d57ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <network_off+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	699b      	ldr	r3, [r3, #24]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	00030240 	.word	0x00030240

000d57fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <network_listen+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	69db      	ldr	r3, [r3, #28]
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	00030240 	.word	0x00030240

000d580c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <network_listening+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	6a1b      	ldr	r3, [r3, #32]
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030240 	.word	0x00030240

000d581c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <network_set_listen_timeout+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030240 	.word	0x00030240

000d582c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <network_get_listen_timeout+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030240 	.word	0x00030240

000d583c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <network_is_on+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030240 	.word	0x00030240

000d584c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <network_is_off+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030240 	.word	0x00030240

000d585c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <spark_process+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	689b      	ldr	r3, [r3, #8]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030244 	.word	0x00030244

000d586c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030244 	.word	0x00030244

000d587c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <malloc+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	681b      	ldr	r3, [r3, #0]
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	0003021c 	.word	0x0003021c

000d588c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <free+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	685b      	ldr	r3, [r3, #4]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	0003021c 	.word	0x0003021c

000d589c <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <snprintf+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	69db      	ldr	r3, [r3, #28]
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	0003021c 	.word	0x0003021c

000d58ac <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <__errno+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	0003021c 	.word	0x0003021c

000d58bc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <newlib_impure_ptr_callback+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	0003021c 	.word	0x0003021c

000d58cc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58cc:	2200      	movs	r2, #0
   d58ce:	6840      	ldr	r0, [r0, #4]
   d58d0:	4611      	mov	r1, r2
   d58d2:	f7ff bf9b 	b.w	d580c <network_listening>

000d58d6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d58d6:	2200      	movs	r2, #0
   d58d8:	6840      	ldr	r0, [r0, #4]
   d58da:	4611      	mov	r1, r2
   d58dc:	f7ff bfa6 	b.w	d582c <network_get_listen_timeout>

000d58e0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d58e0:	6840      	ldr	r0, [r0, #4]
   d58e2:	2200      	movs	r2, #0
   d58e4:	f7ff bf9a 	b.w	d581c <network_set_listen_timeout>

000d58e8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d58e8:	6840      	ldr	r0, [r0, #4]
   d58ea:	2200      	movs	r2, #0
   d58ec:	f081 0101 	eor.w	r1, r1, #1
   d58f0:	f7ff bf84 	b.w	d57fc <network_listen>

000d58f4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d58f4:	2300      	movs	r3, #0
   d58f6:	6840      	ldr	r0, [r0, #4]
   d58f8:	461a      	mov	r2, r3
   d58fa:	4619      	mov	r1, r3
   d58fc:	f7ff bf76 	b.w	d57ec <network_off>

000d5900 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5900:	2300      	movs	r3, #0
   d5902:	6840      	ldr	r0, [r0, #4]
   d5904:	461a      	mov	r2, r3
   d5906:	4619      	mov	r1, r3
   d5908:	f7ff bf68 	b.w	d57dc <network_on>

000d590c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d590c:	2200      	movs	r2, #0
   d590e:	6840      	ldr	r0, [r0, #4]
   d5910:	4611      	mov	r1, r2
   d5912:	f7ff bf5b 	b.w	d57cc <network_ready>

000d5916 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5916:	2200      	movs	r2, #0
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	4611      	mov	r1, r2
   d591c:	f7ff bf46 	b.w	d57ac <network_connecting>

000d5920 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	2200      	movs	r2, #0
   d5924:	2102      	movs	r1, #2
   d5926:	f7ff bf49 	b.w	d57bc <network_disconnect>

000d592a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d592a:	2300      	movs	r3, #0
   d592c:	6840      	ldr	r0, [r0, #4]
   d592e:	461a      	mov	r2, r3
   d5930:	f7ff bf34 	b.w	d579c <network_connect>

000d5934 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5934:	4b02      	ldr	r3, [pc, #8]	; (d5940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5936:	2203      	movs	r2, #3
   d5938:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d593a:	4a02      	ldr	r2, [pc, #8]	; (d5944 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d593c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d593e:	4770      	bx	lr
   d5940:	2003e644 	.word	0x2003e644
   d5944:	000d7eb8 	.word	0x000d7eb8

000d5948 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5948:	b510      	push	{r4, lr}
   d594a:	4604      	mov	r4, r0
   d594c:	4608      	mov	r0, r1
{
    _spi = spi;
   d594e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5950:	f7ff fea8 	bl	d56a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5954:	2300      	movs	r3, #0
   d5956:	6063      	str	r3, [r4, #4]
}
   d5958:	4620      	mov	r0, r4
   d595a:	bd10      	pop	{r4, pc}

000d595c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d595c:	b510      	push	{r4, lr}
   d595e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5960:	6800      	ldr	r0, [r0, #0]
   d5962:	b118      	cbz	r0, d596c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5964:	f7ff ff92 	bl	d588c <free>
            wakeupSource_ = nullptr;
   d5968:	2300      	movs	r3, #0
   d596a:	6023      	str	r3, [r4, #0]
        }
    }
   d596c:	bd10      	pop	{r4, pc}

000d596e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d596e:	b510      	push	{r4, lr}
   d5970:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5972:	f7ff fff3 	bl	d595c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5976:	4620      	mov	r0, r4
   d5978:	bd10      	pop	{r4, pc}
	...

000d597c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d597c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d597e:	4b09      	ldr	r3, [pc, #36]	; (d59a4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5980:	4c09      	ldr	r4, [pc, #36]	; (d59a8 <_GLOBAL__sub_I_System+0x2c>)
   d5982:	2202      	movs	r2, #2
   d5984:	2000      	movs	r0, #0
   d5986:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5988:	4b08      	ldr	r3, [pc, #32]	; (d59ac <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d598a:	6020      	str	r0, [r4, #0]
   d598c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d598e:	71a0      	strb	r0, [r4, #6]
   d5990:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5992:	f7ff fed7 	bl	d5744 <set_system_mode>
SystemClass System;
   d5996:	4620      	mov	r0, r4
   d5998:	4a05      	ldr	r2, [pc, #20]	; (d59b0 <_GLOBAL__sub_I_System+0x34>)
   d599a:	4906      	ldr	r1, [pc, #24]	; (d59b4 <_GLOBAL__sub_I_System+0x38>)
   d599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d59a0:	f001 b936 	b.w	d6c10 <__aeabi_atexit>
   d59a4:	2003e658 	.word	0x2003e658
   d59a8:	2003e64c 	.word	0x2003e64c
   d59ac:	ffff0000 	.word	0xffff0000
   d59b0:	2003e394 	.word	0x2003e394
   d59b4:	000d596f 	.word	0x000d596f

000d59b8 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d59b8:	b570      	push	{r4, r5, r6, lr}
   d59ba:	b086      	sub	sp, #24
   d59bc:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d59be:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d59c0:	4668      	mov	r0, sp
   d59c2:	f000 facf 	bl	d5f64 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d59c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59c8:	1d34      	adds	r4, r6, #4
   d59ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59cc:	682b      	ldr	r3, [r5, #0]
   d59ce:	7023      	strb	r3, [r4, #0]
    }
   d59d0:	4630      	mov	r0, r6
   d59d2:	b006      	add	sp, #24
   d59d4:	bd70      	pop	{r4, r5, r6, pc}

000d59d6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d59d6:	b510      	push	{r4, lr}
   d59d8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d59da:	6800      	ldr	r0, [r0, #0]
   d59dc:	b108      	cbz	r0, d59e2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d59de:	f7ff fd79 	bl	d54d4 <os_mutex_recursive_destroy>
    }
   d59e2:	4620      	mov	r0, r4
   d59e4:	bd10      	pop	{r4, pc}

000d59e6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d59e6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d59e8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d59ea:	4604      	mov	r4, r0
      if (_M_manager)
   d59ec:	b113      	cbz	r3, d59f4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d59ee:	2203      	movs	r2, #3
   d59f0:	4601      	mov	r1, r0
   d59f2:	4798      	blx	r3
    }
   d59f4:	4620      	mov	r0, r4
   d59f6:	bd10      	pop	{r4, pc}

000d59f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d59f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d59fa:	4c06      	ldr	r4, [pc, #24]	; (d5a14 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d59fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d59fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5a00:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5a02:	f7ff fd5f 	bl	d54c4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5a06:	4620      	mov	r0, r4
   d5a08:	4a03      	ldr	r2, [pc, #12]	; (d5a18 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5a0a:	4904      	ldr	r1, [pc, #16]	; (d5a1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5a10:	f001 b8fe 	b.w	d6c10 <__aeabi_atexit>
   d5a14:	2003e65c 	.word	0x2003e65c
   d5a18:	2003e394 	.word	0x2003e394
   d5a1c:	000d59d7 	.word	0x000d59d7

000d5a20 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a22:	4606      	mov	r6, r0
   d5a24:	460d      	mov	r5, r1
  size_t n = 0;
   d5a26:	188f      	adds	r7, r1, r2
   d5a28:	2400      	movs	r4, #0
  while (size--) {
   d5a2a:	42bd      	cmp	r5, r7
   d5a2c:	d00c      	beq.n	d5a48 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5a2e:	6833      	ldr	r3, [r6, #0]
   d5a30:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5a34:	689b      	ldr	r3, [r3, #8]
   d5a36:	4630      	mov	r0, r6
   d5a38:	4798      	blx	r3
     if (chunk>=0)
   d5a3a:	1e03      	subs	r3, r0, #0
   d5a3c:	db01      	blt.n	d5a42 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5a3e:	441c      	add	r4, r3
  while (size--) {
   d5a40:	e7f3      	b.n	d5a2a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5a42:	2c00      	cmp	r4, #0
   d5a44:	bf08      	it	eq
   d5a46:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5a48:	4620      	mov	r0, r4
   d5a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a4c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5a4c:	b513      	push	{r0, r1, r4, lr}
   d5a4e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5a50:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5a52:	b159      	cbz	r1, d5a6c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5a54:	9101      	str	r1, [sp, #4]
   d5a56:	f001 ff05 	bl	d7864 <strlen>
   d5a5a:	6823      	ldr	r3, [r4, #0]
   d5a5c:	9901      	ldr	r1, [sp, #4]
   d5a5e:	68db      	ldr	r3, [r3, #12]
   d5a60:	4602      	mov	r2, r0
   d5a62:	4620      	mov	r0, r4
    }
   d5a64:	b002      	add	sp, #8
   d5a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5a6a:	4718      	bx	r3
    }
   d5a6c:	b002      	add	sp, #8
   d5a6e:	bd10      	pop	{r4, pc}

000d5a70 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d5a70:	b508      	push	{r3, lr}
  return write(str);
   d5a72:	f7ff ffeb 	bl	d5a4c <_ZN5Print5writeEPKc>
}
   d5a76:	bd08      	pop	{r3, pc}

000d5a78 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5a78:	6803      	ldr	r3, [r0, #0]
   d5a7a:	689b      	ldr	r3, [r3, #8]
   d5a7c:	4718      	bx	r3

000d5a7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5a7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5a80:	210d      	movs	r1, #13
{
   d5a82:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5a84:	f7ff fff8 	bl	d5a78 <_ZN5Print5printEc>
  n += print('\n');
   d5a88:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5a8a:	4604      	mov	r4, r0
  n += print('\n');
   d5a8c:	4628      	mov	r0, r5
   d5a8e:	f7ff fff3 	bl	d5a78 <_ZN5Print5printEc>
  return n;
}
   d5a92:	4420      	add	r0, r4
   d5a94:	bd38      	pop	{r3, r4, r5, pc}

000d5a96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5a96:	b538      	push	{r3, r4, r5, lr}
   d5a98:	4605      	mov	r5, r0
  return write(str);
   d5a9a:	f7ff ffd7 	bl	d5a4c <_ZN5Print5writeEPKc>
   d5a9e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5aa0:	4628      	mov	r0, r5
   d5aa2:	f7ff ffec 	bl	d5a7e <_ZN5Print7printlnEv>
  return n;
}
   d5aa6:	4420      	add	r0, r4
   d5aa8:	bd38      	pop	{r3, r4, r5, pc}

000d5aaa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5aaa:	b530      	push	{r4, r5, lr}
   d5aac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5aae:	2300      	movs	r3, #0
   d5ab0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5ab4:	2a01      	cmp	r2, #1
   d5ab6:	bf98      	it	ls
   d5ab8:	220a      	movls	r2, #10
   d5aba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5abc:	460d      	mov	r5, r1
   d5abe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5ac2:	fb01 5312 	mls	r3, r1, r2, r5
   d5ac6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5aca:	2b09      	cmp	r3, #9
   d5acc:	bf94      	ite	ls
   d5ace:	3330      	addls	r3, #48	; 0x30
   d5ad0:	3337      	addhi	r3, #55	; 0x37
   d5ad2:	b2db      	uxtb	r3, r3
  } while(n);
   d5ad4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5ad6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5ada:	d9ef      	bls.n	d5abc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5adc:	4621      	mov	r1, r4
   d5ade:	f7ff ffb5 	bl	d5a4c <_ZN5Print5writeEPKc>
}
   d5ae2:	b00b      	add	sp, #44	; 0x2c
   d5ae4:	bd30      	pop	{r4, r5, pc}
	...

000d5ae8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d5ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5aec:	ec55 4b10 	vmov	r4, r5, d0
   d5af0:	4606      	mov	r6, r0
   d5af2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5af4:	ee10 2a10 	vmov	r2, s0
   d5af8:	ee10 0a10 	vmov	r0, s0
   d5afc:	462b      	mov	r3, r5
   d5afe:	4629      	mov	r1, r5
   d5b00:	f001 fdf8 	bl	d76f4 <__aeabi_dcmpun>
   d5b04:	b140      	cbz	r0, d5b18 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d5b06:	4953      	ldr	r1, [pc, #332]	; (d5c54 <_ZN5Print10printFloatEdh+0x16c>)
   d5b08:	4630      	mov	r0, r6
   d5b0a:	f7ff ff9f 	bl	d5a4c <_ZN5Print5writeEPKc>
   d5b0e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d5b10:	4650      	mov	r0, sl
   d5b12:	b003      	add	sp, #12
   d5b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d5b18:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d5b1c:	4b4e      	ldr	r3, [pc, #312]	; (d5c58 <_ZN5Print10printFloatEdh+0x170>)
   d5b1e:	f04f 32ff 	mov.w	r2, #4294967295
   d5b22:	4620      	mov	r0, r4
   d5b24:	4649      	mov	r1, r9
   d5b26:	f001 fde5 	bl	d76f4 <__aeabi_dcmpun>
   d5b2a:	b948      	cbnz	r0, d5b40 <_ZN5Print10printFloatEdh+0x58>
   d5b2c:	4b4a      	ldr	r3, [pc, #296]	; (d5c58 <_ZN5Print10printFloatEdh+0x170>)
   d5b2e:	f04f 32ff 	mov.w	r2, #4294967295
   d5b32:	4620      	mov	r0, r4
   d5b34:	4649      	mov	r1, r9
   d5b36:	f001 fdbf 	bl	d76b8 <__aeabi_dcmple>
   d5b3a:	b908      	cbnz	r0, d5b40 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d5b3c:	4947      	ldr	r1, [pc, #284]	; (d5c5c <_ZN5Print10printFloatEdh+0x174>)
   d5b3e:	e7e3      	b.n	d5b08 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d5b40:	4b47      	ldr	r3, [pc, #284]	; (d5c60 <_ZN5Print10printFloatEdh+0x178>)
   d5b42:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5b46:	4620      	mov	r0, r4
   d5b48:	4629      	mov	r1, r5
   d5b4a:	f001 fdc9 	bl	d76e0 <__aeabi_dcmpgt>
   d5b4e:	b108      	cbz	r0, d5b54 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d5b50:	4944      	ldr	r1, [pc, #272]	; (d5c64 <_ZN5Print10printFloatEdh+0x17c>)
   d5b52:	e7d9      	b.n	d5b08 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d5b54:	4b44      	ldr	r3, [pc, #272]	; (d5c68 <_ZN5Print10printFloatEdh+0x180>)
   d5b56:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	4629      	mov	r1, r5
   d5b5e:	f001 fda1 	bl	d76a4 <__aeabi_dcmplt>
   d5b62:	2800      	cmp	r0, #0
   d5b64:	d1f4      	bne.n	d5b50 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d5b66:	2200      	movs	r2, #0
   d5b68:	2300      	movs	r3, #0
   d5b6a:	4620      	mov	r0, r4
   d5b6c:	4629      	mov	r1, r5
   d5b6e:	f001 fd99 	bl	d76a4 <__aeabi_dcmplt>
   d5b72:	b1d0      	cbz	r0, d5baa <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d5b74:	212d      	movs	r1, #45	; 0x2d
   d5b76:	4630      	mov	r0, r6
   d5b78:	f7ff ff7e 	bl	d5a78 <_ZN5Print5printEc>
     number = -number;
   d5b7c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d5b80:	4682      	mov	sl, r0
     number = -number;
   d5b82:	461d      	mov	r5, r3
  double rounding = 0.5;
   d5b84:	4939      	ldr	r1, [pc, #228]	; (d5c6c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d5b86:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d5c74 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d5b8a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d5b8e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d5b90:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d5b94:	fa5f f38b 	uxtb.w	r3, fp
   d5b98:	429f      	cmp	r7, r3
   d5b9a:	d908      	bls.n	d5bae <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d5b9c:	4642      	mov	r2, r8
   d5b9e:	464b      	mov	r3, r9
   d5ba0:	f001 fc38 	bl	d7414 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d5ba4:	f10b 0b01 	add.w	fp, fp, #1
   d5ba8:	e7f4      	b.n	d5b94 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d5baa:	4682      	mov	sl, r0
   d5bac:	e7ea      	b.n	d5b84 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d5bae:	4622      	mov	r2, r4
   d5bb0:	462b      	mov	r3, r5
   d5bb2:	f001 f94f 	bl	d6e54 <__adddf3>
   d5bb6:	460d      	mov	r5, r1
   d5bb8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d5bba:	f001 fdd9 	bl	d7770 <__aeabi_d2uiz>
   d5bbe:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d5bc0:	f001 fa84 	bl	d70cc <__aeabi_ui2d>
   d5bc4:	4602      	mov	r2, r0
   d5bc6:	460b      	mov	r3, r1
   d5bc8:	4620      	mov	r0, r4
   d5bca:	4629      	mov	r1, r5
   d5bcc:	f001 f940 	bl	d6e50 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5bd0:	220a      	movs	r2, #10
   d5bd2:	4604      	mov	r4, r0
   d5bd4:	460d      	mov	r5, r1
   d5bd6:	4630      	mov	r0, r6
   d5bd8:	4641      	mov	r1, r8
   d5bda:	f7ff ff66 	bl	d5aaa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d5bde:	4482      	add	sl, r0
  if (digits > 0) {
   d5be0:	b127      	cbz	r7, d5bec <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d5be2:	4923      	ldr	r1, [pc, #140]	; (d5c70 <_ZN5Print10printFloatEdh+0x188>)
   d5be4:	4630      	mov	r0, r6
   d5be6:	f7ff ff31 	bl	d5a4c <_ZN5Print5writeEPKc>
    n += print(".");
   d5bea:	4482      	add	sl, r0
    remainder *= 10.0;
   d5bec:	f8df 9084 	ldr.w	r9, [pc, #132]	; d5c74 <_ZN5Print10printFloatEdh+0x18c>
   d5bf0:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d5bf4:	3f01      	subs	r7, #1
   d5bf6:	b2ff      	uxtb	r7, r7
   d5bf8:	2fff      	cmp	r7, #255	; 0xff
   d5bfa:	d089      	beq.n	d5b10 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d5bfc:	4642      	mov	r2, r8
   d5bfe:	464b      	mov	r3, r9
   d5c00:	4620      	mov	r0, r4
   d5c02:	4629      	mov	r1, r5
   d5c04:	f001 fadc 	bl	d71c0 <__aeabi_dmul>
   d5c08:	4604      	mov	r4, r0
   d5c0a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d5c0c:	f001 fd88 	bl	d7720 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d5c10:	f1b0 0b00 	subs.w	fp, r0, #0
   d5c14:	da1a      	bge.n	d5c4c <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d5c16:	212d      	movs	r1, #45	; 0x2d
   d5c18:	4630      	mov	r0, r6
   d5c1a:	f7ff ff2d 	bl	d5a78 <_ZN5Print5printEc>
            val = -n;
   d5c1e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d5c22:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d5c24:	220a      	movs	r2, #10
   d5c26:	4630      	mov	r0, r6
   d5c28:	9301      	str	r3, [sp, #4]
   d5c2a:	f7ff ff3e 	bl	d5aaa <_ZN5Print11printNumberEmh>
   d5c2e:	9b01      	ldr	r3, [sp, #4]
   d5c30:	4418      	add	r0, r3
    n += print(toPrint);
   d5c32:	4482      	add	sl, r0
    remainder -= toPrint;
   d5c34:	4658      	mov	r0, fp
   d5c36:	f001 fa59 	bl	d70ec <__aeabi_i2d>
   d5c3a:	4602      	mov	r2, r0
   d5c3c:	460b      	mov	r3, r1
   d5c3e:	4620      	mov	r0, r4
   d5c40:	4629      	mov	r1, r5
   d5c42:	f001 f905 	bl	d6e50 <__aeabi_dsub>
   d5c46:	4604      	mov	r4, r0
   d5c48:	460d      	mov	r5, r1
  while (digits-- > 0)
   d5c4a:	e7d3      	b.n	d5bf4 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d5c4c:	4659      	mov	r1, fp
        size_t t = 0;
   d5c4e:	2300      	movs	r3, #0
   d5c50:	e7e8      	b.n	d5c24 <_ZN5Print10printFloatEdh+0x13c>
   d5c52:	bf00      	nop
   d5c54:	000d7ef4 	.word	0x000d7ef4
   d5c58:	7fefffff 	.word	0x7fefffff
   d5c5c:	000d7ef8 	.word	0x000d7ef8
   d5c60:	41efffff 	.word	0x41efffff
   d5c64:	000d7efc 	.word	0x000d7efc
   d5c68:	c1efffff 	.word	0xc1efffff
   d5c6c:	3fe00000 	.word	0x3fe00000
   d5c70:	000d7f00 	.word	0x000d7f00
   d5c74:	40240000 	.word	0x40240000

000d5c78 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   d5c78:	b2c9      	uxtb	r1, r1
   d5c7a:	f7ff bf35 	b.w	d5ae8 <_ZN5Print10printFloatEdh>

000d5c7e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d5c7e:	b510      	push	{r4, lr}
   d5c80:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5c82:	f7ff fc17 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d5c86:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d5c88:	6823      	ldr	r3, [r4, #0]
   d5c8a:	4620      	mov	r0, r4
   d5c8c:	695b      	ldr	r3, [r3, #20]
   d5c8e:	4798      	blx	r3
    if (c >= 0) return c;
   d5c90:	2800      	cmp	r0, #0
   d5c92:	da08      	bge.n	d5ca6 <_ZN6Stream9timedReadEv+0x28>
   d5c94:	f7ff fc0e 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d5c98:	68e3      	ldr	r3, [r4, #12]
   d5c9a:	1ac0      	subs	r0, r0, r3
   d5c9c:	68a3      	ldr	r3, [r4, #8]
   d5c9e:	4298      	cmp	r0, r3
   d5ca0:	d3f2      	bcc.n	d5c88 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d5ca2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5ca6:	bd10      	pop	{r4, pc}

000d5ca8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d5ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5caa:	4606      	mov	r6, r0
   d5cac:	460d      	mov	r5, r1
   d5cae:	4617      	mov	r7, r2
  size_t count = 0;
   d5cb0:	2400      	movs	r4, #0
  while (count < length) {
   d5cb2:	42bc      	cmp	r4, r7
   d5cb4:	d007      	beq.n	d5cc6 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d5cb6:	4630      	mov	r0, r6
   d5cb8:	f7ff ffe1 	bl	d5c7e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d5cbc:	1e03      	subs	r3, r0, #0
   d5cbe:	db02      	blt.n	d5cc6 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d5cc0:	552b      	strb	r3, [r5, r4]
    count++;
   d5cc2:	3401      	adds	r4, #1
  while (count < length) {
   d5cc4:	e7f5      	b.n	d5cb2 <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cca <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5cca:	2300      	movs	r3, #0
   d5ccc:	6840      	ldr	r0, [r0, #4]
   d5cce:	461a      	mov	r2, r3
   d5cd0:	4619      	mov	r1, r3
   d5cd2:	f7ff bd83 	b.w	d57dc <network_on>
	...

000d5cd8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5cd8:	4b01      	ldr	r3, [pc, #4]	; (d5ce0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5cda:	4a02      	ldr	r2, [pc, #8]	; (d5ce4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5cdc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5cde:	4770      	bx	lr
   d5ce0:	2003e660 	.word	0x2003e660
   d5ce4:	000d7f02 	.word	0x000d7f02

000d5ce8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5ce8:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5cea:	681a      	ldr	r2, [r3, #0]
   d5cec:	4b02      	ldr	r3, [pc, #8]	; (d5cf8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5cee:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5cf0:	4770      	bx	lr
   d5cf2:	bf00      	nop
   d5cf4:	2003e32c 	.word	0x2003e32c
   d5cf8:	2003e664 	.word	0x2003e664

000d5cfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5cfc:	2100      	movs	r1, #0
   d5cfe:	f7ff bd29 	b.w	d5754 <system_delay_ms>

000d5d02 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5d02:	b510      	push	{r4, lr}
   d5d04:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5d06:	f7ff fe6e 	bl	d59e6 <_ZNSt14_Function_baseD1Ev>
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	bd10      	pop	{r4, pc}
	...

000d5d10 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5d10:	4803      	ldr	r0, [pc, #12]	; (d5d20 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5d12:	4a04      	ldr	r2, [pc, #16]	; (d5d24 <_GLOBAL__sub_I_RGB+0x14>)
   d5d14:	4904      	ldr	r1, [pc, #16]	; (d5d28 <_GLOBAL__sub_I_RGB+0x18>)
   d5d16:	2300      	movs	r3, #0
   d5d18:	6083      	str	r3, [r0, #8]
   d5d1a:	f000 bf79 	b.w	d6c10 <__aeabi_atexit>
   d5d1e:	bf00      	nop
   d5d20:	2003e668 	.word	0x2003e668
   d5d24:	2003e394 	.word	0x2003e394
   d5d28:	000d5d03 	.word	0x000d5d03

000d5d2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5d2c:	4b01      	ldr	r3, [pc, #4]	; (d5d34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5d2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5d30:	4770      	bx	lr
   d5d32:	bf00      	nop
   d5d34:	2003e330 	.word	0x2003e330

000d5d38 <serialEventRun>:
{
   d5d38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5d3a:	4b0b      	ldr	r3, [pc, #44]	; (d5d68 <serialEventRun+0x30>)
   d5d3c:	b143      	cbz	r3, d5d50 <serialEventRun+0x18>
   d5d3e:	f000 f97d 	bl	d603c <_Z16_fetch_usbserialv>
   d5d42:	6803      	ldr	r3, [r0, #0]
   d5d44:	691b      	ldr	r3, [r3, #16]
   d5d46:	4798      	blx	r3
   d5d48:	2800      	cmp	r0, #0
   d5d4a:	dd01      	ble.n	d5d50 <serialEventRun+0x18>
        serialEvent();
   d5d4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5d50:	4b06      	ldr	r3, [pc, #24]	; (d5d6c <serialEventRun+0x34>)
   d5d52:	b143      	cbz	r3, d5d66 <serialEventRun+0x2e>
   d5d54:	f000 f9f0 	bl	d6138 <_Z22__fetch_global_Serial1v>
   d5d58:	6803      	ldr	r3, [r0, #0]
   d5d5a:	691b      	ldr	r3, [r3, #16]
   d5d5c:	4798      	blx	r3
   d5d5e:	2800      	cmp	r0, #0
   d5d60:	dd01      	ble.n	d5d66 <serialEventRun+0x2e>
        serialEvent1();
   d5d62:	f3af 8000 	nop.w
}
   d5d66:	bd08      	pop	{r3, pc}
	...

000d5d70 <_post_loop>:
{
   d5d70:	b508      	push	{r3, lr}
	serialEventRun();
   d5d72:	f7ff ffe1 	bl	d5d38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5d76:	f7ff fb9d 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5d7a:	4b01      	ldr	r3, [pc, #4]	; (d5d80 <_post_loop+0x10>)
   d5d7c:	6018      	str	r0, [r3, #0]
}
   d5d7e:	bd08      	pop	{r3, pc}
   d5d80:	2003e7d4 	.word	0x2003e7d4

000d5d84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5d84:	4802      	ldr	r0, [pc, #8]	; (d5d90 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5d86:	4a03      	ldr	r2, [pc, #12]	; (d5d94 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5d88:	4903      	ldr	r1, [pc, #12]	; (d5d98 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5d8a:	1a12      	subs	r2, r2, r0
   d5d8c:	f001 bd26 	b.w	d77dc <memcpy>
   d5d90:	2003f400 	.word	0x2003f400
   d5d94:	2003f404 	.word	0x2003f404
   d5d98:	000d82e0 	.word	0x000d82e0

000d5d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5d9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5d9e:	2300      	movs	r3, #0
   d5da0:	9300      	str	r3, [sp, #0]
   d5da2:	461a      	mov	r2, r3
   d5da4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5da8:	f7ff fcee 	bl	d5788 <system_ctrl_set_result>
}
   d5dac:	b003      	add	sp, #12
   d5dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5db4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5db4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5db6:	8843      	ldrh	r3, [r0, #2]
   d5db8:	2b0a      	cmp	r3, #10
   d5dba:	d008      	beq.n	d5dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5dbc:	2b50      	cmp	r3, #80	; 0x50
   d5dbe:	d10b      	bne.n	d5dd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5dc0:	4b09      	ldr	r3, [pc, #36]	; (d5de8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5dc2:	681b      	ldr	r3, [r3, #0]
   d5dc4:	b14b      	cbz	r3, d5dda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5dc6:	b003      	add	sp, #12
   d5dc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5dcc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5dce:	f7ff ffe5 	bl	d5d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5dd2:	b003      	add	sp, #12
   d5dd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5dd8:	2300      	movs	r3, #0
   d5dda:	9300      	str	r3, [sp, #0]
   d5ddc:	461a      	mov	r2, r3
   d5dde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5de2:	f7ff fcd1 	bl	d5788 <system_ctrl_set_result>
}
   d5de6:	e7f4      	b.n	d5dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5de8:	2003e67c 	.word	0x2003e67c

000d5dec <module_user_init_hook>:
{
   d5dec:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5dee:	4c12      	ldr	r4, [pc, #72]	; (d5e38 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5df0:	4812      	ldr	r0, [pc, #72]	; (d5e3c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5df2:	4d13      	ldr	r5, [pc, #76]	; (d5e40 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5df4:	2100      	movs	r1, #0
   d5df6:	f7ff fd61 	bl	d58bc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5dfa:	6823      	ldr	r3, [r4, #0]
   d5dfc:	42ab      	cmp	r3, r5
   d5dfe:	4b11      	ldr	r3, [pc, #68]	; (d5e44 <module_user_init_hook+0x58>)
   d5e00:	bf0c      	ite	eq
   d5e02:	2201      	moveq	r2, #1
   d5e04:	2200      	movne	r2, #0
   d5e06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5e08:	d002      	beq.n	d5e10 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5e0a:	f7ff ffbb 	bl	d5d84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5e0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5e10:	f7ff fb48 	bl	d54a4 <HAL_RNG_GetRandomNumber>
   d5e14:	4604      	mov	r4, r0
    srand(seed);
   d5e16:	f001 fcf7 	bl	d7808 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5e1a:	4b0b      	ldr	r3, [pc, #44]	; (d5e48 <module_user_init_hook+0x5c>)
   d5e1c:	b113      	cbz	r3, d5e24 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5e1e:	4620      	mov	r0, r4
   d5e20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5e24:	2100      	movs	r1, #0
   d5e26:	4808      	ldr	r0, [pc, #32]	; (d5e48 <module_user_init_hook+0x5c>)
   d5e28:	f7ff fd20 	bl	d586c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5e30:	4806      	ldr	r0, [pc, #24]	; (d5e4c <module_user_init_hook+0x60>)
   d5e32:	2100      	movs	r1, #0
   d5e34:	f7ff bc9e 	b.w	d5774 <system_ctrl_set_app_request_handler>
   d5e38:	2003f400 	.word	0x2003f400
   d5e3c:	000d5d2d 	.word	0x000d5d2d
   d5e40:	9a271c1e 	.word	0x9a271c1e
   d5e44:	2003e678 	.word	0x2003e678
   d5e48:	00000000 	.word	0x00000000
   d5e4c:	000d5db5 	.word	0x000d5db5

000d5e50 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d5e50:	4770      	bx	lr

000d5e52 <_ZN9IPAddressD0Ev>:
   d5e52:	b510      	push	{r4, lr}
   d5e54:	2118      	movs	r1, #24
   d5e56:	4604      	mov	r4, r0
   d5e58:	f000 fedf 	bl	d6c1a <_ZdlPvj>
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	bd10      	pop	{r4, pc}

000d5e60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5e60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5e62:	7d03      	ldrb	r3, [r0, #20]
   d5e64:	2b06      	cmp	r3, #6
{
   d5e66:	b08d      	sub	sp, #52	; 0x34
   d5e68:	460e      	mov	r6, r1
   d5e6a:	f100 0704 	add.w	r7, r0, #4
   d5e6e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5e72:	d012      	beq.n	d5e9a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5e74:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d5e78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5e7c:	220a      	movs	r2, #10
   d5e7e:	4630      	mov	r0, r6
   d5e80:	f7ff fe13 	bl	d5aaa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5e84:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5e86:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5e88:	d019      	beq.n	d5ebe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5e8a:	2c00      	cmp	r4, #0
   d5e8c:	d0f4      	beq.n	d5e78 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5e8e:	212e      	movs	r1, #46	; 0x2e
   d5e90:	4630      	mov	r0, r6
   d5e92:	f7ff fdf1 	bl	d5a78 <_ZN5Print5printEc>
   d5e96:	4404      	add	r4, r0
   d5e98:	e7ee      	b.n	d5e78 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5e9a:	232f      	movs	r3, #47	; 0x2f
   d5e9c:	466a      	mov	r2, sp
   d5e9e:	4639      	mov	r1, r7
   d5ea0:	200a      	movs	r0, #10
		buf[0] = 0;
   d5ea2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5ea6:	f7ff fb1d 	bl	d54e4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5eaa:	4668      	mov	r0, sp
   d5eac:	f001 fcda 	bl	d7864 <strlen>
   d5eb0:	6833      	ldr	r3, [r6, #0]
   d5eb2:	4602      	mov	r2, r0
   d5eb4:	68db      	ldr	r3, [r3, #12]
   d5eb6:	4669      	mov	r1, sp
   d5eb8:	4630      	mov	r0, r6
   d5eba:	4798      	blx	r3
   d5ebc:	4604      	mov	r4, r0
    }
    return n;
}
   d5ebe:	4620      	mov	r0, r4
   d5ec0:	b00d      	add	sp, #52	; 0x34
   d5ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ec4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4b05      	ldr	r3, [pc, #20]	; (d5edc <_ZN9IPAddressC1Ev+0x18>)
   d5ec8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5eca:	2211      	movs	r2, #17
   d5ecc:	f840 3b04 	str.w	r3, [r0], #4
   d5ed0:	2100      	movs	r1, #0
   d5ed2:	f001 fc91 	bl	d77f8 <memset>
}
   d5ed6:	4620      	mov	r0, r4
   d5ed8:	bd10      	pop	{r4, pc}
   d5eda:	bf00      	nop
   d5edc:	000d7f2c 	.word	0x000d7f2c

000d5ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5ee0:	4603      	mov	r3, r0
   d5ee2:	4a07      	ldr	r2, [pc, #28]	; (d5f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5ee4:	b510      	push	{r4, lr}
   d5ee6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5eea:	f101 0210 	add.w	r2, r1, #16
   d5eee:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ef2:	f843 4b04 	str.w	r4, [r3], #4
   d5ef6:	4291      	cmp	r1, r2
   d5ef8:	d1f9      	bne.n	d5eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5efa:	780a      	ldrb	r2, [r1, #0]
   d5efc:	701a      	strb	r2, [r3, #0]
}
   d5efe:	bd10      	pop	{r4, pc}
   d5f00:	000d7f2c 	.word	0x000d7f2c

000d5f04 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d5f04:	7d03      	ldrb	r3, [r0, #20]
   d5f06:	2b04      	cmp	r3, #4
   d5f08:	d104      	bne.n	d5f14 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d5f0a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5f0c:	3800      	subs	r0, #0
   d5f0e:	bf18      	it	ne
   d5f10:	2001      	movne	r0, #1
   d5f12:	4770      	bx	lr
    } else if (version() == 6) {
   d5f14:	2b06      	cmp	r3, #6
   d5f16:	d107      	bne.n	d5f28 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5f18:	6843      	ldr	r3, [r0, #4]
   d5f1a:	b93b      	cbnz	r3, d5f2c <_ZNK9IPAddresscvbEv+0x28>
   d5f1c:	6883      	ldr	r3, [r0, #8]
   d5f1e:	b92b      	cbnz	r3, d5f2c <_ZNK9IPAddresscvbEv+0x28>
   d5f20:	68c3      	ldr	r3, [r0, #12]
   d5f22:	b91b      	cbnz	r3, d5f2c <_ZNK9IPAddresscvbEv+0x28>
   d5f24:	6900      	ldr	r0, [r0, #16]
   d5f26:	e7f1      	b.n	d5f0c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d5f28:	2000      	movs	r0, #0
   d5f2a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5f2c:	2001      	movs	r0, #1
}
   d5f2e:	4770      	bx	lr

000d5f30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5f30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5f32:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5f36:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5f3a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d5f3e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5f42:	2304      	movs	r3, #4
   d5f44:	6041      	str	r1, [r0, #4]
   d5f46:	7503      	strb	r3, [r0, #20]
}
   d5f48:	bd10      	pop	{r4, pc}
	...

000d5f4c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d5f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f4e:	4d04      	ldr	r5, [pc, #16]	; (d5f60 <_ZN9IPAddressC1Ehhhh+0x14>)
   d5f50:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d5f52:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d5f56:	9500      	str	r5, [sp, #0]
   d5f58:	f7ff ffea 	bl	d5f30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5f5c:	b003      	add	sp, #12
   d5f5e:	bd30      	pop	{r4, r5, pc}
   d5f60:	000d7f2c 	.word	0x000d7f2c

000d5f64 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5f64:	b513      	push	{r0, r1, r4, lr}
   d5f66:	4b05      	ldr	r3, [pc, #20]	; (d5f7c <_ZN9IPAddressC1EPKh+0x18>)
   d5f68:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5f6a:	78cb      	ldrb	r3, [r1, #3]
   d5f6c:	9300      	str	r3, [sp, #0]
   d5f6e:	788b      	ldrb	r3, [r1, #2]
   d5f70:	784a      	ldrb	r2, [r1, #1]
   d5f72:	7809      	ldrb	r1, [r1, #0]
   d5f74:	f7ff ffdc 	bl	d5f30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5f78:	b002      	add	sp, #8
   d5f7a:	bd10      	pop	{r4, pc}
   d5f7c:	000d7f2c 	.word	0x000d7f2c

000d5f80 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5f80:	7441      	strb	r1, [r0, #17]
}
   d5f82:	4770      	bx	lr

000d5f84 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5f84:	4770      	bx	lr

000d5f86 <_ZN9USBSerial4readEv>:
{
   d5f86:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5f88:	2100      	movs	r1, #0
   d5f8a:	7c00      	ldrb	r0, [r0, #16]
   d5f8c:	f7ff fbba 	bl	d5704 <HAL_USB_USART_Receive_Data>
}
   d5f90:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5f94:	bd08      	pop	{r3, pc}

000d5f96 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5f96:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5f98:	2101      	movs	r1, #1
   d5f9a:	7c00      	ldrb	r0, [r0, #16]
   d5f9c:	f7ff fbb2 	bl	d5704 <HAL_USB_USART_Receive_Data>
}
   d5fa0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5fa4:	bd08      	pop	{r3, pc}

000d5fa6 <_ZN9USBSerial17availableForWriteEv>:
{
   d5fa6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5fa8:	7c00      	ldrb	r0, [r0, #16]
   d5faa:	f7ff fba3 	bl	d56f4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5fae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fb2:	bd08      	pop	{r3, pc}

000d5fb4 <_ZN9USBSerial9availableEv>:
{
   d5fb4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5fb6:	7c00      	ldrb	r0, [r0, #16]
   d5fb8:	f7ff fb94 	bl	d56e4 <HAL_USB_USART_Available_Data>
}
   d5fbc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5fc0:	bd08      	pop	{r3, pc}

000d5fc2 <_ZN9USBSerial5writeEh>:
{
   d5fc2:	b513      	push	{r0, r1, r4, lr}
   d5fc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fc6:	7c00      	ldrb	r0, [r0, #16]
{
   d5fc8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5fca:	f7ff fb93 	bl	d56f4 <HAL_USB_USART_Available_Data_For_Write>
   d5fce:	2800      	cmp	r0, #0
   d5fd0:	9901      	ldr	r1, [sp, #4]
   d5fd2:	dc01      	bgt.n	d5fd8 <_ZN9USBSerial5writeEh+0x16>
   d5fd4:	7c60      	ldrb	r0, [r4, #17]
   d5fd6:	b120      	cbz	r0, d5fe2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5fd8:	7c20      	ldrb	r0, [r4, #16]
   d5fda:	f7ff fb9b 	bl	d5714 <HAL_USB_USART_Send_Data>
   d5fde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5fe2:	b002      	add	sp, #8
   d5fe4:	bd10      	pop	{r4, pc}

000d5fe6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5fe6:	7c00      	ldrb	r0, [r0, #16]
   d5fe8:	f7ff bb9c 	b.w	d5724 <HAL_USB_USART_Flush_Data>

000d5fec <_ZN9USBSerialD0Ev>:
   d5fec:	b510      	push	{r4, lr}
   d5fee:	2114      	movs	r1, #20
   d5ff0:	4604      	mov	r4, r0
   d5ff2:	f000 fe12 	bl	d6c1a <_ZdlPvj>
   d5ff6:	4620      	mov	r0, r4
   d5ff8:	bd10      	pop	{r4, pc}
	...

000d5ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ffc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6002:	4604      	mov	r4, r0
   d6004:	4608      	mov	r0, r1
   d6006:	2100      	movs	r1, #0
   d6008:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d600c:	4b04      	ldr	r3, [pc, #16]	; (d6020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d600e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6010:	2301      	movs	r3, #1
  _serial = serial;
   d6012:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6014:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6016:	4611      	mov	r1, r2
   d6018:	f7ff fb54 	bl	d56c4 <HAL_USB_USART_Init>
}
   d601c:	4620      	mov	r0, r4
   d601e:	bd10      	pop	{r4, pc}
   d6020:	000d7f40 	.word	0x000d7f40

000d6024 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6024:	7c00      	ldrb	r0, [r0, #16]
   d6026:	2200      	movs	r2, #0
   d6028:	f7ff bb54 	b.w	d56d4 <HAL_USB_USART_Begin>

000d602c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d602c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d602e:	2214      	movs	r2, #20
{
   d6030:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6032:	2100      	movs	r1, #0
   d6034:	f001 fbe0 	bl	d77f8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6038:	4620      	mov	r0, r4
   d603a:	bd10      	pop	{r4, pc}

000d603c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d603c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d603e:	4c10      	ldr	r4, [pc, #64]	; (d6080 <_Z16_fetch_usbserialv+0x44>)
{
   d6040:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6042:	a803      	add	r0, sp, #12
   d6044:	f7ff fff2 	bl	d602c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6048:	7821      	ldrb	r1, [r4, #0]
   d604a:	f3bf 8f5b 	dmb	ish
   d604e:	f011 0101 	ands.w	r1, r1, #1
   d6052:	d111      	bne.n	d6078 <_Z16_fetch_usbserialv+0x3c>
   d6054:	4620      	mov	r0, r4
   d6056:	9101      	str	r1, [sp, #4]
   d6058:	f7fe f823 	bl	d40a2 <__cxa_guard_acquire>
   d605c:	9901      	ldr	r1, [sp, #4]
   d605e:	b158      	cbz	r0, d6078 <_Z16_fetch_usbserialv+0x3c>
   d6060:	aa03      	add	r2, sp, #12
   d6062:	4808      	ldr	r0, [pc, #32]	; (d6084 <_Z16_fetch_usbserialv+0x48>)
   d6064:	f7ff ffca 	bl	d5ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6068:	4620      	mov	r0, r4
   d606a:	f7fe f81f 	bl	d40ac <__cxa_guard_release>
   d606e:	4a06      	ldr	r2, [pc, #24]	; (d6088 <_Z16_fetch_usbserialv+0x4c>)
   d6070:	4906      	ldr	r1, [pc, #24]	; (d608c <_Z16_fetch_usbserialv+0x50>)
   d6072:	4804      	ldr	r0, [pc, #16]	; (d6084 <_Z16_fetch_usbserialv+0x48>)
   d6074:	f000 fdcc 	bl	d6c10 <__aeabi_atexit>
	return _usbserial;
}
   d6078:	4802      	ldr	r0, [pc, #8]	; (d6084 <_Z16_fetch_usbserialv+0x48>)
   d607a:	b008      	add	sp, #32
   d607c:	bd10      	pop	{r4, pc}
   d607e:	bf00      	nop
   d6080:	2003e680 	.word	0x2003e680
   d6084:	2003e684 	.word	0x2003e684
   d6088:	2003e394 	.word	0x2003e394
   d608c:	000d5f85 	.word	0x000d5f85

000d6090 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6090:	4770      	bx	lr

000d6092 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6092:	7441      	strb	r1, [r0, #17]
}
   d6094:	4770      	bx	lr

000d6096 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6096:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6098:	7c00      	ldrb	r0, [r0, #16]
   d609a:	f7ff fa73 	bl	d5584 <hal_usart_available_data_for_write>
}
   d609e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60a2:	bd08      	pop	{r3, pc}

000d60a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d60a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d60a6:	7c00      	ldrb	r0, [r0, #16]
   d60a8:	f7ff fa44 	bl	d5534 <hal_usart_available>
}
   d60ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60b0:	bd08      	pop	{r3, pc}

000d60b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d60b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d60b4:	7c00      	ldrb	r0, [r0, #16]
   d60b6:	f7ff fa4d 	bl	d5554 <hal_usart_peek>
}
   d60ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60be:	bd08      	pop	{r3, pc}

000d60c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d60c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d60c2:	7c00      	ldrb	r0, [r0, #16]
   d60c4:	f7ff fa3e 	bl	d5544 <hal_usart_read>
}
   d60c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60cc:	bd08      	pop	{r3, pc}

000d60ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d60ce:	7c00      	ldrb	r0, [r0, #16]
   d60d0:	f7ff ba48 	b.w	d5564 <hal_usart_flush>

000d60d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d60d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d60d6:	7c45      	ldrb	r5, [r0, #17]
{
   d60d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d60da:	b12d      	cbz	r5, d60e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d60dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d60de:	b003      	add	sp, #12
   d60e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d60e4:	f7ff ba1e 	b.w	d5524 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	9101      	str	r1, [sp, #4]
   d60ec:	f7ff fa4a 	bl	d5584 <hal_usart_available_data_for_write>
   d60f0:	2800      	cmp	r0, #0
   d60f2:	9901      	ldr	r1, [sp, #4]
   d60f4:	dcf2      	bgt.n	d60dc <_ZN11USARTSerial5writeEh+0x8>
}
   d60f6:	4628      	mov	r0, r5
   d60f8:	b003      	add	sp, #12
   d60fa:	bd30      	pop	{r4, r5, pc}

000d60fc <_ZN11USARTSerialD0Ev>:
   d60fc:	b510      	push	{r4, lr}
   d60fe:	2114      	movs	r1, #20
   d6100:	4604      	mov	r4, r0
   d6102:	f000 fd8a 	bl	d6c1a <_ZdlPvj>
   d6106:	4620      	mov	r0, r4
   d6108:	bd10      	pop	{r4, pc}
	...

000d610c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d610c:	b510      	push	{r4, lr}
   d610e:	f04f 0c00 	mov.w	ip, #0
   d6112:	4604      	mov	r4, r0
   d6114:	4608      	mov	r0, r1
   d6116:	4611      	mov	r1, r2
   d6118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d611c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6120:	4a04      	ldr	r2, [pc, #16]	; (d6134 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6122:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6124:	2201      	movs	r2, #1
  _serial = serial;
   d6126:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6128:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d612a:	461a      	mov	r2, r3
   d612c:	f7ff f9f2 	bl	d5514 <hal_usart_init>
}
   d6130:	4620      	mov	r0, r4
   d6132:	bd10      	pop	{r4, pc}
   d6134:	000d7f70 	.word	0x000d7f70

000d6138 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6138:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d613a:	4c0e      	ldr	r4, [pc, #56]	; (d6174 <_Z22__fetch_global_Serial1v+0x3c>)
   d613c:	7821      	ldrb	r1, [r4, #0]
   d613e:	f3bf 8f5b 	dmb	ish
   d6142:	f011 0101 	ands.w	r1, r1, #1
   d6146:	d112      	bne.n	d616e <_Z22__fetch_global_Serial1v+0x36>
   d6148:	4620      	mov	r0, r4
   d614a:	9101      	str	r1, [sp, #4]
   d614c:	f7fd ffa9 	bl	d40a2 <__cxa_guard_acquire>
   d6150:	9901      	ldr	r1, [sp, #4]
   d6152:	b160      	cbz	r0, d616e <_Z22__fetch_global_Serial1v+0x36>
   d6154:	4a08      	ldr	r2, [pc, #32]	; (d6178 <_Z22__fetch_global_Serial1v+0x40>)
   d6156:	4b09      	ldr	r3, [pc, #36]	; (d617c <_Z22__fetch_global_Serial1v+0x44>)
   d6158:	4809      	ldr	r0, [pc, #36]	; (d6180 <_Z22__fetch_global_Serial1v+0x48>)
   d615a:	f7ff ffd7 	bl	d610c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d615e:	4620      	mov	r0, r4
   d6160:	f7fd ffa4 	bl	d40ac <__cxa_guard_release>
   d6164:	4a07      	ldr	r2, [pc, #28]	; (d6184 <_Z22__fetch_global_Serial1v+0x4c>)
   d6166:	4908      	ldr	r1, [pc, #32]	; (d6188 <_Z22__fetch_global_Serial1v+0x50>)
   d6168:	4805      	ldr	r0, [pc, #20]	; (d6180 <_Z22__fetch_global_Serial1v+0x48>)
   d616a:	f000 fd51 	bl	d6c10 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d616e:	4804      	ldr	r0, [pc, #16]	; (d6180 <_Z22__fetch_global_Serial1v+0x48>)
   d6170:	b002      	add	sp, #8
   d6172:	bd10      	pop	{r4, pc}
   d6174:	2003e698 	.word	0x2003e698
   d6178:	2003e69c 	.word	0x2003e69c
   d617c:	2003e720 	.word	0x2003e720
   d6180:	2003e7a4 	.word	0x2003e7a4
   d6184:	2003e394 	.word	0x2003e394
   d6188:	000d6091 	.word	0x000d6091

000d618c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d618c:	4770      	bx	lr

000d618e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d618e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6190:	4606      	mov	r6, r0
   d6192:	4615      	mov	r5, r2
   d6194:	460c      	mov	r4, r1
   d6196:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6198:	42bc      	cmp	r4, r7
   d619a:	d006      	beq.n	d61aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d619c:	6833      	ldr	r3, [r6, #0]
   d619e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61a2:	689b      	ldr	r3, [r3, #8]
   d61a4:	4630      	mov	r0, r6
   d61a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d61a8:	e7f6      	b.n	d6198 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d61aa:	4628      	mov	r0, r5
   d61ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d61ae:	7c00      	ldrb	r0, [r0, #16]
   d61b0:	2200      	movs	r2, #0
   d61b2:	f7ff ba07 	b.w	d55c4 <hal_i2c_write>

000d61b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d61b6:	7c00      	ldrb	r0, [r0, #16]
   d61b8:	2100      	movs	r1, #0
   d61ba:	f7ff ba0b 	b.w	d55d4 <hal_i2c_available>

000d61be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d61be:	7c00      	ldrb	r0, [r0, #16]
   d61c0:	2100      	movs	r1, #0
   d61c2:	f7ff ba0f 	b.w	d55e4 <hal_i2c_read>

000d61c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d61c6:	7c00      	ldrb	r0, [r0, #16]
   d61c8:	2100      	movs	r1, #0
   d61ca:	f7ff ba13 	b.w	d55f4 <hal_i2c_peek>

000d61ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d61ce:	7c00      	ldrb	r0, [r0, #16]
   d61d0:	2100      	movs	r1, #0
   d61d2:	f7ff ba17 	b.w	d5604 <hal_i2c_flush>

000d61d6 <_ZN7TwoWireD0Ev>:
   d61d6:	b510      	push	{r4, lr}
   d61d8:	2114      	movs	r1, #20
   d61da:	4604      	mov	r4, r0
   d61dc:	f000 fd1d 	bl	d6c1a <_ZdlPvj>
   d61e0:	4620      	mov	r0, r4
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d61e4:	b510      	push	{r4, lr}
   d61e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61ea:	4604      	mov	r4, r0
   d61ec:	4608      	mov	r0, r1
   d61ee:	2100      	movs	r1, #0
   d61f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61f4:	4b03      	ldr	r3, [pc, #12]	; (d6204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d61f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d61f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d61fa:	4611      	mov	r1, r2
   d61fc:	f7ff fa12 	bl	d5624 <hal_i2c_init>
}
   d6200:	4620      	mov	r0, r4
   d6202:	bd10      	pop	{r4, pc}
   d6204:	000d7fa0 	.word	0x000d7fa0

000d6208 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6208:	2300      	movs	r3, #0
   d620a:	7c00      	ldrb	r0, [r0, #16]
   d620c:	461a      	mov	r2, r3
   d620e:	4619      	mov	r1, r3
   d6210:	f7ff b9c0 	b.w	d5594 <hal_i2c_begin>

000d6214 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6216:	2200      	movs	r2, #0
   d6218:	2314      	movs	r3, #20
   d621a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d621e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6222:	780b      	ldrb	r3, [r1, #0]
   d6224:	f88d 3008 	strb.w	r3, [sp, #8]
   d6228:	684b      	ldr	r3, [r1, #4]
   d622a:	9303      	str	r3, [sp, #12]
   d622c:	68cb      	ldr	r3, [r1, #12]
   d622e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6230:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6232:	7a0b      	ldrb	r3, [r1, #8]
   d6234:	9305      	str	r3, [sp, #20]
   d6236:	a901      	add	r1, sp, #4
   d6238:	f7ff f9fc 	bl	d5634 <hal_i2c_request_ex>
}
   d623c:	b007      	add	sp, #28
   d623e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6242 <_ZN7TwoWire11requestFromEhjh>:
{
   d6242:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6244:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6246:	f88d 1000 	strb.w	r1, [sp]
   d624a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d624e:	9103      	str	r1, [sp, #12]
   d6250:	bf18      	it	ne
   d6252:	2301      	movne	r3, #1
   d6254:	4669      	mov	r1, sp
    size_ = size;
   d6256:	9201      	str	r2, [sp, #4]
   d6258:	f88d 3008 	strb.w	r3, [sp, #8]
   d625c:	f7ff ffda 	bl	d6214 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6260:	b005      	add	sp, #20
   d6262:	f85d fb04 	ldr.w	pc, [sp], #4

000d6266 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d6266:	2301      	movs	r3, #1
   d6268:	f7ff bfeb 	b.w	d6242 <_ZN7TwoWire11requestFromEhjh>

000d626c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d626c:	7c00      	ldrb	r0, [r0, #16]
   d626e:	2200      	movs	r2, #0
   d6270:	f7ff b998 	b.w	d55a4 <hal_i2c_begin_transmission>

000d6274 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6274:	7c00      	ldrb	r0, [r0, #16]
   d6276:	2200      	movs	r2, #0
   d6278:	f7ff b99c 	b.w	d55b4 <hal_i2c_end_transmission>

000d627c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d627c:	2101      	movs	r1, #1
   d627e:	f7ff bff9 	b.w	d6274 <_ZN7TwoWire15endTransmissionEh>

000d6282 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6282:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6284:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6286:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d628a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d628c:	2201      	movs	r2, #1
   d628e:	f04f 33ff 	mov.w	r3, #4294967295
   d6292:	f10d 0107 	add.w	r1, sp, #7
   d6296:	47a0      	blx	r4
}
   d6298:	b002      	add	sp, #8
   d629a:	bd10      	pop	{r4, pc}

000d629c <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d629c:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d629e:	6803      	ldr	r3, [r0, #0]
   d62a0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d62a2:	f04f 33ff 	mov.w	r3, #4294967295
   d62a6:	46a4      	mov	ip, r4
}
   d62a8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d62ac:	4760      	bx	ip

000d62ae <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d62ae:	b513      	push	{r0, r1, r4, lr}
   d62b0:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d62b2:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d62b4:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d62b8:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d62ba:	f10d 0107 	add.w	r1, sp, #7
   d62be:	2201      	movs	r2, #1
   d62c0:	47a0      	blx	r4
}
   d62c2:	b002      	add	sp, #8
   d62c4:	bd10      	pop	{r4, pc}

000d62c6 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d62c6:	4770      	bx	lr

000d62c8 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d62c8:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d62ca:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d62cc:	681a      	ldr	r2, [r3, #0]
   d62ce:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d62d0:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d62d2:	da10      	bge.n	d62f6 <_ZN9TCPClient9connectedEv+0x2e>
   d62d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d62d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d62dc:	429a      	cmp	r2, r3
   d62de:	d10a      	bne.n	d62f6 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d62e0:	6803      	ldr	r3, [r0, #0]
   d62e2:	691b      	ldr	r3, [r3, #16]
   d62e4:	4798      	blx	r3
        if (!rv) {
   d62e6:	4604      	mov	r4, r0
   d62e8:	b928      	cbnz	r0, d62f6 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d62ea:	682b      	ldr	r3, [r5, #0]
   d62ec:	4628      	mov	r0, r5
   d62ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d62f0:	4798      	blx	r3
        rv = available();
   d62f2:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d62f4:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d62f6:	2001      	movs	r0, #1
   d62f8:	e7fc      	b.n	d62f4 <_ZN9TCPClient9connectedEv+0x2c>

000d62fa <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d62fa:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d62fc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d62fe:	43c0      	mvns	r0, r0
   d6300:	0fc0      	lsrs	r0, r0, #31
   d6302:	4770      	bx	lr

000d6304 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6304:	4770      	bx	lr
	...

000d6308 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6308:	4b06      	ldr	r3, [pc, #24]	; (d6324 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d630a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d630c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d630e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6312:	d005      	beq.n	d6320 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6314:	4608      	mov	r0, r1
   d6316:	f000 fc85 	bl	d6c24 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d631a:	2800      	cmp	r0, #0
	return nullptr;
   d631c:	bf08      	it	eq
   d631e:	2400      	moveq	r4, #0
      }
   d6320:	4620      	mov	r0, r4
   d6322:	bd10      	pop	{r4, pc}
   d6324:	000d7eec 	.word	0x000d7eec

000d6328 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6328:	b510      	push	{r4, lr}
   d632a:	21ac      	movs	r1, #172	; 0xac
   d632c:	4604      	mov	r4, r0
   d632e:	f000 fc74 	bl	d6c1a <_ZdlPvj>
   d6332:	4620      	mov	r0, r4
   d6334:	bd10      	pop	{r4, pc}

000d6336 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6336:	f7fd beb2 	b.w	d409e <_ZdlPv>

000d633a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d633a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d633e:	f04f 0800 	mov.w	r8, #0
   d6342:	b086      	sub	sp, #24
   d6344:	461d      	mov	r5, r3
   d6346:	f8c0 8004 	str.w	r8, [r0, #4]
   d634a:	4604      	mov	r4, r0
   d634c:	460e      	mov	r6, r1
   d634e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6350:	4641      	mov	r1, r8
   d6352:	2210      	movs	r2, #16
   d6354:	a802      	add	r0, sp, #8
   d6356:	f001 fa4f 	bl	d77f8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d635a:	1c6b      	adds	r3, r5, #1
   d635c:	d009      	beq.n	d6372 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d635e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6362:	fbb5 f3f0 	udiv	r3, r5, r0
   d6366:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d636a:	fb00 5313 	mls	r3, r0, r3, r5
   d636e:	4358      	muls	r0, r3
   d6370:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6372:	6960      	ldr	r0, [r4, #20]
   d6374:	2310      	movs	r3, #16
   d6376:	9300      	str	r3, [sp, #0]
   d6378:	6800      	ldr	r0, [r0, #0]
   d637a:	ab02      	add	r3, sp, #8
   d637c:	f241 0205 	movw	r2, #4101	; 0x1005
   d6380:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6384:	f7ff f95e 	bl	d5644 <sock_setsockopt>
    if (ret < 0) {
   d6388:	2800      	cmp	r0, #0
   d638a:	da07      	bge.n	d639c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d638c:	f7ff fa8e 	bl	d58ac <__errno>
   d6390:	6803      	ldr	r3, [r0, #0]
   d6392:	6063      	str	r3, [r4, #4]
        return 0;
   d6394:	2000      	movs	r0, #0
}
   d6396:	b006      	add	sp, #24
   d6398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d639c:	6960      	ldr	r0, [r4, #20]
   d639e:	2300      	movs	r3, #0
   d63a0:	6800      	ldr	r0, [r0, #0]
   d63a2:	463a      	mov	r2, r7
   d63a4:	4631      	mov	r1, r6
   d63a6:	f7ff f96d 	bl	d5684 <sock_send>
    if (ret < 0) {
   d63aa:	1e03      	subs	r3, r0, #0
   d63ac:	dbee      	blt.n	d638c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d63ae:	4618      	mov	r0, r3
   d63b0:	e7f1      	b.n	d6396 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d63b4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d63b4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d63b6:	6984      	ldr	r4, [r0, #24]
   d63b8:	4b0a      	ldr	r3, [pc, #40]	; (d63e4 <_ZN9TCPClientD1Ev+0x30>)
   d63ba:	6003      	str	r3, [r0, #0]
   d63bc:	4605      	mov	r5, r0
   d63be:	b17c      	cbz	r4, d63e0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d63c0:	6863      	ldr	r3, [r4, #4]
   d63c2:	3b01      	subs	r3, #1
   d63c4:	6063      	str	r3, [r4, #4]
   d63c6:	b95b      	cbnz	r3, d63e0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d63c8:	6823      	ldr	r3, [r4, #0]
   d63ca:	4620      	mov	r0, r4
   d63cc:	689b      	ldr	r3, [r3, #8]
   d63ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d63d0:	68a3      	ldr	r3, [r4, #8]
   d63d2:	3b01      	subs	r3, #1
   d63d4:	60a3      	str	r3, [r4, #8]
   d63d6:	b91b      	cbnz	r3, d63e0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d63d8:	6823      	ldr	r3, [r4, #0]
   d63da:	4620      	mov	r0, r4
   d63dc:	68db      	ldr	r3, [r3, #12]
   d63de:	4798      	blx	r3
   d63e0:	4628      	mov	r0, r5
   d63e2:	bd38      	pop	{r3, r4, r5, pc}
   d63e4:	000d7ffc 	.word	0x000d7ffc

000d63e8 <_ZN9TCPClientD0Ev>:
   d63e8:	b510      	push	{r4, lr}
   d63ea:	4604      	mov	r4, r0
   d63ec:	f7ff ffe2 	bl	d63b4 <_ZN9TCPClientD1Ev>
   d63f0:	4620      	mov	r0, r4
   d63f2:	211c      	movs	r1, #28
   d63f4:	f000 fc11 	bl	d6c1a <_ZdlPvj>
   d63f8:	4620      	mov	r0, r4
   d63fa:	bd10      	pop	{r4, pc}

000d63fc <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d63fc:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d63fe:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6400:	4b05      	ldr	r3, [pc, #20]	; (d6418 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6402:	4604      	mov	r4, r0
   d6404:	358c      	adds	r5, #140	; 0x8c
   d6406:	f844 3b04 	str.w	r3, [r4], #4
   d640a:	4606      	mov	r6, r0
   d640c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d640e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6410:	682b      	ldr	r3, [r5, #0]
   d6412:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6414:	4630      	mov	r0, r6
   d6416:	bd70      	pop	{r4, r5, r6, pc}
   d6418:	000d7f2c 	.word	0x000d7f2c

000d641c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d641c:	b510      	push	{r4, lr}
   d641e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6420:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6424:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6428:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d642a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d642c:	d005      	beq.n	d643a <_ZN9TCPClient4peekEv+0x1e>
   d642e:	6963      	ldr	r3, [r4, #20]
   d6430:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6434:	4413      	add	r3, r2
   d6436:	7918      	ldrb	r0, [r3, #4]
}
   d6438:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d643a:	6803      	ldr	r3, [r0, #0]
   d643c:	691b      	ldr	r3, [r3, #16]
   d643e:	4798      	blx	r3
   d6440:	2800      	cmp	r0, #0
   d6442:	d1f4      	bne.n	d642e <_ZN9TCPClient4peekEv+0x12>
   d6444:	f04f 30ff 	mov.w	r0, #4294967295
   d6448:	e7f6      	b.n	d6438 <_ZN9TCPClient4peekEv+0x1c>

000d644a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d644a:	b510      	push	{r4, lr}
   d644c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d644e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6452:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6456:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6458:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d645a:	d008      	beq.n	d646e <_ZN9TCPClient4readEv+0x24>
   d645c:	6963      	ldr	r3, [r4, #20]
   d645e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6462:	1c51      	adds	r1, r2, #1
   d6464:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6468:	4413      	add	r3, r2
   d646a:	7918      	ldrb	r0, [r3, #4]
}
   d646c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d646e:	6803      	ldr	r3, [r0, #0]
   d6470:	691b      	ldr	r3, [r3, #16]
   d6472:	4798      	blx	r3
   d6474:	2800      	cmp	r0, #0
   d6476:	d1f1      	bne.n	d645c <_ZN9TCPClient4readEv+0x12>
   d6478:	f04f 30ff 	mov.w	r0, #4294967295
   d647c:	e7f6      	b.n	d646c <_ZN9TCPClient4readEv+0x22>

000d647e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d647e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6480:	6943      	ldr	r3, [r0, #20]
   d6482:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6484:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6488:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d648c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d648e:	4605      	mov	r5, r0
   d6490:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6492:	d016      	beq.n	d64c2 <_ZN9TCPClient4readEPhj+0x44>
   d6494:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6496:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d649a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d649e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d64a0:	42bc      	cmp	r4, r7
   d64a2:	bf28      	it	cs
   d64a4:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d64a6:	3304      	adds	r3, #4
   d64a8:	4622      	mov	r2, r4
   d64aa:	4419      	add	r1, r3
   d64ac:	4630      	mov	r0, r6
   d64ae:	f001 f995 	bl	d77dc <memcpy>
   d64b2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d64b4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d64b8:	4423      	add	r3, r4
   d64ba:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d64be:	4620      	mov	r0, r4
   d64c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d64c2:	6803      	ldr	r3, [r0, #0]
   d64c4:	691b      	ldr	r3, [r3, #16]
   d64c6:	4798      	blx	r3
   d64c8:	2800      	cmp	r0, #0
   d64ca:	d1e3      	bne.n	d6494 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d64cc:	f04f 34ff 	mov.w	r4, #4294967295
   d64d0:	e7f5      	b.n	d64be <_ZN9TCPClient4readEPhj+0x40>

000d64d2 <_ZN9TCPClient12flush_bufferEv>:
   d64d2:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d64d4:	2300      	movs	r3, #0
   d64d6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d64da:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d64dc:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d64e0:	4770      	bx	lr

000d64e2 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d64e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d64e6:	461f      	mov	r7, r3
    stop();
   d64e8:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d64ea:	460c      	mov	r4, r1
    stop();
   d64ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d64ee:	b08a      	sub	sp, #40	; 0x28
   d64f0:	4605      	mov	r5, r0
   d64f2:	4616      	mov	r6, r2
    stop();
   d64f4:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d64f6:	7d23      	ldrb	r3, [r4, #20]
   d64f8:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d64fc:	2b04      	cmp	r3, #4
   d64fe:	bf0c      	ite	eq
   d6500:	2002      	moveq	r0, #2
   d6502:	200a      	movne	r0, #10
   d6504:	2206      	movs	r2, #6
   d6506:	2101      	movs	r1, #1
   d6508:	f7ff f8c4 	bl	d5694 <sock_socket>
   d650c:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6510:	696b      	ldr	r3, [r5, #20]
   d6512:	681b      	ldr	r3, [r3, #0]
   d6514:	2b00      	cmp	r3, #0
   d6516:	da08      	bge.n	d652a <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6518:	682b      	ldr	r3, [r5, #0]
   d651a:	4628      	mov	r0, r5
   d651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d651e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6520:	4798      	blx	r3
}
   d6522:	4620      	mov	r0, r4
   d6524:	b00a      	add	sp, #40	; 0x28
   d6526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d652a:	4628      	mov	r0, r5
   d652c:	f7ff ffd1 	bl	d64d2 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6530:	b1b7      	cbz	r7, d6560 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6532:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6534:	a903      	add	r1, sp, #12
   d6536:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d6538:	9303      	str	r3, [sp, #12]
   d653a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d653e:	f7fe ffa9 	bl	d5494 <if_index_to_name>
   d6542:	2800      	cmp	r0, #0
   d6544:	d1e8      	bne.n	d6518 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6546:	6968      	ldr	r0, [r5, #20]
   d6548:	2306      	movs	r3, #6
   d654a:	9300      	str	r3, [sp, #0]
   d654c:	6800      	ldr	r0, [r0, #0]
   d654e:	ab03      	add	r3, sp, #12
   d6550:	f241 020b 	movw	r2, #4107	; 0x100b
   d6554:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6558:	f7ff f874 	bl	d5644 <sock_setsockopt>
   d655c:	2800      	cmp	r0, #0
   d655e:	d1db      	bne.n	d6518 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6560:	221c      	movs	r2, #28
   d6562:	2100      	movs	r1, #0
   d6564:	a803      	add	r0, sp, #12
   d6566:	f001 f947 	bl	d77f8 <memset>
    if (ip.version() == 4) {
   d656a:	7d23      	ldrb	r3, [r4, #20]
   d656c:	2b04      	cmp	r3, #4
   d656e:	d11d      	bne.n	d65ac <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6570:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6574:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d6576:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d657a:	f7fe ffc3 	bl	d5504 <inet_htons>
   d657e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6582:	6860      	ldr	r0, [r4, #4]
   d6584:	f7fe ffb6 	bl	d54f4 <inet_htonl>
   d6588:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d658a:	696b      	ldr	r3, [r5, #20]
   d658c:	221c      	movs	r2, #28
   d658e:	6818      	ldr	r0, [r3, #0]
   d6590:	a903      	add	r1, sp, #12
   d6592:	f7ff f867 	bl	d5664 <sock_connect>
   d6596:	2800      	cmp	r0, #0
   d6598:	d1be      	bne.n	d6518 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d659a:	3404      	adds	r4, #4
   d659c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d659e:	696d      	ldr	r5, [r5, #20]
   d65a0:	358c      	adds	r5, #140	; 0x8c
   d65a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d65a4:	6823      	ldr	r3, [r4, #0]
   d65a6:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d65a8:	2401      	movs	r4, #1
   d65aa:	e7ba      	b.n	d6522 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d65ac:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d65b0:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d65b2:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d65b6:	f7fe ffa5 	bl	d5504 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d65ba:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d65bc:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d65c0:	1d23      	adds	r3, r4, #4
   d65c2:	f104 0714 	add.w	r7, r4, #20
   d65c6:	6818      	ldr	r0, [r3, #0]
   d65c8:	6859      	ldr	r1, [r3, #4]
   d65ca:	4632      	mov	r2, r6
   d65cc:	c203      	stmia	r2!, {r0, r1}
   d65ce:	3308      	adds	r3, #8
   d65d0:	42bb      	cmp	r3, r7
   d65d2:	4616      	mov	r6, r2
   d65d4:	d1f7      	bne.n	d65c6 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d65d6:	e7d8      	b.n	d658a <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d65d8 <_ZN9TCPClient9availableEv>:
{
   d65d8:	b530      	push	{r4, r5, lr}
   d65da:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d65dc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d65e0:	b08b      	sub	sp, #44	; 0x2c
   d65e2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d65e4:	b12b      	cbz	r3, d65f2 <_ZN9TCPClient9availableEv+0x1a>
   d65e6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d65ea:	429a      	cmp	r2, r3
   d65ec:	d101      	bne.n	d65f2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d65ee:	f7ff ff70 	bl	d64d2 <_ZN9TCPClient12flush_bufferEv>
   d65f2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d65f4:	6808      	ldr	r0, [r1, #0]
   d65f6:	2800      	cmp	r0, #0
   d65f8:	db18      	blt.n	d662c <_ZN9TCPClient9availableEv+0x54>
   d65fa:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d65fe:	2d7f      	cmp	r5, #127	; 0x7f
   d6600:	d814      	bhi.n	d662c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6602:	3104      	adds	r1, #4
   d6604:	2308      	movs	r3, #8
   d6606:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d660a:	4429      	add	r1, r5
   d660c:	f7ff f832 	bl	d5674 <sock_recv>
            if (ret > 0) {
   d6610:	2800      	cmp	r0, #0
   d6612:	dd13      	ble.n	d663c <_ZN9TCPClient9availableEv+0x64>
   d6614:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6616:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d661a:	b90a      	cbnz	r2, d6620 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d661c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6620:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d6622:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6626:	4410      	add	r0, r2
   d6628:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d662c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d662e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d6632:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d6636:	1ac0      	subs	r0, r0, r3
   d6638:	b00b      	add	sp, #44	; 0x2c
   d663a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d663c:	f7ff f936 	bl	d58ac <__errno>
   d6640:	6803      	ldr	r3, [r0, #0]
   d6642:	2b0b      	cmp	r3, #11
   d6644:	d0f2      	beq.n	d662c <_ZN9TCPClient9availableEv+0x54>
   d6646:	f7ff f931 	bl	d58ac <__errno>
   d664a:	6803      	ldr	r3, [r0, #0]
   d664c:	2b0b      	cmp	r3, #11
   d664e:	d0ed      	beq.n	d662c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d6650:	2320      	movs	r3, #32
   d6652:	2500      	movs	r5, #0
   d6654:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6658:	f7ff f928 	bl	d58ac <__errno>
   d665c:	6803      	ldr	r3, [r0, #0]
   d665e:	9301      	str	r3, [sp, #4]
   d6660:	4b08      	ldr	r3, [pc, #32]	; (d6684 <_ZN9TCPClient9availableEv+0xac>)
   d6662:	4909      	ldr	r1, [pc, #36]	; (d6688 <_ZN9TCPClient9availableEv+0xb0>)
   d6664:	9300      	str	r3, [sp, #0]
   d6666:	aa02      	add	r2, sp, #8
   d6668:	462b      	mov	r3, r5
   d666a:	2032      	movs	r0, #50	; 0x32
   d666c:	f7ff f862 	bl	d5734 <log_message>
                    sock_close(d_->sock);
   d6670:	6963      	ldr	r3, [r4, #20]
   d6672:	6818      	ldr	r0, [r3, #0]
   d6674:	f7fe ffee 	bl	d5654 <sock_close>
   d6678:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d667a:	f04f 32ff 	mov.w	r2, #4294967295
   d667e:	601a      	str	r2, [r3, #0]
   d6680:	e7d4      	b.n	d662c <_ZN9TCPClient9availableEv+0x54>
   d6682:	bf00      	nop
   d6684:	000d7fc7 	.word	0x000d7fc7
   d6688:	000d7fc0 	.word	0x000d7fc0

000d668c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d668c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d668e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6690:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6692:	6818      	ldr	r0, [r3, #0]
   d6694:	2800      	cmp	r0, #0
   d6696:	db01      	blt.n	d669c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6698:	f7fe ffdc 	bl	d5654 <sock_close>
   d669c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d669e:	f04f 32ff 	mov.w	r2, #4294967295
   d66a2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d66a4:	6960      	ldr	r0, [r4, #20]
   d66a6:	2211      	movs	r2, #17
   d66a8:	2100      	movs	r1, #0
   d66aa:	308c      	adds	r0, #140	; 0x8c
   d66ac:	f001 f8a4 	bl	d77f8 <memset>
    flush_buffer();
   d66b0:	4620      	mov	r0, r4
}
   d66b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d66b6:	f7ff bf0c 	b.w	d64d2 <_ZN9TCPClient12flush_bufferEv>

000d66ba <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d66ba:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d66bc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d66be:	4604      	mov	r4, r0
          total(0) {
   d66c0:	6001      	str	r1, [r0, #0]
   d66c2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d66c6:	3088      	adds	r0, #136	; 0x88
   d66c8:	f7ff fbfc 	bl	d5ec4 <_ZN9IPAddressC1Ev>
}
   d66cc:	4620      	mov	r0, r4
   d66ce:	bd10      	pop	{r4, pc}

000d66d0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d66d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d66d2:	2300      	movs	r3, #0
   d66d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d66d8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d66dc:	4a0e      	ldr	r2, [pc, #56]	; (d6718 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d66de:	6103      	str	r3, [r0, #16]
   d66e0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d66e2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d66e4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d66e6:	20ac      	movs	r0, #172	; 0xac
   d66e8:	9101      	str	r1, [sp, #4]
   d66ea:	f7fd fcd4 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d66ee:	1e05      	subs	r5, r0, #0
   d66f0:	f105 060c 	add.w	r6, r5, #12
   d66f4:	d008      	beq.n	d6708 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d66f6:	2301      	movs	r3, #1
   d66f8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d66fc:	4b07      	ldr	r3, [pc, #28]	; (d671c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d66fe:	9901      	ldr	r1, [sp, #4]
   d6700:	602b      	str	r3, [r5, #0]
   d6702:	4630      	mov	r0, r6
   d6704:	f7ff ffd9 	bl	d66ba <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6708:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d670a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d670e:	f7ff fee0 	bl	d64d2 <_ZN9TCPClient12flush_bufferEv>
}
   d6712:	b002      	add	sp, #8
   d6714:	bd70      	pop	{r4, r5, r6, pc}
   d6716:	bf00      	nop
   d6718:	000d7ffc 	.word	0x000d7ffc
   d671c:	000d7fe0 	.word	0x000d7fe0

000d6720 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6720:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6722:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6726:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6728:	f7ff ffd2 	bl	d66d0 <_ZN9TCPClientC1Ei>
}
   d672c:	4620      	mov	r0, r4
   d672e:	bd10      	pop	{r4, pc}

000d6730 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6730:	b510      	push	{r4, lr}
   d6732:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6734:	6800      	ldr	r0, [r0, #0]
   d6736:	2800      	cmp	r0, #0
   d6738:	db01      	blt.n	d673e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d673a:	f7fe ff8b 	bl	d5654 <sock_close>
    }
}
   d673e:	4620      	mov	r0, r4
   d6740:	bd10      	pop	{r4, pc}

000d6742 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6742:	300c      	adds	r0, #12
   d6744:	f7ff bff4 	b.w	d6730 <_ZN9TCPClient4DataD1Ev>

000d6748 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d674c:	4698      	mov	r8, r3
    stop();
   d674e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6750:	b093      	sub	sp, #76	; 0x4c
   d6752:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6754:	2400      	movs	r4, #0
    stop();
   d6756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6758:	4606      	mov	r6, r0
   d675a:	4617      	mov	r7, r2
    stop();
   d675c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d675e:	4628      	mov	r0, r5
   d6760:	466b      	mov	r3, sp
   d6762:	4622      	mov	r2, r4
   d6764:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d6766:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6768:	f7fe fe4c 	bl	d5404 <netdb_getaddrinfo>
   d676c:	4605      	mov	r5, r0
   d676e:	2800      	cmp	r0, #0
   d6770:	d163      	bne.n	d683a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d6772:	9b00      	ldr	r3, [sp, #0]
   d6774:	2b00      	cmp	r3, #0
   d6776:	d04b      	beq.n	d6810 <_ZN9TCPClient7connectEPKctm+0xc8>
   d6778:	695b      	ldr	r3, [r3, #20]
   d677a:	2b00      	cmp	r3, #0
   d677c:	d048      	beq.n	d6810 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d677e:	a806      	add	r0, sp, #24
   d6780:	f7ff fba0 	bl	d5ec4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6784:	9b00      	ldr	r3, [sp, #0]
   d6786:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6788:	7863      	ldrb	r3, [r4, #1]
   d678a:	2b02      	cmp	r3, #2
   d678c:	d104      	bne.n	d6798 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d678e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6790:	a806      	add	r0, sp, #24
   d6792:	f7ff f911 	bl	d59b8 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d6796:	e026      	b.n	d67e6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d6798:	2b0a      	cmp	r3, #10
   d679a:	d124      	bne.n	d67e6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d679c:	2211      	movs	r2, #17
   d679e:	4629      	mov	r1, r5
   d67a0:	a801      	add	r0, sp, #4
   d67a2:	f001 f829 	bl	d77f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d67a6:	68a3      	ldr	r3, [r4, #8]
   d67a8:	2b00      	cmp	r3, #0
   d67aa:	d038      	beq.n	d681e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d67ac:	f104 0308 	add.w	r3, r4, #8
   d67b0:	f10d 0c04 	add.w	ip, sp, #4
   d67b4:	3418      	adds	r4, #24
   d67b6:	6818      	ldr	r0, [r3, #0]
   d67b8:	6859      	ldr	r1, [r3, #4]
   d67ba:	4662      	mov	r2, ip
   d67bc:	c203      	stmia	r2!, {r0, r1}
   d67be:	3308      	adds	r3, #8
   d67c0:	42a3      	cmp	r3, r4
   d67c2:	4694      	mov	ip, r2
   d67c4:	d1f7      	bne.n	d67b6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d67c6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d67c8:	a901      	add	r1, sp, #4
   d67ca:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d67cc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d67d0:	f7ff fb86 	bl	d5ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d67d4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d67d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d67dc:	ac07      	add	r4, sp, #28
   d67de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d67e0:	f8dc 3000 	ldr.w	r3, [ip]
   d67e4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d67e6:	a806      	add	r0, sp, #24
   d67e8:	f7ff fb8c 	bl	d5f04 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d67ec:	b180      	cbz	r0, d6810 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d67ee:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d67f0:	ad07      	add	r5, sp, #28
   d67f2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d67f6:	4b12      	ldr	r3, [pc, #72]	; (d6840 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d67f8:	930c      	str	r3, [sp, #48]	; 0x30
   d67fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d67fc:	ac0d      	add	r4, sp, #52	; 0x34
   d67fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6800:	682b      	ldr	r3, [r5, #0]
   d6802:	7023      	strb	r3, [r4, #0]
   d6804:	463a      	mov	r2, r7
   d6806:	4643      	mov	r3, r8
   d6808:	a90c      	add	r1, sp, #48	; 0x30
   d680a:	4630      	mov	r0, r6
   d680c:	47c8      	blx	r9
   d680e:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d6810:	9800      	ldr	r0, [sp, #0]
   d6812:	f7fe fdef 	bl	d53f4 <netdb_freeaddrinfo>
}
   d6816:	4628      	mov	r0, r5
   d6818:	b013      	add	sp, #76	; 0x4c
   d681a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d681e:	68e3      	ldr	r3, [r4, #12]
   d6820:	2b00      	cmp	r3, #0
   d6822:	d1c3      	bne.n	d67ac <_ZN9TCPClient7connectEPKctm+0x64>
   d6824:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6828:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d682c:	f7fe fe62 	bl	d54f4 <inet_htonl>
   d6830:	4581      	cmp	r9, r0
   d6832:	d1bb      	bne.n	d67ac <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d6834:	f104 0114 	add.w	r1, r4, #20
   d6838:	e7aa      	b.n	d6790 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d683a:	4625      	mov	r5, r4
   d683c:	e7e8      	b.n	d6810 <_ZN9TCPClient7connectEPKctm+0xc8>
   d683e:	bf00      	nop
   d6840:	000d7f2c 	.word	0x000d7f2c

000d6844 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6844:	2200      	movs	r2, #0
   d6846:	6840      	ldr	r0, [r0, #4]
   d6848:	4611      	mov	r1, r2
   d684a:	f7fe bfbf 	b.w	d57cc <network_ready>

000d684e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d684e:	2200      	movs	r2, #0
   d6850:	6840      	ldr	r0, [r0, #4]
   d6852:	4611      	mov	r1, r2
   d6854:	f7fe bfda 	b.w	d580c <network_listening>

000d6858 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6858:	2200      	movs	r2, #0
   d685a:	6840      	ldr	r0, [r0, #4]
   d685c:	4611      	mov	r1, r2
   d685e:	f7fe bfe5 	b.w	d582c <network_get_listen_timeout>

000d6862 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6862:	6840      	ldr	r0, [r0, #4]
   d6864:	2200      	movs	r2, #0
   d6866:	f7fe bfd9 	b.w	d581c <network_set_listen_timeout>

000d686a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d686a:	6840      	ldr	r0, [r0, #4]
   d686c:	2200      	movs	r2, #0
   d686e:	f081 0101 	eor.w	r1, r1, #1
   d6872:	f7fe bfc3 	b.w	d57fc <network_listen>

000d6876 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6876:	2300      	movs	r3, #0
   d6878:	6840      	ldr	r0, [r0, #4]
   d687a:	461a      	mov	r2, r3
   d687c:	4619      	mov	r1, r3
   d687e:	f7fe bfb5 	b.w	d57ec <network_off>

000d6882 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6882:	2200      	movs	r2, #0
   d6884:	6840      	ldr	r0, [r0, #4]
   d6886:	4611      	mov	r1, r2
   d6888:	f7fe bf90 	b.w	d57ac <network_connecting>

000d688c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d688c:	6840      	ldr	r0, [r0, #4]
   d688e:	2200      	movs	r2, #0
   d6890:	2102      	movs	r1, #2
   d6892:	f7fe bf93 	b.w	d57bc <network_disconnect>

000d6896 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6896:	2300      	movs	r3, #0
   d6898:	6840      	ldr	r0, [r0, #4]
   d689a:	461a      	mov	r2, r3
   d689c:	f7fe bf7e 	b.w	d579c <network_connect>

000d68a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d68a0:	4b02      	ldr	r3, [pc, #8]	; (d68ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d68a2:	2204      	movs	r2, #4
   d68a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d68a6:	4a02      	ldr	r2, [pc, #8]	; (d68b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d68a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d68aa:	4770      	bx	lr
   d68ac:	2003e7b8 	.word	0x2003e7b8
   d68b0:	000d8048 	.word	0x000d8048

000d68b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d68b4:	2300      	movs	r3, #0
   d68b6:	6840      	ldr	r0, [r0, #4]
   d68b8:	461a      	mov	r2, r3
   d68ba:	f7fe bf6f 	b.w	d579c <network_connect>

000d68be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d68be:	6840      	ldr	r0, [r0, #4]
   d68c0:	2200      	movs	r2, #0
   d68c2:	2102      	movs	r1, #2
   d68c4:	f7fe bf7a 	b.w	d57bc <network_disconnect>

000d68c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d68c8:	2200      	movs	r2, #0
   d68ca:	6840      	ldr	r0, [r0, #4]
   d68cc:	4611      	mov	r1, r2
   d68ce:	f7fe bf6d 	b.w	d57ac <network_connecting>

000d68d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d68d2:	2200      	movs	r2, #0
   d68d4:	6840      	ldr	r0, [r0, #4]
   d68d6:	4611      	mov	r1, r2
   d68d8:	f7fe bf78 	b.w	d57cc <network_ready>

000d68dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d68dc:	2300      	movs	r3, #0
   d68de:	6840      	ldr	r0, [r0, #4]
   d68e0:	461a      	mov	r2, r3
   d68e2:	4619      	mov	r1, r3
   d68e4:	f7fe bf7a 	b.w	d57dc <network_on>

000d68e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d68e8:	2300      	movs	r3, #0
   d68ea:	6840      	ldr	r0, [r0, #4]
   d68ec:	461a      	mov	r2, r3
   d68ee:	4619      	mov	r1, r3
   d68f0:	f7fe bf7c 	b.w	d57ec <network_off>

000d68f4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	2100      	movs	r1, #0
   d68f8:	f7fe bfa0 	b.w	d583c <network_is_on>

000d68fc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d68fc:	6840      	ldr	r0, [r0, #4]
   d68fe:	2100      	movs	r1, #0
   d6900:	f7fe bfa4 	b.w	d584c <network_is_off>

000d6904 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6904:	6840      	ldr	r0, [r0, #4]
   d6906:	2200      	movs	r2, #0
   d6908:	f081 0101 	eor.w	r1, r1, #1
   d690c:	f7fe bf76 	b.w	d57fc <network_listen>

000d6910 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6910:	6840      	ldr	r0, [r0, #4]
   d6912:	2200      	movs	r2, #0
   d6914:	f7fe bf82 	b.w	d581c <network_set_listen_timeout>

000d6918 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6918:	2200      	movs	r2, #0
   d691a:	6840      	ldr	r0, [r0, #4]
   d691c:	4611      	mov	r1, r2
   d691e:	f7fe bf85 	b.w	d582c <network_get_listen_timeout>

000d6922 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6922:	2200      	movs	r2, #0
   d6924:	6840      	ldr	r0, [r0, #4]
   d6926:	4611      	mov	r1, r2
   d6928:	f7fe bf70 	b.w	d580c <network_listening>

000d692c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d692c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6930:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6932:	b095      	sub	sp, #84	; 0x54
   d6934:	4616      	mov	r6, r2
   d6936:	460d      	mov	r5, r1
   d6938:	4607      	mov	r7, r0
    IPAddress addr;
   d693a:	f7ff fac3 	bl	d5ec4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d693e:	4621      	mov	r1, r4
   d6940:	2218      	movs	r2, #24
   d6942:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6944:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6946:	f000 ff57 	bl	d77f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d694a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d694c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6950:	4621      	mov	r1, r4
   d6952:	466b      	mov	r3, sp
   d6954:	aa0c      	add	r2, sp, #48	; 0x30
   d6956:	4630      	mov	r0, r6
   d6958:	f7fe fd54 	bl	d5404 <netdb_getaddrinfo>
    if (!r) {
   d695c:	4604      	mov	r4, r0
   d695e:	2800      	cmp	r0, #0
   d6960:	d14c      	bne.n	d69fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6962:	4602      	mov	r2, r0
   d6964:	2101      	movs	r1, #1
   d6966:	6868      	ldr	r0, [r5, #4]
   d6968:	f7fe ff30 	bl	d57cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d696c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d696e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6970:	4622      	mov	r2, r4
   d6972:	6868      	ldr	r0, [r5, #4]
   d6974:	f7fe ff2a 	bl	d57cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6978:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d697a:	4681      	mov	r9, r0
        bool ok = false;
   d697c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d697e:	2e00      	cmp	r6, #0
   d6980:	d03c      	beq.n	d69fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d6982:	2900      	cmp	r1, #0
   d6984:	d13a      	bne.n	d69fc <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6986:	6873      	ldr	r3, [r6, #4]
   d6988:	2b02      	cmp	r3, #2
   d698a:	d003      	beq.n	d6994 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d698c:	2b0a      	cmp	r3, #10
   d698e:	d011      	beq.n	d69b4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6990:	69f6      	ldr	r6, [r6, #28]
   d6992:	e7f4      	b.n	d697e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6994:	f1b8 0f00 	cmp.w	r8, #0
   d6998:	d00a      	beq.n	d69b0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d699a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d699c:	a806      	add	r0, sp, #24
   d699e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d69a0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d69a2:	f7ff fadf 	bl	d5f64 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d69a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69a8:	1d3c      	adds	r4, r7, #4
   d69aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69ac:	682b      	ldr	r3, [r5, #0]
   d69ae:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d69b0:	4641      	mov	r1, r8
   d69b2:	e7ed      	b.n	d6990 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d69b4:	f1b9 0f00 	cmp.w	r9, #0
   d69b8:	d101      	bne.n	d69be <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d69ba:	4649      	mov	r1, r9
   d69bc:	e7e8      	b.n	d6990 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d69be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d69c0:	2210      	movs	r2, #16
   d69c2:	a801      	add	r0, sp, #4
   d69c4:	f000 ff18 	bl	d77f8 <memset>
                    a.v = 6;
   d69c8:	2306      	movs	r3, #6
   d69ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d69ce:	ad01      	add	r5, sp, #4
   d69d0:	f104 0308 	add.w	r3, r4, #8
   d69d4:	3418      	adds	r4, #24
   d69d6:	6818      	ldr	r0, [r3, #0]
   d69d8:	6859      	ldr	r1, [r3, #4]
   d69da:	462a      	mov	r2, r5
   d69dc:	c203      	stmia	r2!, {r0, r1}
   d69de:	3308      	adds	r3, #8
   d69e0:	42a3      	cmp	r3, r4
   d69e2:	4615      	mov	r5, r2
   d69e4:	d1f7      	bne.n	d69d6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d69e6:	a901      	add	r1, sp, #4
   d69e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d69ea:	ad07      	add	r5, sp, #28
   d69ec:	f7ff fa78 	bl	d5ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d69f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d69f2:	1d3c      	adds	r4, r7, #4
   d69f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d69f6:	682b      	ldr	r3, [r5, #0]
   d69f8:	7023      	strb	r3, [r4, #0]
   d69fa:	e7de      	b.n	d69ba <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d69fc:	9800      	ldr	r0, [sp, #0]
   d69fe:	f7fe fcf9 	bl	d53f4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6a02:	4638      	mov	r0, r7
   d6a04:	b015      	add	sp, #84	; 0x54
   d6a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6a0c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6a0c:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6a0e:	4a03      	ldr	r2, [pc, #12]	; (d6a1c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6a10:	601a      	str	r2, [r3, #0]
   d6a12:	2200      	movs	r2, #0
   d6a14:	605a      	str	r2, [r3, #4]

} // spark
   d6a16:	4770      	bx	lr
   d6a18:	2003e7c0 	.word	0x2003e7c0
   d6a1c:	000d8084 	.word	0x000d8084

000d6a20 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a20:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a22:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6a24:	d902      	bls.n	d6a2c <pinAvailable+0xc>
    return false;
   d6a26:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6a28:	b002      	add	sp, #8
   d6a2a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6a2c:	f1a0 030b 	sub.w	r3, r0, #11
   d6a30:	2b02      	cmp	r3, #2
   d6a32:	d81a      	bhi.n	d6a6a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6a34:	4c17      	ldr	r4, [pc, #92]	; (d6a94 <pinAvailable+0x74>)
   d6a36:	7821      	ldrb	r1, [r4, #0]
   d6a38:	f3bf 8f5b 	dmb	ish
   d6a3c:	f011 0101 	ands.w	r1, r1, #1
   d6a40:	d10b      	bne.n	d6a5a <pinAvailable+0x3a>
   d6a42:	4620      	mov	r0, r4
   d6a44:	9101      	str	r1, [sp, #4]
   d6a46:	f7fd fb2c 	bl	d40a2 <__cxa_guard_acquire>
   d6a4a:	9901      	ldr	r1, [sp, #4]
   d6a4c:	b128      	cbz	r0, d6a5a <pinAvailable+0x3a>
   d6a4e:	4812      	ldr	r0, [pc, #72]	; (d6a98 <pinAvailable+0x78>)
   d6a50:	f7fe ff7a 	bl	d5948 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6a54:	4620      	mov	r0, r4
   d6a56:	f7fd fb29 	bl	d40ac <__cxa_guard_release>
   d6a5a:	4b0f      	ldr	r3, [pc, #60]	; (d6a98 <pinAvailable+0x78>)
   d6a5c:	7818      	ldrb	r0, [r3, #0]
   d6a5e:	f7fe fe29 	bl	d56b4 <hal_spi_is_enabled>
   d6a62:	2800      	cmp	r0, #0
   d6a64:	d1df      	bne.n	d6a26 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6a66:	2001      	movs	r0, #1
   d6a68:	e7de      	b.n	d6a28 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6a6a:	2801      	cmp	r0, #1
   d6a6c:	d809      	bhi.n	d6a82 <pinAvailable+0x62>
   d6a6e:	f000 f8a7 	bl	d6bc0 <_Z19__fetch_global_Wirev>
   d6a72:	2100      	movs	r1, #0
   d6a74:	7c00      	ldrb	r0, [r0, #16]
   d6a76:	f7fe fdcd 	bl	d5614 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6a7a:	f080 0001 	eor.w	r0, r0, #1
   d6a7e:	b2c0      	uxtb	r0, r0
   d6a80:	e7d2      	b.n	d6a28 <pinAvailable+0x8>
   d6a82:	3809      	subs	r0, #9
   d6a84:	2801      	cmp	r0, #1
   d6a86:	d8ee      	bhi.n	d6a66 <pinAvailable+0x46>
   d6a88:	f7ff fb56 	bl	d6138 <_Z22__fetch_global_Serial1v>
   d6a8c:	7c00      	ldrb	r0, [r0, #16]
   d6a8e:	f7fe fd71 	bl	d5574 <hal_usart_is_enabled>
   d6a92:	e7f2      	b.n	d6a7a <pinAvailable+0x5a>
   d6a94:	2003e7c8 	.word	0x2003e7c8
   d6a98:	2003e7cc 	.word	0x2003e7cc

000d6a9c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6a9c:	2823      	cmp	r0, #35	; 0x23
{
   d6a9e:	b538      	push	{r3, r4, r5, lr}
   d6aa0:	4604      	mov	r4, r0
   d6aa2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6aa4:	d80a      	bhi.n	d6abc <pinMode+0x20>
   d6aa6:	29ff      	cmp	r1, #255	; 0xff
   d6aa8:	d008      	beq.n	d6abc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6aaa:	f7ff ffb9 	bl	d6a20 <pinAvailable>
   d6aae:	b128      	cbz	r0, d6abc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6ab0:	4629      	mov	r1, r5
   d6ab2:	4620      	mov	r0, r4
}
   d6ab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ab8:	f7fe bcb4 	b.w	d5424 <HAL_Pin_Mode>
}
   d6abc:	bd38      	pop	{r3, r4, r5, pc}

000d6abe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6abe:	b538      	push	{r3, r4, r5, lr}
   d6ac0:	4604      	mov	r4, r0
   d6ac2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ac4:	f7fe fcb6 	bl	d5434 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ac8:	28ff      	cmp	r0, #255	; 0xff
   d6aca:	d010      	beq.n	d6aee <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6acc:	2806      	cmp	r0, #6
   d6ace:	d804      	bhi.n	d6ada <digitalWrite+0x1c>
   d6ad0:	234d      	movs	r3, #77	; 0x4d
   d6ad2:	fa23 f000 	lsr.w	r0, r3, r0
   d6ad6:	07c3      	lsls	r3, r0, #31
   d6ad8:	d409      	bmi.n	d6aee <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6ada:	4620      	mov	r0, r4
   d6adc:	f7ff ffa0 	bl	d6a20 <pinAvailable>
   d6ae0:	b128      	cbz	r0, d6aee <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ae2:	4629      	mov	r1, r5
   d6ae4:	4620      	mov	r0, r4
}
   d6ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6aea:	f7fe bcab 	b.w	d5444 <HAL_GPIO_Write>
}
   d6aee:	bd38      	pop	{r3, r4, r5, pc}

000d6af0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6af0:	b510      	push	{r4, lr}
   d6af2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6af4:	f7fe fc9e 	bl	d5434 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6af8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6afa:	b2db      	uxtb	r3, r3
   d6afc:	2b01      	cmp	r3, #1
   d6afe:	d908      	bls.n	d6b12 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6b00:	4620      	mov	r0, r4
   d6b02:	f7ff ff8d 	bl	d6a20 <pinAvailable>
   d6b06:	b120      	cbz	r0, d6b12 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6b08:	4620      	mov	r0, r4
}
   d6b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6b0e:	f7fe bca1 	b.w	d5454 <HAL_GPIO_Read>
}
   d6b12:	2000      	movs	r0, #0
   d6b14:	bd10      	pop	{r4, pc}

000d6b16 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6b16:	280d      	cmp	r0, #13
{
   d6b18:	b510      	push	{r4, lr}
   d6b1a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6b1c:	bf9c      	itt	ls
   d6b1e:	340e      	addls	r4, #14
   d6b20:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6b22:	4620      	mov	r0, r4
   d6b24:	f7ff ff7c 	bl	d6a20 <pinAvailable>
   d6b28:	b150      	cbz	r0, d6b40 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6b2a:	2103      	movs	r1, #3
   d6b2c:	4620      	mov	r0, r4
   d6b2e:	f7fe fc71 	bl	d5414 <HAL_Validate_Pin_Function>
   d6b32:	2803      	cmp	r0, #3
   d6b34:	d104      	bne.n	d6b40 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d6b36:	4620      	mov	r0, r4
}
   d6b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d6b3c:	f7fe bc9a 	b.w	d5474 <hal_adc_read>
}
   d6b40:	2000      	movs	r0, #0
   d6b42:	bd10      	pop	{r4, pc}

000d6b44 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6b44:	b538      	push	{r3, r4, r5, lr}
   d6b46:	4604      	mov	r4, r0
   d6b48:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6b4a:	f7ff ff69 	bl	d6a20 <pinAvailable>
   d6b4e:	b1f0      	cbz	r0, d6b8e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6b50:	2104      	movs	r1, #4
   d6b52:	4620      	mov	r0, r4
   d6b54:	f7fe fc5e 	bl	d5414 <HAL_Validate_Pin_Function>
   d6b58:	2804      	cmp	r0, #4
   d6b5a:	d105      	bne.n	d6b68 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6b5c:	b2a9      	uxth	r1, r5
   d6b5e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6b64:	f7fe bc7e 	b.w	d5464 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6b68:	2102      	movs	r1, #2
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	f7fe fc52 	bl	d5414 <HAL_Validate_Pin_Function>
   d6b70:	2802      	cmp	r0, #2
   d6b72:	d10c      	bne.n	d6b8e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b74:	4620      	mov	r0, r4
   d6b76:	f7fe fc5d 	bl	d5434 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6b7a:	2801      	cmp	r0, #1
   d6b7c:	d001      	beq.n	d6b82 <_Z11analogWritetm+0x3e>
   d6b7e:	2804      	cmp	r0, #4
   d6b80:	d105      	bne.n	d6b8e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6b82:	4629      	mov	r1, r5
   d6b84:	4620      	mov	r0, r4
}
   d6b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d6b8a:	f7fe bc7b 	b.w	d5484 <hal_pwm_write_ext>
}
   d6b8e:	bd38      	pop	{r3, r4, r5, pc}

000d6b90 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6b90:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6b92:	2300      	movs	r3, #0
   d6b94:	2520      	movs	r5, #32
   d6b96:	8043      	strh	r3, [r0, #2]
   d6b98:	2314      	movs	r3, #20
{
   d6b9a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6b9c:	8003      	strh	r3, [r0, #0]
   d6b9e:	6085      	str	r5, [r0, #8]
   d6ba0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ba2:	4906      	ldr	r1, [pc, #24]	; (d6bbc <_Z17acquireWireBufferv+0x2c>)
   d6ba4:	4628      	mov	r0, r5
   d6ba6:	f000 f83a 	bl	d6c1e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6baa:	4904      	ldr	r1, [pc, #16]	; (d6bbc <_Z17acquireWireBufferv+0x2c>)
	};
   d6bac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bae:	4628      	mov	r0, r5
   d6bb0:	f000 f835 	bl	d6c1e <_ZnajRKSt9nothrow_t>
	};
   d6bb4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6bb6:	4620      	mov	r0, r4
   d6bb8:	bd38      	pop	{r3, r4, r5, pc}
   d6bba:	bf00      	nop
   d6bbc:	000d80b8 	.word	0x000d80b8

000d6bc0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6bc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6bc2:	4d0f      	ldr	r5, [pc, #60]	; (d6c00 <_Z19__fetch_global_Wirev+0x40>)
   d6bc4:	7829      	ldrb	r1, [r5, #0]
   d6bc6:	f3bf 8f5b 	dmb	ish
   d6bca:	f011 0401 	ands.w	r4, r1, #1
{
   d6bce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6bd0:	d113      	bne.n	d6bfa <_Z19__fetch_global_Wirev+0x3a>
   d6bd2:	4628      	mov	r0, r5
   d6bd4:	f7fd fa65 	bl	d40a2 <__cxa_guard_acquire>
   d6bd8:	b178      	cbz	r0, d6bfa <_Z19__fetch_global_Wirev+0x3a>
   d6bda:	a801      	add	r0, sp, #4
   d6bdc:	f7ff ffd8 	bl	d6b90 <_Z17acquireWireBufferv>
   d6be0:	aa01      	add	r2, sp, #4
   d6be2:	4621      	mov	r1, r4
   d6be4:	4807      	ldr	r0, [pc, #28]	; (d6c04 <_Z19__fetch_global_Wirev+0x44>)
   d6be6:	f7ff fafd 	bl	d61e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6bea:	4628      	mov	r0, r5
   d6bec:	f7fd fa5e 	bl	d40ac <__cxa_guard_release>
   d6bf0:	4a05      	ldr	r2, [pc, #20]	; (d6c08 <_Z19__fetch_global_Wirev+0x48>)
   d6bf2:	4906      	ldr	r1, [pc, #24]	; (d6c0c <_Z19__fetch_global_Wirev+0x4c>)
   d6bf4:	4803      	ldr	r0, [pc, #12]	; (d6c04 <_Z19__fetch_global_Wirev+0x44>)
   d6bf6:	f000 f80b 	bl	d6c10 <__aeabi_atexit>
	return wire;
}
   d6bfa:	4802      	ldr	r0, [pc, #8]	; (d6c04 <_Z19__fetch_global_Wirev+0x44>)
   d6bfc:	b007      	add	sp, #28
   d6bfe:	bd30      	pop	{r4, r5, pc}
   d6c00:	2003e7d8 	.word	0x2003e7d8
   d6c04:	2003e7dc 	.word	0x2003e7dc
   d6c08:	2003e394 	.word	0x2003e394
   d6c0c:	000d618d 	.word	0x000d618d

000d6c10 <__aeabi_atexit>:
   d6c10:	460b      	mov	r3, r1
   d6c12:	4601      	mov	r1, r0
   d6c14:	4618      	mov	r0, r3
   d6c16:	f000 bdd3 	b.w	d77c0 <__cxa_atexit>

000d6c1a <_ZdlPvj>:
   d6c1a:	f7fd ba40 	b.w	d409e <_ZdlPv>

000d6c1e <_ZnajRKSt9nothrow_t>:
   d6c1e:	f7fd ba3c 	b.w	d409a <_Znaj>
	...

000d6c24 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d6c24:	4901      	ldr	r1, [pc, #4]	; (d6c2c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d6c26:	f000 b8f9 	b.w	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6c2a:	bf00      	nop
   d6c2c:	000d80d4 	.word	0x000d80d4

000d6c30 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d6c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6c32:	2400      	movs	r4, #0
   d6c34:	2310      	movs	r3, #16
   d6c36:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6c3a:	6803      	ldr	r3, [r0, #0]
   d6c3c:	9400      	str	r4, [sp, #0]
   d6c3e:	699e      	ldr	r6, [r3, #24]
   d6c40:	f88d 4004 	strb.w	r4, [sp, #4]
   d6c44:	4615      	mov	r5, r2
   d6c46:	466b      	mov	r3, sp
   d6c48:	6812      	ldr	r2, [r2, #0]
   d6c4a:	47b0      	blx	r6
   d6c4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6c50:	f003 0306 	and.w	r3, r3, #6
   d6c54:	2b06      	cmp	r3, #6
   d6c56:	bf03      	ittte	eq
   d6c58:	9b00      	ldreq	r3, [sp, #0]
   d6c5a:	602b      	streq	r3, [r5, #0]
   d6c5c:	2001      	moveq	r0, #1
   d6c5e:	4620      	movne	r0, r4
   d6c60:	b004      	add	sp, #16
   d6c62:	bd70      	pop	{r4, r5, r6, pc}

000d6c64 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6c64:	9800      	ldr	r0, [sp, #0]
   d6c66:	4290      	cmp	r0, r2
   d6c68:	bf14      	ite	ne
   d6c6a:	2001      	movne	r0, #1
   d6c6c:	2006      	moveq	r0, #6
   d6c6e:	4770      	bx	lr

000d6c70 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d6c70:	b510      	push	{r4, lr}
   d6c72:	4b03      	ldr	r3, [pc, #12]	; (d6c80 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6c74:	6003      	str	r3, [r0, #0]
   d6c76:	4604      	mov	r4, r0
   d6c78:	f000 f8cd 	bl	d6e16 <_ZNSt9type_infoD1Ev>
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	bd10      	pop	{r4, pc}
   d6c80:	000d8114 	.word	0x000d8114

000d6c84 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6c84:	b510      	push	{r4, lr}
   d6c86:	4604      	mov	r4, r0
   d6c88:	f7ff fff2 	bl	d6c70 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6c8c:	4620      	mov	r0, r4
   d6c8e:	2108      	movs	r1, #8
   d6c90:	f7ff ffc3 	bl	d6c1a <_ZdlPvj>
   d6c94:	4620      	mov	r0, r4
   d6c96:	bd10      	pop	{r4, pc}

000d6c98 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c9c:	461f      	mov	r7, r3
   d6c9e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d6ca2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6ca6:	4598      	cmp	r8, r3
   d6ca8:	4606      	mov	r6, r0
   d6caa:	4615      	mov	r5, r2
   d6cac:	d107      	bne.n	d6cbe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6cae:	9907      	ldr	r1, [sp, #28]
   d6cb0:	f000 f8b4 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6cb4:	b118      	cbz	r0, d6cbe <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6cb6:	7165      	strb	r5, [r4, #5]
   d6cb8:	2000      	movs	r0, #0
   d6cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6cbe:	4639      	mov	r1, r7
   d6cc0:	4630      	mov	r0, r6
   d6cc2:	f000 f8ab 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6cc6:	2800      	cmp	r0, #0
   d6cc8:	d0f6      	beq.n	d6cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6cca:	2301      	movs	r3, #1
   d6ccc:	f8c4 8000 	str.w	r8, [r4]
   d6cd0:	7125      	strb	r5, [r4, #4]
   d6cd2:	71a3      	strb	r3, [r4, #6]
   d6cd4:	e7f0      	b.n	d6cb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d6cd6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d6cd6:	b538      	push	{r3, r4, r5, lr}
   d6cd8:	4615      	mov	r5, r2
   d6cda:	461c      	mov	r4, r3
   d6cdc:	f000 f89e 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6ce0:	b120      	cbz	r0, d6cec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d6ce2:	2308      	movs	r3, #8
   d6ce4:	60e3      	str	r3, [r4, #12]
   d6ce6:	2306      	movs	r3, #6
   d6ce8:	6025      	str	r5, [r4, #0]
   d6cea:	7123      	strb	r3, [r4, #4]
   d6cec:	bd38      	pop	{r3, r4, r5, pc}

000d6cee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d6cee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6cf0:	4605      	mov	r5, r0
   d6cf2:	460c      	mov	r4, r1
   d6cf4:	9201      	str	r2, [sp, #4]
   d6cf6:	461e      	mov	r6, r3
   d6cf8:	f000 f890 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6cfc:	b950      	cbnz	r0, d6d14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6cfe:	2e03      	cmp	r6, #3
   d6d00:	d808      	bhi.n	d6d14 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d6d02:	6823      	ldr	r3, [r4, #0]
   d6d04:	9a01      	ldr	r2, [sp, #4]
   d6d06:	695b      	ldr	r3, [r3, #20]
   d6d08:	4629      	mov	r1, r5
   d6d0a:	4620      	mov	r0, r4
   d6d0c:	b002      	add	sp, #8
   d6d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6d12:	4718      	bx	r3
   d6d14:	b002      	add	sp, #8
   d6d16:	bd70      	pop	{r4, r5, r6, pc}

000d6d18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d6d18:	b510      	push	{r4, lr}
   d6d1a:	4b03      	ldr	r3, [pc, #12]	; (d6d28 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d6d1c:	6003      	str	r3, [r0, #0]
   d6d1e:	4604      	mov	r4, r0
   d6d20:	f7ff ffa6 	bl	d6c70 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6d24:	4620      	mov	r0, r4
   d6d26:	bd10      	pop	{r4, pc}
   d6d28:	000d8174 	.word	0x000d8174

000d6d2c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d6d2c:	b510      	push	{r4, lr}
   d6d2e:	4604      	mov	r4, r0
   d6d30:	f7ff fff2 	bl	d6d18 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6d34:	4620      	mov	r0, r4
   d6d36:	210c      	movs	r1, #12
   d6d38:	f7ff ff6f 	bl	d6c1a <_ZdlPvj>
   d6d3c:	4620      	mov	r0, r4
   d6d3e:	bd10      	pop	{r4, pc}

000d6d40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d6d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6d42:	9f08      	ldr	r7, [sp, #32]
   d6d44:	4297      	cmp	r7, r2
   d6d46:	4605      	mov	r5, r0
   d6d48:	460e      	mov	r6, r1
   d6d4a:	4614      	mov	r4, r2
   d6d4c:	d00a      	beq.n	d6d64 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d6d4e:	68a8      	ldr	r0, [r5, #8]
   d6d50:	6802      	ldr	r2, [r0, #0]
   d6d52:	9708      	str	r7, [sp, #32]
   d6d54:	6a15      	ldr	r5, [r2, #32]
   d6d56:	4631      	mov	r1, r6
   d6d58:	4622      	mov	r2, r4
   d6d5a:	46ac      	mov	ip, r5
   d6d5c:	b003      	add	sp, #12
   d6d5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d6d62:	4760      	bx	ip
   d6d64:	4619      	mov	r1, r3
   d6d66:	9301      	str	r3, [sp, #4]
   d6d68:	f000 f858 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6d6c:	9b01      	ldr	r3, [sp, #4]
   d6d6e:	2800      	cmp	r0, #0
   d6d70:	d0ed      	beq.n	d6d4e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d6d72:	2006      	movs	r0, #6
   d6d74:	b003      	add	sp, #12
   d6d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6d78:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d7c:	460d      	mov	r5, r1
   d6d7e:	4619      	mov	r1, r3
   d6d80:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6d84:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6d88:	4681      	mov	r9, r0
   d6d8a:	4617      	mov	r7, r2
   d6d8c:	4698      	mov	r8, r3
   d6d8e:	f000 f845 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6d92:	b190      	cbz	r0, d6dba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6d94:	2d00      	cmp	r5, #0
   d6d96:	6034      	str	r4, [r6, #0]
   d6d98:	7137      	strb	r7, [r6, #4]
   d6d9a:	db09      	blt.n	d6db0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6d9c:	1961      	adds	r1, r4, r5
   d6d9e:	458a      	cmp	sl, r1
   d6da0:	bf0c      	ite	eq
   d6da2:	2106      	moveq	r1, #6
   d6da4:	2101      	movne	r1, #1
   d6da6:	71b1      	strb	r1, [r6, #6]
   d6da8:	2000      	movs	r0, #0
   d6daa:	b001      	add	sp, #4
   d6dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6db0:	3502      	adds	r5, #2
   d6db2:	d1f9      	bne.n	d6da8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6db4:	2301      	movs	r3, #1
   d6db6:	71b3      	strb	r3, [r6, #6]
   d6db8:	e7f6      	b.n	d6da8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6dba:	4554      	cmp	r4, sl
   d6dbc:	d106      	bne.n	d6dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6dbe:	4659      	mov	r1, fp
   d6dc0:	4648      	mov	r0, r9
   d6dc2:	f000 f82b 	bl	d6e1c <_ZNKSt9type_infoeqERKS_>
   d6dc6:	b108      	cbz	r0, d6dcc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6dc8:	7177      	strb	r7, [r6, #5]
   d6dca:	e7ed      	b.n	d6da8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6dcc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d6dd0:	6803      	ldr	r3, [r0, #0]
   d6dd2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d6dd6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d6dda:	69dc      	ldr	r4, [r3, #28]
   d6ddc:	463a      	mov	r2, r7
   d6dde:	4643      	mov	r3, r8
   d6de0:	4629      	mov	r1, r5
   d6de2:	46a4      	mov	ip, r4
   d6de4:	b001      	add	sp, #4
   d6de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6dea:	4760      	bx	ip

000d6dec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d6dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6df0:	4607      	mov	r7, r0
   d6df2:	460c      	mov	r4, r1
   d6df4:	4615      	mov	r5, r2
   d6df6:	461e      	mov	r6, r3
   d6df8:	f7ff ff6d 	bl	d6cd6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d6dfc:	b948      	cbnz	r0, d6e12 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d6dfe:	68b8      	ldr	r0, [r7, #8]
   d6e00:	6803      	ldr	r3, [r0, #0]
   d6e02:	699f      	ldr	r7, [r3, #24]
   d6e04:	462a      	mov	r2, r5
   d6e06:	4633      	mov	r3, r6
   d6e08:	4621      	mov	r1, r4
   d6e0a:	46bc      	mov	ip, r7
   d6e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d6e10:	4760      	bx	ip
   d6e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e16 <_ZNSt9type_infoD1Ev>:
   d6e16:	4770      	bx	lr

000d6e18 <_ZNKSt9type_info14__is_pointer_pEv>:
   d6e18:	2000      	movs	r0, #0
   d6e1a:	4770      	bx	lr

000d6e1c <_ZNKSt9type_infoeqERKS_>:
   d6e1c:	4281      	cmp	r1, r0
   d6e1e:	b508      	push	{r3, lr}
   d6e20:	d00e      	beq.n	d6e40 <_ZNKSt9type_infoeqERKS_+0x24>
   d6e22:	6840      	ldr	r0, [r0, #4]
   d6e24:	7803      	ldrb	r3, [r0, #0]
   d6e26:	2b2a      	cmp	r3, #42	; 0x2a
   d6e28:	d00c      	beq.n	d6e44 <_ZNKSt9type_infoeqERKS_+0x28>
   d6e2a:	6849      	ldr	r1, [r1, #4]
   d6e2c:	780b      	ldrb	r3, [r1, #0]
   d6e2e:	2b2a      	cmp	r3, #42	; 0x2a
   d6e30:	bf08      	it	eq
   d6e32:	3101      	addeq	r1, #1
   d6e34:	f000 fd0c 	bl	d7850 <strcmp>
   d6e38:	fab0 f080 	clz	r0, r0
   d6e3c:	0940      	lsrs	r0, r0, #5
   d6e3e:	bd08      	pop	{r3, pc}
   d6e40:	2001      	movs	r0, #1
   d6e42:	e7fc      	b.n	d6e3e <_ZNKSt9type_infoeqERKS_+0x22>
   d6e44:	2000      	movs	r0, #0
   d6e46:	e7fa      	b.n	d6e3e <_ZNKSt9type_infoeqERKS_+0x22>

000d6e48 <__aeabi_drsub>:
   d6e48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6e4c:	e002      	b.n	d6e54 <__adddf3>
   d6e4e:	bf00      	nop

000d6e50 <__aeabi_dsub>:
   d6e50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6e54 <__adddf3>:
   d6e54:	b530      	push	{r4, r5, lr}
   d6e56:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6e5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6e5e:	ea94 0f05 	teq	r4, r5
   d6e62:	bf08      	it	eq
   d6e64:	ea90 0f02 	teqeq	r0, r2
   d6e68:	bf1f      	itttt	ne
   d6e6a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6e6e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6e72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6e76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6e7a:	f000 80e2 	beq.w	d7042 <__adddf3+0x1ee>
   d6e7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6e82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6e86:	bfb8      	it	lt
   d6e88:	426d      	neglt	r5, r5
   d6e8a:	dd0c      	ble.n	d6ea6 <__adddf3+0x52>
   d6e8c:	442c      	add	r4, r5
   d6e8e:	ea80 0202 	eor.w	r2, r0, r2
   d6e92:	ea81 0303 	eor.w	r3, r1, r3
   d6e96:	ea82 0000 	eor.w	r0, r2, r0
   d6e9a:	ea83 0101 	eor.w	r1, r3, r1
   d6e9e:	ea80 0202 	eor.w	r2, r0, r2
   d6ea2:	ea81 0303 	eor.w	r3, r1, r3
   d6ea6:	2d36      	cmp	r5, #54	; 0x36
   d6ea8:	bf88      	it	hi
   d6eaa:	bd30      	pophi	{r4, r5, pc}
   d6eac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6eb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6eb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6eb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6ebc:	d002      	beq.n	d6ec4 <__adddf3+0x70>
   d6ebe:	4240      	negs	r0, r0
   d6ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6ec4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6ec8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6ecc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6ed0:	d002      	beq.n	d6ed8 <__adddf3+0x84>
   d6ed2:	4252      	negs	r2, r2
   d6ed4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6ed8:	ea94 0f05 	teq	r4, r5
   d6edc:	f000 80a7 	beq.w	d702e <__adddf3+0x1da>
   d6ee0:	f1a4 0401 	sub.w	r4, r4, #1
   d6ee4:	f1d5 0e20 	rsbs	lr, r5, #32
   d6ee8:	db0d      	blt.n	d6f06 <__adddf3+0xb2>
   d6eea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6eee:	fa22 f205 	lsr.w	r2, r2, r5
   d6ef2:	1880      	adds	r0, r0, r2
   d6ef4:	f141 0100 	adc.w	r1, r1, #0
   d6ef8:	fa03 f20e 	lsl.w	r2, r3, lr
   d6efc:	1880      	adds	r0, r0, r2
   d6efe:	fa43 f305 	asr.w	r3, r3, r5
   d6f02:	4159      	adcs	r1, r3
   d6f04:	e00e      	b.n	d6f24 <__adddf3+0xd0>
   d6f06:	f1a5 0520 	sub.w	r5, r5, #32
   d6f0a:	f10e 0e20 	add.w	lr, lr, #32
   d6f0e:	2a01      	cmp	r2, #1
   d6f10:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6f14:	bf28      	it	cs
   d6f16:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6f1a:	fa43 f305 	asr.w	r3, r3, r5
   d6f1e:	18c0      	adds	r0, r0, r3
   d6f20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6f24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6f28:	d507      	bpl.n	d6f3a <__adddf3+0xe6>
   d6f2a:	f04f 0e00 	mov.w	lr, #0
   d6f2e:	f1dc 0c00 	rsbs	ip, ip, #0
   d6f32:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6f36:	eb6e 0101 	sbc.w	r1, lr, r1
   d6f3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6f3e:	d31b      	bcc.n	d6f78 <__adddf3+0x124>
   d6f40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6f44:	d30c      	bcc.n	d6f60 <__adddf3+0x10c>
   d6f46:	0849      	lsrs	r1, r1, #1
   d6f48:	ea5f 0030 	movs.w	r0, r0, rrx
   d6f4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6f50:	f104 0401 	add.w	r4, r4, #1
   d6f54:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6f58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6f5c:	f080 809a 	bcs.w	d7094 <__adddf3+0x240>
   d6f60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6f64:	bf08      	it	eq
   d6f66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6f6a:	f150 0000 	adcs.w	r0, r0, #0
   d6f6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6f72:	ea41 0105 	orr.w	r1, r1, r5
   d6f76:	bd30      	pop	{r4, r5, pc}
   d6f78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6f7c:	4140      	adcs	r0, r0
   d6f7e:	eb41 0101 	adc.w	r1, r1, r1
   d6f82:	3c01      	subs	r4, #1
   d6f84:	bf28      	it	cs
   d6f86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6f8a:	d2e9      	bcs.n	d6f60 <__adddf3+0x10c>
   d6f8c:	f091 0f00 	teq	r1, #0
   d6f90:	bf04      	itt	eq
   d6f92:	4601      	moveq	r1, r0
   d6f94:	2000      	moveq	r0, #0
   d6f96:	fab1 f381 	clz	r3, r1
   d6f9a:	bf08      	it	eq
   d6f9c:	3320      	addeq	r3, #32
   d6f9e:	f1a3 030b 	sub.w	r3, r3, #11
   d6fa2:	f1b3 0220 	subs.w	r2, r3, #32
   d6fa6:	da0c      	bge.n	d6fc2 <__adddf3+0x16e>
   d6fa8:	320c      	adds	r2, #12
   d6faa:	dd08      	ble.n	d6fbe <__adddf3+0x16a>
   d6fac:	f102 0c14 	add.w	ip, r2, #20
   d6fb0:	f1c2 020c 	rsb	r2, r2, #12
   d6fb4:	fa01 f00c 	lsl.w	r0, r1, ip
   d6fb8:	fa21 f102 	lsr.w	r1, r1, r2
   d6fbc:	e00c      	b.n	d6fd8 <__adddf3+0x184>
   d6fbe:	f102 0214 	add.w	r2, r2, #20
   d6fc2:	bfd8      	it	le
   d6fc4:	f1c2 0c20 	rsble	ip, r2, #32
   d6fc8:	fa01 f102 	lsl.w	r1, r1, r2
   d6fcc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6fd0:	bfdc      	itt	le
   d6fd2:	ea41 010c 	orrle.w	r1, r1, ip
   d6fd6:	4090      	lslle	r0, r2
   d6fd8:	1ae4      	subs	r4, r4, r3
   d6fda:	bfa2      	ittt	ge
   d6fdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6fe0:	4329      	orrge	r1, r5
   d6fe2:	bd30      	popge	{r4, r5, pc}
   d6fe4:	ea6f 0404 	mvn.w	r4, r4
   d6fe8:	3c1f      	subs	r4, #31
   d6fea:	da1c      	bge.n	d7026 <__adddf3+0x1d2>
   d6fec:	340c      	adds	r4, #12
   d6fee:	dc0e      	bgt.n	d700e <__adddf3+0x1ba>
   d6ff0:	f104 0414 	add.w	r4, r4, #20
   d6ff4:	f1c4 0220 	rsb	r2, r4, #32
   d6ff8:	fa20 f004 	lsr.w	r0, r0, r4
   d6ffc:	fa01 f302 	lsl.w	r3, r1, r2
   d7000:	ea40 0003 	orr.w	r0, r0, r3
   d7004:	fa21 f304 	lsr.w	r3, r1, r4
   d7008:	ea45 0103 	orr.w	r1, r5, r3
   d700c:	bd30      	pop	{r4, r5, pc}
   d700e:	f1c4 040c 	rsb	r4, r4, #12
   d7012:	f1c4 0220 	rsb	r2, r4, #32
   d7016:	fa20 f002 	lsr.w	r0, r0, r2
   d701a:	fa01 f304 	lsl.w	r3, r1, r4
   d701e:	ea40 0003 	orr.w	r0, r0, r3
   d7022:	4629      	mov	r1, r5
   d7024:	bd30      	pop	{r4, r5, pc}
   d7026:	fa21 f004 	lsr.w	r0, r1, r4
   d702a:	4629      	mov	r1, r5
   d702c:	bd30      	pop	{r4, r5, pc}
   d702e:	f094 0f00 	teq	r4, #0
   d7032:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7036:	bf06      	itte	eq
   d7038:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d703c:	3401      	addeq	r4, #1
   d703e:	3d01      	subne	r5, #1
   d7040:	e74e      	b.n	d6ee0 <__adddf3+0x8c>
   d7042:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7046:	bf18      	it	ne
   d7048:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d704c:	d029      	beq.n	d70a2 <__adddf3+0x24e>
   d704e:	ea94 0f05 	teq	r4, r5
   d7052:	bf08      	it	eq
   d7054:	ea90 0f02 	teqeq	r0, r2
   d7058:	d005      	beq.n	d7066 <__adddf3+0x212>
   d705a:	ea54 0c00 	orrs.w	ip, r4, r0
   d705e:	bf04      	itt	eq
   d7060:	4619      	moveq	r1, r3
   d7062:	4610      	moveq	r0, r2
   d7064:	bd30      	pop	{r4, r5, pc}
   d7066:	ea91 0f03 	teq	r1, r3
   d706a:	bf1e      	ittt	ne
   d706c:	2100      	movne	r1, #0
   d706e:	2000      	movne	r0, #0
   d7070:	bd30      	popne	{r4, r5, pc}
   d7072:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7076:	d105      	bne.n	d7084 <__adddf3+0x230>
   d7078:	0040      	lsls	r0, r0, #1
   d707a:	4149      	adcs	r1, r1
   d707c:	bf28      	it	cs
   d707e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7082:	bd30      	pop	{r4, r5, pc}
   d7084:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7088:	bf3c      	itt	cc
   d708a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d708e:	bd30      	popcc	{r4, r5, pc}
   d7090:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7094:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d709c:	f04f 0000 	mov.w	r0, #0
   d70a0:	bd30      	pop	{r4, r5, pc}
   d70a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d70a6:	bf1a      	itte	ne
   d70a8:	4619      	movne	r1, r3
   d70aa:	4610      	movne	r0, r2
   d70ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d70b0:	bf1c      	itt	ne
   d70b2:	460b      	movne	r3, r1
   d70b4:	4602      	movne	r2, r0
   d70b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d70ba:	bf06      	itte	eq
   d70bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d70c0:	ea91 0f03 	teqeq	r1, r3
   d70c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d70c8:	bd30      	pop	{r4, r5, pc}
   d70ca:	bf00      	nop

000d70cc <__aeabi_ui2d>:
   d70cc:	f090 0f00 	teq	r0, #0
   d70d0:	bf04      	itt	eq
   d70d2:	2100      	moveq	r1, #0
   d70d4:	4770      	bxeq	lr
   d70d6:	b530      	push	{r4, r5, lr}
   d70d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d70dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d70e0:	f04f 0500 	mov.w	r5, #0
   d70e4:	f04f 0100 	mov.w	r1, #0
   d70e8:	e750      	b.n	d6f8c <__adddf3+0x138>
   d70ea:	bf00      	nop

000d70ec <__aeabi_i2d>:
   d70ec:	f090 0f00 	teq	r0, #0
   d70f0:	bf04      	itt	eq
   d70f2:	2100      	moveq	r1, #0
   d70f4:	4770      	bxeq	lr
   d70f6:	b530      	push	{r4, r5, lr}
   d70f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d70fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7100:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7104:	bf48      	it	mi
   d7106:	4240      	negmi	r0, r0
   d7108:	f04f 0100 	mov.w	r1, #0
   d710c:	e73e      	b.n	d6f8c <__adddf3+0x138>
   d710e:	bf00      	nop

000d7110 <__aeabi_f2d>:
   d7110:	0042      	lsls	r2, r0, #1
   d7112:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7116:	ea4f 0131 	mov.w	r1, r1, rrx
   d711a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d711e:	bf1f      	itttt	ne
   d7120:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7124:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7128:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d712c:	4770      	bxne	lr
   d712e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d7132:	bf08      	it	eq
   d7134:	4770      	bxeq	lr
   d7136:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d713a:	bf04      	itt	eq
   d713c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7140:	4770      	bxeq	lr
   d7142:	b530      	push	{r4, r5, lr}
   d7144:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7148:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d714c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7150:	e71c      	b.n	d6f8c <__adddf3+0x138>
   d7152:	bf00      	nop

000d7154 <__aeabi_ul2d>:
   d7154:	ea50 0201 	orrs.w	r2, r0, r1
   d7158:	bf08      	it	eq
   d715a:	4770      	bxeq	lr
   d715c:	b530      	push	{r4, r5, lr}
   d715e:	f04f 0500 	mov.w	r5, #0
   d7162:	e00a      	b.n	d717a <__aeabi_l2d+0x16>

000d7164 <__aeabi_l2d>:
   d7164:	ea50 0201 	orrs.w	r2, r0, r1
   d7168:	bf08      	it	eq
   d716a:	4770      	bxeq	lr
   d716c:	b530      	push	{r4, r5, lr}
   d716e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7172:	d502      	bpl.n	d717a <__aeabi_l2d+0x16>
   d7174:	4240      	negs	r0, r0
   d7176:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d717a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d717e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7182:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7186:	f43f aed8 	beq.w	d6f3a <__adddf3+0xe6>
   d718a:	f04f 0203 	mov.w	r2, #3
   d718e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7192:	bf18      	it	ne
   d7194:	3203      	addne	r2, #3
   d7196:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d719a:	bf18      	it	ne
   d719c:	3203      	addne	r2, #3
   d719e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d71a2:	f1c2 0320 	rsb	r3, r2, #32
   d71a6:	fa00 fc03 	lsl.w	ip, r0, r3
   d71aa:	fa20 f002 	lsr.w	r0, r0, r2
   d71ae:	fa01 fe03 	lsl.w	lr, r1, r3
   d71b2:	ea40 000e 	orr.w	r0, r0, lr
   d71b6:	fa21 f102 	lsr.w	r1, r1, r2
   d71ba:	4414      	add	r4, r2
   d71bc:	e6bd      	b.n	d6f3a <__adddf3+0xe6>
   d71be:	bf00      	nop

000d71c0 <__aeabi_dmul>:
   d71c0:	b570      	push	{r4, r5, r6, lr}
   d71c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71ce:	bf1d      	ittte	ne
   d71d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71d4:	ea94 0f0c 	teqne	r4, ip
   d71d8:	ea95 0f0c 	teqne	r5, ip
   d71dc:	f000 f8de 	bleq	d739c <__aeabi_dmul+0x1dc>
   d71e0:	442c      	add	r4, r5
   d71e2:	ea81 0603 	eor.w	r6, r1, r3
   d71e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d71ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d71ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d71f2:	bf18      	it	ne
   d71f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d71f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d71fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7200:	d038      	beq.n	d7274 <__aeabi_dmul+0xb4>
   d7202:	fba0 ce02 	umull	ip, lr, r0, r2
   d7206:	f04f 0500 	mov.w	r5, #0
   d720a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d720e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7212:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7216:	f04f 0600 	mov.w	r6, #0
   d721a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d721e:	f09c 0f00 	teq	ip, #0
   d7222:	bf18      	it	ne
   d7224:	f04e 0e01 	orrne.w	lr, lr, #1
   d7228:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d722c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7230:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7234:	d204      	bcs.n	d7240 <__aeabi_dmul+0x80>
   d7236:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d723a:	416d      	adcs	r5, r5
   d723c:	eb46 0606 	adc.w	r6, r6, r6
   d7240:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7244:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7248:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d724c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7250:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7254:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7258:	bf88      	it	hi
   d725a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d725e:	d81e      	bhi.n	d729e <__aeabi_dmul+0xde>
   d7260:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7264:	bf08      	it	eq
   d7266:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d726a:	f150 0000 	adcs.w	r0, r0, #0
   d726e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7272:	bd70      	pop	{r4, r5, r6, pc}
   d7274:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7278:	ea46 0101 	orr.w	r1, r6, r1
   d727c:	ea40 0002 	orr.w	r0, r0, r2
   d7280:	ea81 0103 	eor.w	r1, r1, r3
   d7284:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7288:	bfc2      	ittt	gt
   d728a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d728e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7292:	bd70      	popgt	{r4, r5, r6, pc}
   d7294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7298:	f04f 0e00 	mov.w	lr, #0
   d729c:	3c01      	subs	r4, #1
   d729e:	f300 80ab 	bgt.w	d73f8 <__aeabi_dmul+0x238>
   d72a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d72a6:	bfde      	ittt	le
   d72a8:	2000      	movle	r0, #0
   d72aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d72ae:	bd70      	pople	{r4, r5, r6, pc}
   d72b0:	f1c4 0400 	rsb	r4, r4, #0
   d72b4:	3c20      	subs	r4, #32
   d72b6:	da35      	bge.n	d7324 <__aeabi_dmul+0x164>
   d72b8:	340c      	adds	r4, #12
   d72ba:	dc1b      	bgt.n	d72f4 <__aeabi_dmul+0x134>
   d72bc:	f104 0414 	add.w	r4, r4, #20
   d72c0:	f1c4 0520 	rsb	r5, r4, #32
   d72c4:	fa00 f305 	lsl.w	r3, r0, r5
   d72c8:	fa20 f004 	lsr.w	r0, r0, r4
   d72cc:	fa01 f205 	lsl.w	r2, r1, r5
   d72d0:	ea40 0002 	orr.w	r0, r0, r2
   d72d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d72d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d72dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d72e0:	fa21 f604 	lsr.w	r6, r1, r4
   d72e4:	eb42 0106 	adc.w	r1, r2, r6
   d72e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d72ec:	bf08      	it	eq
   d72ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d72f2:	bd70      	pop	{r4, r5, r6, pc}
   d72f4:	f1c4 040c 	rsb	r4, r4, #12
   d72f8:	f1c4 0520 	rsb	r5, r4, #32
   d72fc:	fa00 f304 	lsl.w	r3, r0, r4
   d7300:	fa20 f005 	lsr.w	r0, r0, r5
   d7304:	fa01 f204 	lsl.w	r2, r1, r4
   d7308:	ea40 0002 	orr.w	r0, r0, r2
   d730c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7310:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7314:	f141 0100 	adc.w	r1, r1, #0
   d7318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d731c:	bf08      	it	eq
   d731e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7322:	bd70      	pop	{r4, r5, r6, pc}
   d7324:	f1c4 0520 	rsb	r5, r4, #32
   d7328:	fa00 f205 	lsl.w	r2, r0, r5
   d732c:	ea4e 0e02 	orr.w	lr, lr, r2
   d7330:	fa20 f304 	lsr.w	r3, r0, r4
   d7334:	fa01 f205 	lsl.w	r2, r1, r5
   d7338:	ea43 0302 	orr.w	r3, r3, r2
   d733c:	fa21 f004 	lsr.w	r0, r1, r4
   d7340:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7344:	fa21 f204 	lsr.w	r2, r1, r4
   d7348:	ea20 0002 	bic.w	r0, r0, r2
   d734c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7354:	bf08      	it	eq
   d7356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d735a:	bd70      	pop	{r4, r5, r6, pc}
   d735c:	f094 0f00 	teq	r4, #0
   d7360:	d10f      	bne.n	d7382 <__aeabi_dmul+0x1c2>
   d7362:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7366:	0040      	lsls	r0, r0, #1
   d7368:	eb41 0101 	adc.w	r1, r1, r1
   d736c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7370:	bf08      	it	eq
   d7372:	3c01      	subeq	r4, #1
   d7374:	d0f7      	beq.n	d7366 <__aeabi_dmul+0x1a6>
   d7376:	ea41 0106 	orr.w	r1, r1, r6
   d737a:	f095 0f00 	teq	r5, #0
   d737e:	bf18      	it	ne
   d7380:	4770      	bxne	lr
   d7382:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7386:	0052      	lsls	r2, r2, #1
   d7388:	eb43 0303 	adc.w	r3, r3, r3
   d738c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7390:	bf08      	it	eq
   d7392:	3d01      	subeq	r5, #1
   d7394:	d0f7      	beq.n	d7386 <__aeabi_dmul+0x1c6>
   d7396:	ea43 0306 	orr.w	r3, r3, r6
   d739a:	4770      	bx	lr
   d739c:	ea94 0f0c 	teq	r4, ip
   d73a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d73a4:	bf18      	it	ne
   d73a6:	ea95 0f0c 	teqne	r5, ip
   d73aa:	d00c      	beq.n	d73c6 <__aeabi_dmul+0x206>
   d73ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d73b0:	bf18      	it	ne
   d73b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73b6:	d1d1      	bne.n	d735c <__aeabi_dmul+0x19c>
   d73b8:	ea81 0103 	eor.w	r1, r1, r3
   d73bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d73c0:	f04f 0000 	mov.w	r0, #0
   d73c4:	bd70      	pop	{r4, r5, r6, pc}
   d73c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d73ca:	bf06      	itte	eq
   d73cc:	4610      	moveq	r0, r2
   d73ce:	4619      	moveq	r1, r3
   d73d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d73d4:	d019      	beq.n	d740a <__aeabi_dmul+0x24a>
   d73d6:	ea94 0f0c 	teq	r4, ip
   d73da:	d102      	bne.n	d73e2 <__aeabi_dmul+0x222>
   d73dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d73e0:	d113      	bne.n	d740a <__aeabi_dmul+0x24a>
   d73e2:	ea95 0f0c 	teq	r5, ip
   d73e6:	d105      	bne.n	d73f4 <__aeabi_dmul+0x234>
   d73e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d73ec:	bf1c      	itt	ne
   d73ee:	4610      	movne	r0, r2
   d73f0:	4619      	movne	r1, r3
   d73f2:	d10a      	bne.n	d740a <__aeabi_dmul+0x24a>
   d73f4:	ea81 0103 	eor.w	r1, r1, r3
   d73f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d73fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7400:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7404:	f04f 0000 	mov.w	r0, #0
   d7408:	bd70      	pop	{r4, r5, r6, pc}
   d740a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d740e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7412:	bd70      	pop	{r4, r5, r6, pc}

000d7414 <__aeabi_ddiv>:
   d7414:	b570      	push	{r4, r5, r6, lr}
   d7416:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d741a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d741e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7422:	bf1d      	ittte	ne
   d7424:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7428:	ea94 0f0c 	teqne	r4, ip
   d742c:	ea95 0f0c 	teqne	r5, ip
   d7430:	f000 f8a7 	bleq	d7582 <__aeabi_ddiv+0x16e>
   d7434:	eba4 0405 	sub.w	r4, r4, r5
   d7438:	ea81 0e03 	eor.w	lr, r1, r3
   d743c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7440:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7444:	f000 8088 	beq.w	d7558 <__aeabi_ddiv+0x144>
   d7448:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d744c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7450:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7454:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7458:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d745c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7460:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7464:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7468:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d746c:	429d      	cmp	r5, r3
   d746e:	bf08      	it	eq
   d7470:	4296      	cmpeq	r6, r2
   d7472:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7476:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d747a:	d202      	bcs.n	d7482 <__aeabi_ddiv+0x6e>
   d747c:	085b      	lsrs	r3, r3, #1
   d747e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7482:	1ab6      	subs	r6, r6, r2
   d7484:	eb65 0503 	sbc.w	r5, r5, r3
   d7488:	085b      	lsrs	r3, r3, #1
   d748a:	ea4f 0232 	mov.w	r2, r2, rrx
   d748e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7492:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7496:	ebb6 0e02 	subs.w	lr, r6, r2
   d749a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d749e:	bf22      	ittt	cs
   d74a0:	1ab6      	subcs	r6, r6, r2
   d74a2:	4675      	movcs	r5, lr
   d74a4:	ea40 000c 	orrcs.w	r0, r0, ip
   d74a8:	085b      	lsrs	r3, r3, #1
   d74aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d74ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d74b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74b6:	bf22      	ittt	cs
   d74b8:	1ab6      	subcs	r6, r6, r2
   d74ba:	4675      	movcs	r5, lr
   d74bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d74c0:	085b      	lsrs	r3, r3, #1
   d74c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d74c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d74ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74ce:	bf22      	ittt	cs
   d74d0:	1ab6      	subcs	r6, r6, r2
   d74d2:	4675      	movcs	r5, lr
   d74d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d74d8:	085b      	lsrs	r3, r3, #1
   d74da:	ea4f 0232 	mov.w	r2, r2, rrx
   d74de:	ebb6 0e02 	subs.w	lr, r6, r2
   d74e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d74e6:	bf22      	ittt	cs
   d74e8:	1ab6      	subcs	r6, r6, r2
   d74ea:	4675      	movcs	r5, lr
   d74ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d74f0:	ea55 0e06 	orrs.w	lr, r5, r6
   d74f4:	d018      	beq.n	d7528 <__aeabi_ddiv+0x114>
   d74f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d74fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d74fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7502:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7506:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d750a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d750e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7512:	d1c0      	bne.n	d7496 <__aeabi_ddiv+0x82>
   d7514:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7518:	d10b      	bne.n	d7532 <__aeabi_ddiv+0x11e>
   d751a:	ea41 0100 	orr.w	r1, r1, r0
   d751e:	f04f 0000 	mov.w	r0, #0
   d7522:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7526:	e7b6      	b.n	d7496 <__aeabi_ddiv+0x82>
   d7528:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d752c:	bf04      	itt	eq
   d752e:	4301      	orreq	r1, r0
   d7530:	2000      	moveq	r0, #0
   d7532:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7536:	bf88      	it	hi
   d7538:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d753c:	f63f aeaf 	bhi.w	d729e <__aeabi_dmul+0xde>
   d7540:	ebb5 0c03 	subs.w	ip, r5, r3
   d7544:	bf04      	itt	eq
   d7546:	ebb6 0c02 	subseq.w	ip, r6, r2
   d754a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d754e:	f150 0000 	adcs.w	r0, r0, #0
   d7552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7556:	bd70      	pop	{r4, r5, r6, pc}
   d7558:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d755c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7560:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7564:	bfc2      	ittt	gt
   d7566:	ebd4 050c 	rsbsgt	r5, r4, ip
   d756a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d756e:	bd70      	popgt	{r4, r5, r6, pc}
   d7570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7574:	f04f 0e00 	mov.w	lr, #0
   d7578:	3c01      	subs	r4, #1
   d757a:	e690      	b.n	d729e <__aeabi_dmul+0xde>
   d757c:	ea45 0e06 	orr.w	lr, r5, r6
   d7580:	e68d      	b.n	d729e <__aeabi_dmul+0xde>
   d7582:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7586:	ea94 0f0c 	teq	r4, ip
   d758a:	bf08      	it	eq
   d758c:	ea95 0f0c 	teqeq	r5, ip
   d7590:	f43f af3b 	beq.w	d740a <__aeabi_dmul+0x24a>
   d7594:	ea94 0f0c 	teq	r4, ip
   d7598:	d10a      	bne.n	d75b0 <__aeabi_ddiv+0x19c>
   d759a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d759e:	f47f af34 	bne.w	d740a <__aeabi_dmul+0x24a>
   d75a2:	ea95 0f0c 	teq	r5, ip
   d75a6:	f47f af25 	bne.w	d73f4 <__aeabi_dmul+0x234>
   d75aa:	4610      	mov	r0, r2
   d75ac:	4619      	mov	r1, r3
   d75ae:	e72c      	b.n	d740a <__aeabi_dmul+0x24a>
   d75b0:	ea95 0f0c 	teq	r5, ip
   d75b4:	d106      	bne.n	d75c4 <__aeabi_ddiv+0x1b0>
   d75b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d75ba:	f43f aefd 	beq.w	d73b8 <__aeabi_dmul+0x1f8>
   d75be:	4610      	mov	r0, r2
   d75c0:	4619      	mov	r1, r3
   d75c2:	e722      	b.n	d740a <__aeabi_dmul+0x24a>
   d75c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d75c8:	bf18      	it	ne
   d75ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d75ce:	f47f aec5 	bne.w	d735c <__aeabi_dmul+0x19c>
   d75d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d75d6:	f47f af0d 	bne.w	d73f4 <__aeabi_dmul+0x234>
   d75da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d75de:	f47f aeeb 	bne.w	d73b8 <__aeabi_dmul+0x1f8>
   d75e2:	e712      	b.n	d740a <__aeabi_dmul+0x24a>

000d75e4 <__gedf2>:
   d75e4:	f04f 3cff 	mov.w	ip, #4294967295
   d75e8:	e006      	b.n	d75f8 <__cmpdf2+0x4>
   d75ea:	bf00      	nop

000d75ec <__ledf2>:
   d75ec:	f04f 0c01 	mov.w	ip, #1
   d75f0:	e002      	b.n	d75f8 <__cmpdf2+0x4>
   d75f2:	bf00      	nop

000d75f4 <__cmpdf2>:
   d75f4:	f04f 0c01 	mov.w	ip, #1
   d75f8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d75fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7600:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7608:	bf18      	it	ne
   d760a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d760e:	d01b      	beq.n	d7648 <__cmpdf2+0x54>
   d7610:	b001      	add	sp, #4
   d7612:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7616:	bf0c      	ite	eq
   d7618:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d761c:	ea91 0f03 	teqne	r1, r3
   d7620:	bf02      	ittt	eq
   d7622:	ea90 0f02 	teqeq	r0, r2
   d7626:	2000      	moveq	r0, #0
   d7628:	4770      	bxeq	lr
   d762a:	f110 0f00 	cmn.w	r0, #0
   d762e:	ea91 0f03 	teq	r1, r3
   d7632:	bf58      	it	pl
   d7634:	4299      	cmppl	r1, r3
   d7636:	bf08      	it	eq
   d7638:	4290      	cmpeq	r0, r2
   d763a:	bf2c      	ite	cs
   d763c:	17d8      	asrcs	r0, r3, #31
   d763e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7642:	f040 0001 	orr.w	r0, r0, #1
   d7646:	4770      	bx	lr
   d7648:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d764c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7650:	d102      	bne.n	d7658 <__cmpdf2+0x64>
   d7652:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7656:	d107      	bne.n	d7668 <__cmpdf2+0x74>
   d7658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d765c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7660:	d1d6      	bne.n	d7610 <__cmpdf2+0x1c>
   d7662:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7666:	d0d3      	beq.n	d7610 <__cmpdf2+0x1c>
   d7668:	f85d 0b04 	ldr.w	r0, [sp], #4
   d766c:	4770      	bx	lr
   d766e:	bf00      	nop

000d7670 <__aeabi_cdrcmple>:
   d7670:	4684      	mov	ip, r0
   d7672:	4610      	mov	r0, r2
   d7674:	4662      	mov	r2, ip
   d7676:	468c      	mov	ip, r1
   d7678:	4619      	mov	r1, r3
   d767a:	4663      	mov	r3, ip
   d767c:	e000      	b.n	d7680 <__aeabi_cdcmpeq>
   d767e:	bf00      	nop

000d7680 <__aeabi_cdcmpeq>:
   d7680:	b501      	push	{r0, lr}
   d7682:	f7ff ffb7 	bl	d75f4 <__cmpdf2>
   d7686:	2800      	cmp	r0, #0
   d7688:	bf48      	it	mi
   d768a:	f110 0f00 	cmnmi.w	r0, #0
   d768e:	bd01      	pop	{r0, pc}

000d7690 <__aeabi_dcmpeq>:
   d7690:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7694:	f7ff fff4 	bl	d7680 <__aeabi_cdcmpeq>
   d7698:	bf0c      	ite	eq
   d769a:	2001      	moveq	r0, #1
   d769c:	2000      	movne	r0, #0
   d769e:	f85d fb08 	ldr.w	pc, [sp], #8
   d76a2:	bf00      	nop

000d76a4 <__aeabi_dcmplt>:
   d76a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76a8:	f7ff ffea 	bl	d7680 <__aeabi_cdcmpeq>
   d76ac:	bf34      	ite	cc
   d76ae:	2001      	movcc	r0, #1
   d76b0:	2000      	movcs	r0, #0
   d76b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d76b6:	bf00      	nop

000d76b8 <__aeabi_dcmple>:
   d76b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76bc:	f7ff ffe0 	bl	d7680 <__aeabi_cdcmpeq>
   d76c0:	bf94      	ite	ls
   d76c2:	2001      	movls	r0, #1
   d76c4:	2000      	movhi	r0, #0
   d76c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d76ca:	bf00      	nop

000d76cc <__aeabi_dcmpge>:
   d76cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76d0:	f7ff ffce 	bl	d7670 <__aeabi_cdrcmple>
   d76d4:	bf94      	ite	ls
   d76d6:	2001      	movls	r0, #1
   d76d8:	2000      	movhi	r0, #0
   d76da:	f85d fb08 	ldr.w	pc, [sp], #8
   d76de:	bf00      	nop

000d76e0 <__aeabi_dcmpgt>:
   d76e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d76e4:	f7ff ffc4 	bl	d7670 <__aeabi_cdrcmple>
   d76e8:	bf34      	ite	cc
   d76ea:	2001      	movcc	r0, #1
   d76ec:	2000      	movcs	r0, #0
   d76ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d76f2:	bf00      	nop

000d76f4 <__aeabi_dcmpun>:
   d76f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d76f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d76fc:	d102      	bne.n	d7704 <__aeabi_dcmpun+0x10>
   d76fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7702:	d10a      	bne.n	d771a <__aeabi_dcmpun+0x26>
   d7704:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7708:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d770c:	d102      	bne.n	d7714 <__aeabi_dcmpun+0x20>
   d770e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7712:	d102      	bne.n	d771a <__aeabi_dcmpun+0x26>
   d7714:	f04f 0000 	mov.w	r0, #0
   d7718:	4770      	bx	lr
   d771a:	f04f 0001 	mov.w	r0, #1
   d771e:	4770      	bx	lr

000d7720 <__aeabi_d2iz>:
   d7720:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d7724:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7728:	d215      	bcs.n	d7756 <__aeabi_d2iz+0x36>
   d772a:	d511      	bpl.n	d7750 <__aeabi_d2iz+0x30>
   d772c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7730:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7734:	d912      	bls.n	d775c <__aeabi_d2iz+0x3c>
   d7736:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d773a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d773e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7742:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7746:	fa23 f002 	lsr.w	r0, r3, r2
   d774a:	bf18      	it	ne
   d774c:	4240      	negne	r0, r0
   d774e:	4770      	bx	lr
   d7750:	f04f 0000 	mov.w	r0, #0
   d7754:	4770      	bx	lr
   d7756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d775a:	d105      	bne.n	d7768 <__aeabi_d2iz+0x48>
   d775c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d7760:	bf08      	it	eq
   d7762:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7766:	4770      	bx	lr
   d7768:	f04f 0000 	mov.w	r0, #0
   d776c:	4770      	bx	lr
   d776e:	bf00      	nop

000d7770 <__aeabi_d2uiz>:
   d7770:	004a      	lsls	r2, r1, #1
   d7772:	d211      	bcs.n	d7798 <__aeabi_d2uiz+0x28>
   d7774:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7778:	d211      	bcs.n	d779e <__aeabi_d2uiz+0x2e>
   d777a:	d50d      	bpl.n	d7798 <__aeabi_d2uiz+0x28>
   d777c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7780:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7784:	d40e      	bmi.n	d77a4 <__aeabi_d2uiz+0x34>
   d7786:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d778a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d778e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7792:	fa23 f002 	lsr.w	r0, r3, r2
   d7796:	4770      	bx	lr
   d7798:	f04f 0000 	mov.w	r0, #0
   d779c:	4770      	bx	lr
   d779e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d77a2:	d102      	bne.n	d77aa <__aeabi_d2uiz+0x3a>
   d77a4:	f04f 30ff 	mov.w	r0, #4294967295
   d77a8:	4770      	bx	lr
   d77aa:	f04f 0000 	mov.w	r0, #0
   d77ae:	4770      	bx	lr

000d77b0 <atoi>:
   d77b0:	220a      	movs	r2, #10
   d77b2:	2100      	movs	r1, #0
   d77b4:	f000 b8ec 	b.w	d7990 <strtol>

000d77b8 <atol>:
   d77b8:	220a      	movs	r2, #10
   d77ba:	2100      	movs	r1, #0
   d77bc:	f000 b8e8 	b.w	d7990 <strtol>

000d77c0 <__cxa_atexit>:
   d77c0:	b510      	push	{r4, lr}
   d77c2:	4c05      	ldr	r4, [pc, #20]	; (d77d8 <__cxa_atexit+0x18>)
   d77c4:	4613      	mov	r3, r2
   d77c6:	b12c      	cbz	r4, d77d4 <__cxa_atexit+0x14>
   d77c8:	460a      	mov	r2, r1
   d77ca:	4601      	mov	r1, r0
   d77cc:	2002      	movs	r0, #2
   d77ce:	f3af 8000 	nop.w
   d77d2:	bd10      	pop	{r4, pc}
   d77d4:	4620      	mov	r0, r4
   d77d6:	e7fc      	b.n	d77d2 <__cxa_atexit+0x12>
   d77d8:	00000000 	.word	0x00000000

000d77dc <memcpy>:
   d77dc:	440a      	add	r2, r1
   d77de:	4291      	cmp	r1, r2
   d77e0:	f100 33ff 	add.w	r3, r0, #4294967295
   d77e4:	d100      	bne.n	d77e8 <memcpy+0xc>
   d77e6:	4770      	bx	lr
   d77e8:	b510      	push	{r4, lr}
   d77ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77f2:	4291      	cmp	r1, r2
   d77f4:	d1f9      	bne.n	d77ea <memcpy+0xe>
   d77f6:	bd10      	pop	{r4, pc}

000d77f8 <memset>:
   d77f8:	4402      	add	r2, r0
   d77fa:	4603      	mov	r3, r0
   d77fc:	4293      	cmp	r3, r2
   d77fe:	d100      	bne.n	d7802 <memset+0xa>
   d7800:	4770      	bx	lr
   d7802:	f803 1b01 	strb.w	r1, [r3], #1
   d7806:	e7f9      	b.n	d77fc <memset+0x4>

000d7808 <srand>:
   d7808:	b538      	push	{r3, r4, r5, lr}
   d780a:	4b0d      	ldr	r3, [pc, #52]	; (d7840 <srand+0x38>)
   d780c:	681d      	ldr	r5, [r3, #0]
   d780e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7810:	4604      	mov	r4, r0
   d7812:	b97b      	cbnz	r3, d7834 <srand+0x2c>
   d7814:	2018      	movs	r0, #24
   d7816:	f7fe f831 	bl	d587c <malloc>
   d781a:	4a0a      	ldr	r2, [pc, #40]	; (d7844 <srand+0x3c>)
   d781c:	4b0a      	ldr	r3, [pc, #40]	; (d7848 <srand+0x40>)
   d781e:	63a8      	str	r0, [r5, #56]	; 0x38
   d7820:	e9c0 2300 	strd	r2, r3, [r0]
   d7824:	4b09      	ldr	r3, [pc, #36]	; (d784c <srand+0x44>)
   d7826:	6083      	str	r3, [r0, #8]
   d7828:	230b      	movs	r3, #11
   d782a:	8183      	strh	r3, [r0, #12]
   d782c:	2201      	movs	r2, #1
   d782e:	2300      	movs	r3, #0
   d7830:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7834:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7836:	2200      	movs	r2, #0
   d7838:	611c      	str	r4, [r3, #16]
   d783a:	615a      	str	r2, [r3, #20]
   d783c:	bd38      	pop	{r3, r4, r5, pc}
   d783e:	bf00      	nop
   d7840:	2003e330 	.word	0x2003e330
   d7844:	abcd330e 	.word	0xabcd330e
   d7848:	e66d1234 	.word	0xe66d1234
   d784c:	0005deec 	.word	0x0005deec

000d7850 <strcmp>:
   d7850:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7854:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7858:	2a01      	cmp	r2, #1
   d785a:	bf28      	it	cs
   d785c:	429a      	cmpcs	r2, r3
   d785e:	d0f7      	beq.n	d7850 <strcmp>
   d7860:	1ad0      	subs	r0, r2, r3
   d7862:	4770      	bx	lr

000d7864 <strlen>:
   d7864:	4603      	mov	r3, r0
   d7866:	f813 2b01 	ldrb.w	r2, [r3], #1
   d786a:	2a00      	cmp	r2, #0
   d786c:	d1fb      	bne.n	d7866 <strlen+0x2>
   d786e:	1a18      	subs	r0, r3, r0
   d7870:	3801      	subs	r0, #1
   d7872:	4770      	bx	lr

000d7874 <strncpy>:
   d7874:	b510      	push	{r4, lr}
   d7876:	3901      	subs	r1, #1
   d7878:	4603      	mov	r3, r0
   d787a:	b132      	cbz	r2, d788a <strncpy+0x16>
   d787c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7880:	f803 4b01 	strb.w	r4, [r3], #1
   d7884:	3a01      	subs	r2, #1
   d7886:	2c00      	cmp	r4, #0
   d7888:	d1f7      	bne.n	d787a <strncpy+0x6>
   d788a:	441a      	add	r2, r3
   d788c:	2100      	movs	r1, #0
   d788e:	4293      	cmp	r3, r2
   d7890:	d100      	bne.n	d7894 <strncpy+0x20>
   d7892:	bd10      	pop	{r4, pc}
   d7894:	f803 1b01 	strb.w	r1, [r3], #1
   d7898:	e7f9      	b.n	d788e <strncpy+0x1a>
	...

000d789c <_strtol_l.isra.0>:
   d789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d78a0:	4e3a      	ldr	r6, [pc, #232]	; (d798c <_strtol_l.isra.0+0xf0>)
   d78a2:	4686      	mov	lr, r0
   d78a4:	468c      	mov	ip, r1
   d78a6:	4660      	mov	r0, ip
   d78a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d78ac:	5da5      	ldrb	r5, [r4, r6]
   d78ae:	f015 0508 	ands.w	r5, r5, #8
   d78b2:	d1f8      	bne.n	d78a6 <_strtol_l.isra.0+0xa>
   d78b4:	2c2d      	cmp	r4, #45	; 0x2d
   d78b6:	d133      	bne.n	d7920 <_strtol_l.isra.0+0x84>
   d78b8:	f89c 4000 	ldrb.w	r4, [ip]
   d78bc:	f04f 0801 	mov.w	r8, #1
   d78c0:	f100 0c02 	add.w	ip, r0, #2
   d78c4:	2b00      	cmp	r3, #0
   d78c6:	d05c      	beq.n	d7982 <_strtol_l.isra.0+0xe6>
   d78c8:	2b10      	cmp	r3, #16
   d78ca:	d10c      	bne.n	d78e6 <_strtol_l.isra.0+0x4a>
   d78cc:	2c30      	cmp	r4, #48	; 0x30
   d78ce:	d10a      	bne.n	d78e6 <_strtol_l.isra.0+0x4a>
   d78d0:	f89c 0000 	ldrb.w	r0, [ip]
   d78d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d78d8:	2858      	cmp	r0, #88	; 0x58
   d78da:	d14d      	bne.n	d7978 <_strtol_l.isra.0+0xdc>
   d78dc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d78e0:	2310      	movs	r3, #16
   d78e2:	f10c 0c02 	add.w	ip, ip, #2
   d78e6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d78ea:	3f01      	subs	r7, #1
   d78ec:	2600      	movs	r6, #0
   d78ee:	fbb7 f9f3 	udiv	r9, r7, r3
   d78f2:	4630      	mov	r0, r6
   d78f4:	fb03 7a19 	mls	sl, r3, r9, r7
   d78f8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d78fc:	2d09      	cmp	r5, #9
   d78fe:	d818      	bhi.n	d7932 <_strtol_l.isra.0+0x96>
   d7900:	462c      	mov	r4, r5
   d7902:	42a3      	cmp	r3, r4
   d7904:	dd24      	ble.n	d7950 <_strtol_l.isra.0+0xb4>
   d7906:	1c75      	adds	r5, r6, #1
   d7908:	d007      	beq.n	d791a <_strtol_l.isra.0+0x7e>
   d790a:	4581      	cmp	r9, r0
   d790c:	d31d      	bcc.n	d794a <_strtol_l.isra.0+0xae>
   d790e:	d101      	bne.n	d7914 <_strtol_l.isra.0+0x78>
   d7910:	45a2      	cmp	sl, r4
   d7912:	db1a      	blt.n	d794a <_strtol_l.isra.0+0xae>
   d7914:	fb00 4003 	mla	r0, r0, r3, r4
   d7918:	2601      	movs	r6, #1
   d791a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d791e:	e7eb      	b.n	d78f8 <_strtol_l.isra.0+0x5c>
   d7920:	2c2b      	cmp	r4, #43	; 0x2b
   d7922:	bf08      	it	eq
   d7924:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7928:	46a8      	mov	r8, r5
   d792a:	bf08      	it	eq
   d792c:	f100 0c02 	addeq.w	ip, r0, #2
   d7930:	e7c8      	b.n	d78c4 <_strtol_l.isra.0+0x28>
   d7932:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7936:	2d19      	cmp	r5, #25
   d7938:	d801      	bhi.n	d793e <_strtol_l.isra.0+0xa2>
   d793a:	3c37      	subs	r4, #55	; 0x37
   d793c:	e7e1      	b.n	d7902 <_strtol_l.isra.0+0x66>
   d793e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d7942:	2d19      	cmp	r5, #25
   d7944:	d804      	bhi.n	d7950 <_strtol_l.isra.0+0xb4>
   d7946:	3c57      	subs	r4, #87	; 0x57
   d7948:	e7db      	b.n	d7902 <_strtol_l.isra.0+0x66>
   d794a:	f04f 36ff 	mov.w	r6, #4294967295
   d794e:	e7e4      	b.n	d791a <_strtol_l.isra.0+0x7e>
   d7950:	1c73      	adds	r3, r6, #1
   d7952:	d106      	bne.n	d7962 <_strtol_l.isra.0+0xc6>
   d7954:	2322      	movs	r3, #34	; 0x22
   d7956:	f8ce 3000 	str.w	r3, [lr]
   d795a:	4638      	mov	r0, r7
   d795c:	b942      	cbnz	r2, d7970 <_strtol_l.isra.0+0xd4>
   d795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7962:	f1b8 0f00 	cmp.w	r8, #0
   d7966:	d000      	beq.n	d796a <_strtol_l.isra.0+0xce>
   d7968:	4240      	negs	r0, r0
   d796a:	2a00      	cmp	r2, #0
   d796c:	d0f7      	beq.n	d795e <_strtol_l.isra.0+0xc2>
   d796e:	b10e      	cbz	r6, d7974 <_strtol_l.isra.0+0xd8>
   d7970:	f10c 31ff 	add.w	r1, ip, #4294967295
   d7974:	6011      	str	r1, [r2, #0]
   d7976:	e7f2      	b.n	d795e <_strtol_l.isra.0+0xc2>
   d7978:	2430      	movs	r4, #48	; 0x30
   d797a:	2b00      	cmp	r3, #0
   d797c:	d1b3      	bne.n	d78e6 <_strtol_l.isra.0+0x4a>
   d797e:	2308      	movs	r3, #8
   d7980:	e7b1      	b.n	d78e6 <_strtol_l.isra.0+0x4a>
   d7982:	2c30      	cmp	r4, #48	; 0x30
   d7984:	d0a4      	beq.n	d78d0 <_strtol_l.isra.0+0x34>
   d7986:	230a      	movs	r3, #10
   d7988:	e7ad      	b.n	d78e6 <_strtol_l.isra.0+0x4a>
   d798a:	bf00      	nop
   d798c:	000d81ae 	.word	0x000d81ae

000d7990 <strtol>:
   d7990:	4613      	mov	r3, r2
   d7992:	460a      	mov	r2, r1
   d7994:	4601      	mov	r1, r0
   d7996:	4802      	ldr	r0, [pc, #8]	; (d79a0 <strtol+0x10>)
   d7998:	6800      	ldr	r0, [r0, #0]
   d799a:	f7ff bf7f 	b.w	d789c <_strtol_l.isra.0>
   d799e:	bf00      	nop
   d79a0:	2003e330 	.word	0x2003e330

000d79a4 <dynalib_user>:
   d79a4:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d79b4:	00000000 25006925 6900696c 756f006e     ....%i.%li.in.ou
   d79c4:	77700074 7764006d 00776100 63307367     t.pwm.dw.aw.gs0c
   d79d4:	2d715a33 6b62766f 31507770 61703747     3Zq-ovbkpwP1G7pa
   d79e4:	5f4b484f 52664850 73554e6a 65685400     OHK_PHfRjNUs.The
   d79f4:	67696c20 6c207468 6c657665 73616820      light level has
   d7a04:	73617020 20646573 20656874 20746573      passed the set 
   d7a14:	6e696f70 76007374 32250077 0066372e     points.vw.%2.7f.
   d7a24:	20007276 2f2f2043 46200020 69460020     vr. C // . F .Fi
   d7a34:	20747372 6e696f70 65732074 6f742074     rst point set to
   d7a44:	5300203a 6e6f6365 6f702064 20746e69     : .Second point 
   d7a54:	20746573 203a6f74                        set to: .

000d7a5d <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d7a5d:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d7a6d:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d7a7d:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d7a8d:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d7a9d:	32203520 20313230 343a3230 33343a39      5 2021 02:49:43
   d7aad:	                                         ...

000d7ab0 <_ZL22BlynkReadHandlerVector>:
   d7ab0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7ac0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7ad0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7ae0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7af0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b00:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b10:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b20:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b30:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b40:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b50:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b60:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b70:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b80:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7b90:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7ba0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7bb0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7bc0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7bd0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7be0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7bf0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c00:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c10:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c20:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c30:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c40:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c50:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c60:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c70:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c80:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7c90:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..
   d7ca0:	000d53c7 000d53c7 000d53c7 000d53c7     .S...S...S...S..

000d7cb0 <_ZL23BlynkWriteHandlerVector>:
   d7cb0:	000d53c9 000d53c9 000d53c9 000d41e9     .S...S...S...A..
   d7cc0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7cd0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7ce0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7cf0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d00:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d10:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d20:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d30:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d40:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d50:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d60:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d70:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d80:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7d90:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7da0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7db0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7dc0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7dd0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7de0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7df0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e00:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e10:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e20:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e30:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e40:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e50:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e60:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e70:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e80:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7e90:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..
   d7ea0:	000d53c9 000d53c9 000d53c9 000d53c9     .S...S...S...S..

000d7eb0 <_ZTVN5spark13EthernetClassE>:
	...
   d7eb8:	000d592b 000d5921 000d5917 000d590d     +Y..!Y...Y...Y..
   d7ec8:	000d5901 000d58f5 000d68f5 000d68fd     .Y...X...h...h..
   d7ed8:	000d58e9 000d58e1 000d58d7 000d58cd     .X...X...X...X..
   d7ee8:	000d692d                                -i..

000d7eec <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d7ef4:	006e616e 00666e69 0066766f 7061002e     nan.inf.ovf...ap
   d7f04:	59250070 2d6d252d 25546425 4d253a48     p.%Y-%m-%dT%H:%M
   d7f14:	2553253a 7361007a 6d697463 00000065     :%S%z.asctime...

000d7f24 <_ZTV9IPAddress>:
	...
   d7f2c:	000d5e61 000d5e51 000d5e53              a^..Q^..S^..

000d7f38 <_ZTV9USBSerial>:
	...
   d7f40:	000d5f85 000d5fed 000d5fc3 000d5a21     ._..._..._..!Z..
   d7f50:	000d5fb5 000d5f87 000d5f97 000d5fe7     ._..._..._..._..
   d7f60:	000d5fa7 000d5f81                       ._..._..

000d7f68 <_ZTV11USARTSerial>:
	...
   d7f70:	000d6091 000d60fd 000d60d5 000d5a21     .`...`...`..!Z..
   d7f80:	000d60a5 000d60c1 000d60b3 000d60cf     .`...`...`...`..
   d7f90:	000d6093 000d6097                       .`...`..

000d7f98 <_ZTV7TwoWire>:
	...
   d7fa0:	000d618d 000d61d7 000d61af 000d618f     .a...a...a...a..
   d7fb0:	000d61b7 000d61bf 000d61c7 000d61cf     .a...a...a...a..
   d7fc0:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d7fd0:	203d2072 00006425                       r = %d..

000d7fd8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7fe0:	000d6305 000d6329 000d6743 000d6337     .c..)c..Cg..7c..
   d7ff0:	000d6309                                .c..

000d7ff4 <_ZTV9TCPClient>:
	...
   d7ffc:	000d63b5 000d63e9 000d6283 000d629d     .c...c...b...b..
   d800c:	000d65d9 000d644b 000d641d 000d62c7     .e..Kd...d...b..
   d801c:	000d64e3 000d6749 000d647f 000d668d     .d..Ig...d...f..
   d802c:	000d62c9 000d62fb 000d62af 000d633b     .b...b...b..;c..
   d803c:	000d63fd                                .c..

000d8040 <_ZTVN5spark9WiFiClassE>:
	...
   d8048:	000d6897 000d688d 000d6883 000d6845     .h...h...h..Eh..
   d8058:	000d5ccb 000d6877 000d68f5 000d68fd     .\..wh...h...h..
   d8068:	000d686b 000d6863 000d6859 000d684f     kh..ch..Yh..Oh..
   d8078:	000d692d                                -i..

000d807c <_ZTVN5spark12NetworkClassE>:
	...
   d8084:	000d68b5 000d68bf 000d68c9 000d68d3     .h...h...h...h..
   d8094:	000d68dd 000d68e9 000d68f5 000d68fd     .h...h...h...h..
   d80a4:	000d6905 000d6911 000d6919 000d6923     .i...i...i..#i..
   d80b4:	000d692d                                -i..

000d80b8 <_ZSt7nothrow>:
	...

000d80b9 <_ZTSSt19_Sp_make_shared_tag>:
   d80b9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d80c9:	5f646572 00676174                        red_tag....

000d80d4 <_ZTISt19_Sp_make_shared_tag>:
   d80d4:	000d8114 000d80b9                       ........

000d80dc <_ZTIN10__cxxabiv117__class_type_infoE>:
   d80dc:	000d8174 000d80e8 000d8198              t...........

000d80e8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d80e8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d80f8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d8108:	00000045                                E...

000d810c <_ZTVN10__cxxabiv117__class_type_infoE>:
   d810c:	00000000 000d80dc 000d6c71 000d6c85     ........ql...l..
   d811c:	000d6e19 000d6e19 000d6cef 000d6c31     .n...n...l..1l..
   d812c:	000d6cd7 000d6c99 000d6c65              .l...l..el..

000d8138 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8138:	000d8174 000d8144 000d80dc              t...D.......

000d8144 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8144:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d8154:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d8164:	456f666e 00000000                       nfoE....

000d816c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d816c:	00000000 000d8138 000d6d19 000d6d2d     ....8....m..-m..
   d817c:	000d6e19 000d6e19 000d6cef 000d6c31     .n...n...l..1l..
   d818c:	000d6ded 000d6d79 000d6d41              .m..ym..Am..

000d8198 <_ZTISt9type_info>:
   d8198:	000d8114 000d81a0                       ........

000d81a0 <_ZTSSt9type_info>:
   d81a0:	74397453 5f657079 6f666e69               St9type_info.

000d81ad <_ctype_>:
   d81ad:	20202000 20202020 28282020 20282828     .         ((((( 
   d81bd:	20202020 20202020 20202020 20202020                     
   d81cd:	10108820 10101010 10101010 10101010      ...............
   d81dd:	04040410 04040404 10040404 10101010     ................
   d81ed:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d81fd:	01010101 01010101 01010101 10101010     ................
   d820d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d821d:	02020202 02020202 02020202 10101010     ................
   d822d:	00000020 00000000 00000000 00000000      ...............
	...

000d82ae <link_const_variable_data_end>:
	...

000d82b0 <link_constructors_location>:
   d82b0:	000d4f15 	.word	0x000d4f15
   d82b4:	000d5935 	.word	0x000d5935
   d82b8:	000d597d 	.word	0x000d597d
   d82bc:	000d59f9 	.word	0x000d59f9
   d82c0:	000d5cd9 	.word	0x000d5cd9
   d82c4:	000d5ce9 	.word	0x000d5ce9
   d82c8:	000d5d11 	.word	0x000d5d11
   d82cc:	000d68a1 	.word	0x000d68a1
   d82d0:	000d6a0d 	.word	0x000d6a0d

000d82d4 <link_constructors_end>:
	...
